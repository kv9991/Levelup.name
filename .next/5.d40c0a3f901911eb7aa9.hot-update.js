webpackHotUpdate(5,{

/***/ 593:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = __webpack_require__(93);

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = __webpack_require__(37);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(18);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(19);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(40);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(39);

var _inherits3 = _interopRequireDefault(_inherits2);

var _style = __webpack_require__(566);

var _style2 = _interopRequireDefault(_style);

var _react = __webpack_require__(10);

var _react2 = _interopRequireDefault(_react);

var _user = __webpack_require__(572);

var _user2 = _interopRequireDefault(_user);

var _app = __webpack_require__(575);

var _post = __webpack_require__(576);

var _editingPost = __webpack_require__(1202);

var _jsCookie = __webpack_require__(568);

var _jsCookie2 = _interopRequireDefault(_jsCookie);

var _reactRedux = __webpack_require__(565);

var _blog = __webpack_require__(592);

var _blog2 = _interopRequireDefault(_blog);

var _timeagoReact = __webpack_require__(745);

var _timeagoReact2 = _interopRequireDefault(_timeagoReact);

var _link = __webpack_require__(563);

var _link2 = _interopRequireDefault(_link);

var _getYouTube = __webpack_require__(725);

var _getYouTube2 = _interopRequireDefault(_getYouTube);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Note = function (_React$Component) {
	(0, _inherits3.default)(Note, _React$Component);

	function Note(props) {
		(0, _classCallCheck3.default)(this, Note);

		var _this = (0, _possibleConstructorReturn3.default)(this, (Note.__proto__ || (0, _getPrototypeOf2.default)(Note)).call(this, props));

		_this.token = _jsCookie2.default.get('x-access-token');
		_this.currentUser = _this.props.user.profile;
		_this.post = _this.props.post;
		_this.dispatch = _this.props.dispatch;
		_this.state = {
			isLiked: false,
			likeCounter: 0,
			isEditing: false,
			post: null
		};
		return _this;
	}

	(0, _createClass3.default)(Note, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			if (this.currentUser) {
				if (this.post.postLikes.indexOf(this.currentUser._id) != -1) {
					this.setState({
						isLiked: true,
						likeCounter: this.post.postLikes.length
					});
				}
			}
			if (this.post.postContent) {
				this.setState({
					post: this.post
				});
			}
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			$('.ui.dropdown').dropdown({
				on: 'hover'
			});
		}

		// добавить токен

	}, {
		key: 'handleRemove',
		value: function handleRemove(id) {
			var result = confirm('Вы действительно хотите удалить запись?');
			if (result) {
				(0, _post.removePostById)(id).then(function (res) {
					if (res.data.success) {
						$('.post-' + id).hide(500);
					}
				});
			}
		}
	}, {
		key: 'handleEditing',
		value: function handleEditing(post) {
			var _this2 = this;

			this.dispatch((0, _editingPost.startPostEditing)({
				postContent: post.postContent,
				postImage: post.postImage,
				postVideo: post.postVideo,
				postLink: post.postLink
			})).then(function () {
				_this2.setState({
					isEditing: true
				});
			});
		}
	}, {
		key: 'handleLike',
		value: function handleLike(postID, userID) {
			var _this3 = this;

			(0, _post.setLikeById)(this.token, postID).then(function (res) {
				if (res.data.success) {
					_this3.setState((0, _extends3.default)({}, _this3.state.post, {
						isLiked: !_this3.state.isLiked,
						likeCounter: res.data.counter
					}));
				}
			});
		}
	}, {
		key: 'uploadImage',
		value: function uploadImage(e) {
			var _this4 = this;

			var image = e.target.files[0];
			(0, _app.uploadImage)(this.token, image).then(function (res) {
				_this4.dispatch((0, _editingPost.updatePostImage)(res.path)).then(function () {
					_this4.setState({
						post: (0, _extends3.default)({}, _this4.state.post, {
							postImage: res.path
						})
					});
				});
			});
		}
	}, {
		key: 'handleSave',
		value: function handleSave(id, data, token) {
			var _this5 = this;

			this.dispatch((0, _editingPost.updatePost)(id, data, token)).then(function () {
				_this5.setState({
					isEditing: false,
					post: (0, _extends3.default)({}, _this5.state.post, data)
				});
			});
		}
	}, {
		key: 'removeImage',
		value: function removeImage() {
			var _this6 = this;

			this.dispatch((0, _editingPost.updatePostImage)(null)).then(function () {
				_this6.setState({
					post: (0, _extends3.default)({}, _this6.state.post, {
						postImage: null
					})
				});
			});
		}
	}, {
		key: 'removeVideo',
		value: function removeVideo() {
			var _this7 = this;

			this.dispatch((0, _editingPost.updatePostVideo)(null)).then(function () {
				_this7.setState({
					post: (0, _extends3.default)({}, _this7.state.post, {
						postVideo: null
					})
				});
			});
		}
	}, {
		key: 'onVideo',
		value: function onVideo(url) {
			var _this8 = this;

			var id = (0, _getYouTube2.default)(url);
			this.props.dispatch((0, _editingPost.updatePostVideo)(id)).then(function () {
				_this8.setState({
					post: (0, _extends3.default)({}, _this8.state.post, {
						postVideo: id
					})
				});
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _this9 = this;

			var post = this.state.post;
			if (post) {
				var likes = this.state.likeCounter;
				return _react2.default.createElement('article', { className: 'article note preview post-' + post._id, 'data-jsx': 1820629567
				}, _react2.default.createElement('div', { className: 'user', 'data-jsx': 1820629567
				}, _react2.default.createElement('div', { className: 'left', 'data-jsx': 1820629567
				}, post.postAuthor.authorType == 'user' ? _react2.default.createElement(_user2.default, { id: post.postAuthor.authorID }) : _react2.default.createElement(_blog2.default, { id: post.postAuthor.authorID })), _react2.default.createElement('div', { className: 'right', 'data-jsx': 1820629567
				}, _react2.default.createElement('div', { className: 'ui dropdown', 'data-jsx': 1820629567
				}, _react2.default.createElement('i', { className: 'fa fa-ellipsis-h', 'aria-hidden': 'true', 'data-jsx': 1820629567
				}), _react2.default.createElement('div', { className: 'menu', 'data-jsx': 1820629567
				}, _react2.default.createElement('div', { className: 'item', onClick: function onClick() {
						_this9.handleEditing(post);
					}, 'data-jsx': 1820629567
				}, '\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C'), _react2.default.createElement('div', { className: 'item', 'data-jsx': 1820629567
				}, '\u041F\u043E\u0436\u0430\u043B\u043E\u0432\u0430\u0442\u044C\u0441\u044F'), _react2.default.createElement('div', { className: 'item', onClick: function onClick() {
						_this9.handleRemove(post._id);
					}, 'data-jsx': 1820629567
				}, '\u0423\u0434\u0430\u043B\u0438\u0442\u044C'))))), _react2.default.createElement('div', { className: 'image', 'data-jsx': 1820629567
				}, _react2.default.createElement(Image, {
					url: post.postImage,
					dispatch: this.dispatch,
					editing: this.state.isEditing,
					onRemove: function onRemove() {
						_this9.removeImage();
					}
				}), _react2.default.createElement(Video, {
					video: post.postVideo,
					dispatch: this.dispatch,
					editing: this.state.isEditing,
					onRemove: function onRemove() {
						_this9.removeVideo();
					}
				})), _react2.default.createElement('div', { className: 'content', 'data-jsx': 1820629567
				}, _react2.default.createElement(Content, {
					text: post.postContent,
					editing: this.state.isEditing,
					dispatch: this.dispatch
				})), _react2.default.createElement('div', { className: 'link', 'data-jsx': 1820629567
				}, _react2.default.createElement(Url, {
					link: post.postLink,
					dispatch: this.dispatch,
					editing: this.state.isEditing
				})), _react2.default.createElement('div', { className: 'meta', 'data-jsx': 1820629567
				}, _react2.default.createElement('div', { className: 'left', 'data-jsx': 1820629567
				}, _react2.default.createElement(ActionBar, {
					dispatch: this.dispatch,
					parentState: this.state,
					post: post,
					editing: this.state.isEditing,
					onCancel: function onCancel() {
						_this9.setState({ isEditing: false });
					},
					onLike: function onLike() {
						_this9.handleLike(post._id, _this9.currentUser._id);
					},
					onSave: function onSave() {
						_this9.handleSave(post._id, _this9.props.editingPost, _this9.token);
					},
					onUpload: function onUpload(e) {
						_this9.uploadImage(e);
					},
					onVideo: function onVideo(url) {
						_this9.onVideo(url);
					}
				})), _react2.default.createElement('div', { className: 'right', 'data-jsx': 1820629567
				}, _react2.default.createElement('span', { className: 'time', 'data-jsx': 1820629567
				}, _react2.default.createElement(_timeagoReact2.default, { datetime: post.updated, locale: 'ru' })))), _react2.default.createElement(_style2.default, {
					styleId: 1820629567,
					css: '.note[data-jsx="1820629567"] {box-shadow: 0px 3px 18px 0px rgba(34, 36, 38, 0.1);padding:15px 19px;border-radius:4px;background:#fff;}.note[data-jsx="1820629567"] .user[data-jsx="1820629567"],.note[data-jsx="1820629567"] .meta[data-jsx="1820629567"] {display:-webkit-flex; display:flex;align-items:center;justify-content:space-between;}.note[data-jsx="1820629567"] .user[data-jsx="1820629567"] .dropdown[data-jsx="1820629567"] i[data-jsx="1820629567"] {color:#c0c0c0;font-size:16px;-webkit-transition:0.2s all ease;-moz-transition:0.2s all ease;-ms-transition:0.2s all ease;transition:0.2s all ease;}.note[data-jsx="1820629567"] .user[data-jsx="1820629567"] .dropdown[data-jsx="1820629567"] i[data-jsx="1820629567"]:hover {color:#000;}.note[data-jsx="1820629567"] .user[data-jsx="1820629567"] .dropdown[data-jsx="1820629567"] .menu[data-jsx="1820629567"] {left:auto!important;right:-15px!important;}.note[data-jsx="1820629567"] .meta[data-jsx="1820629567"] .time[data-jsx="1820629567"] {color:#c0c0c0;font-size:13px;}.note[data-jsx="1820629567"] p.primary[data-jsx="1820629567"] {font-size:17px;color:#333;}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\feed\\note.js */'
				}));
			} else {
				return _react2.default.createElement(Blank, null);
			}
		}
	}]);

	return Note;
}(_react2.default.Component);

var Video = function (_React$Component2) {
	(0, _inherits3.default)(Video, _React$Component2);

	function Video(props) {
		(0, _classCallCheck3.default)(this, Video);

		var _this10 = (0, _possibleConstructorReturn3.default)(this, (Video.__proto__ || (0, _getPrototypeOf2.default)(Video)).call(this, props));

		_this10.state = {
			isEditing: false,
			link: null
		};
		return _this10;
	}

	(0, _createClass3.default)(Video, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			if (this.props.video) {
				this.setState({
					link: this.props.video,
					isEditing: this.props.editing
				});
			}
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			this.setState({
				link: nextProps.video,
				isEditing: nextProps.editing
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _this11 = this;

			if (this.state.link) {
				if (this.state.isEditing) {
					return _react2.default.createElement('div', { className: 'video', 'data-jsx': 641432510
					}, _react2.default.createElement('iframe', {
						width: '100%',
						height: '315',
						src: 'https://www.youtube.com/embed/' + this.state.link,
						frameBorder: '0',
						allowFullScreen: true, 'data-jsx': 641432510
					}), _react2.default.createElement('i', { onClick: function onClick() {
							_this11.props.onRemove();
						},
						className: 'fa fa-close', 'data-jsx': 641432510
					}), _react2.default.createElement(_style2.default, {
						styleId: 641432510,
						css: '.video[data-jsx="641432510"] {position:relative;}.video[data-jsx="641432510"] i[data-jsx="641432510"] {position:absolute;right:0px;top:0px;padding:20px;opacity:0.5;font-size:17px;-webkit-transition:0.2s all ease;-moz-transition:0.2s all ease;-ms-transition:0.2s all ease;transition:0.2s all ease;}.video[data-jsx="641432510"] i[data-jsx="641432510"]:hover {opacity:1;}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\feed\\note.js */'
					}));
				} else {
					return _react2.default.createElement('iframe', {
						width: '100%',
						height: '315',
						src: 'https://www.youtube.com/embed/' + this.state.link,
						frameBorder: '0',
						allowFullScreen: true });
				}
			} else {
				return null;
			}
		}
	}]);

	return Video;
}(_react2.default.Component);

var Url = function (_React$Component3) {
	(0, _inherits3.default)(Url, _React$Component3);

	function Url(props) {
		(0, _classCallCheck3.default)(this, Url);

		var _this12 = (0, _possibleConstructorReturn3.default)(this, (Url.__proto__ || (0, _getPrototypeOf2.default)(Url)).call(this, props));

		_this12.state = {
			isEditing: false,
			link: null
		};
		return _this12;
	}

	(0, _createClass3.default)(Url, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			if (this.props.link) {
				this.setState({
					link: this.props.link,
					isEditing: this.props.editing
				});
			}
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			this.setState({
				link: nextProps.link,
				isEditing: nextProps.editing
			});
		}
	}, {
		key: 'saveLocally',
		value: function saveLocally(e) {
			var _this13 = this;

			var value = e.target.value;
			this.props.dispatch((0, _editingPost.updatePostLink)(value)).then(function () {
				_this13.setState({
					url: value
				});
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _this14 = this;

			if (this.state.link) {
				if (this.state.isEditing) {
					return _react2.default.createElement('div', { className: 'link', 'data-jsx': 2345020517
					}, _react2.default.createElement('i', { className: 'fa fa-link', 'data-jsx': 2345020517
					}), _react2.default.createElement('input', {
						onChange: function onChange(e) {
							_this14.saveLocally(e);
						},
						type: 'text',
						defaultValue: this.state.link,
						'data-jsx': 2345020517
					}), _react2.default.createElement(_style2.default, {
						styleId: 2345020517,
						css: '.link[data-jsx="2345020517"] {margin-bottom:15px;}.link[data-jsx="2345020517"] i[data-jsx="2345020517"] {margin-right:15px;opacity:.4;}.link[data-jsx="2345020517"] input[data-jsx="2345020517"] {border:0px;font-size:15px;outline:none;padding:5px;width:300px;}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\feed\\note.js */'
					}));
				} else {
					return _react2.default.createElement('div', { className: 'link', 'data-jsx': 2711014977
					}, _react2.default.createElement('i', { className: 'fa fa-link', 'data-jsx': 2711014977
					}), _react2.default.createElement('a', { href: this.state.link, target: '_blank', 'data-jsx': 2711014977
					}, this.state.link), _react2.default.createElement(_style2.default, {
						styleId: 2711014977,
						css: '.link[data-jsx="2711014977"] {margin-bottom:15px;}.link[data-jsx="2711014977"] i[data-jsx="2711014977"] {margin-right:15px;opacity:.4;}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\feed\\note.js */'
					}));
				}
			} else {
				return null;
			}
		}
	}]);

	return Url;
}(_react2.default.Component);

var Content = function (_React$Component4) {
	(0, _inherits3.default)(Content, _React$Component4);

	function Content(props) {
		(0, _classCallCheck3.default)(this, Content);

		var _this15 = (0, _possibleConstructorReturn3.default)(this, (Content.__proto__ || (0, _getPrototypeOf2.default)(Content)).call(this, props));

		_this15.dispatch = _this15.props.dispatch;
		_this15.state = {
			isEditing: false,
			text: ''
		};
		return _this15;
	}

	(0, _createClass3.default)(Content, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			this.setState({
				isEditing: this.props.editing,
				text: this.props.text
			});
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			this.setState({
				isEditing: nextProps.editing,
				text: nextProps.text
			});
		}
	}, {
		key: 'updateLocally',
		value: function updateLocally(e) {
			var _this16 = this;

			var value = e.target.value;
			this.dispatch((0, _editingPost.updatePostContent)(value)).then(function () {
				_this16.setState({
					text: value
				});
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _this17 = this;

			if (this.state.isEditing) {
				return _react2.default.createElement('div', { className: 'editor', 'data-jsx': 1285399774
				}, _react2.default.createElement('textarea', {
					onChange: function onChange(e) {
						_this17.updateLocally(e);
					},
					cols: '4',
					defaultValue: this.state.text,
					placeholder: '\u0412\u0430\u0448 \u0442\u0435\u043A\u0441\u0442..', 'data-jsx': 1285399774
				}), _react2.default.createElement(_style2.default, {
					styleId: 1285399774,
					css: '.editor[data-jsx="1285399774"] textarea[data-jsx="1285399774"] {width:100%;border:1px solid #eee;padding:14px;font-size:16px;outline:none;border-radius:4px;}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHNcXGZlZWRcXG5vdGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeWRtQixBQUNLLGdFQUNOLFdBQ1csc0JBQ1QsYUFDRSxlQUNGLGFBQ0ssa0JBQ2xCIiwiZmlsZSI6ImNvbXBvbmVudHNcXGZlZWRcXG5vdGUuanMiLCJzb3VyY2VSb290IjoiRTovd3d3L0xldmVsdXAubmFtZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBVc2VyIGZyb20gJy4uL3VzZXIuanMnXHJcbmltcG9ydCB7IHVwbG9hZEltYWdlIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9hcHAuanMnXHJcbmltcG9ydCB7IHNldExpa2VCeUlkLCBcclxuXHRcdFx0cmVtb3ZlUG9zdEJ5SWQgfSBmcm9tICcuLi8uLi9hY3Rpb25zL3Bvc3QuanMnXHJcbmltcG9ydCB7IHN0YXJ0UG9zdEVkaXRpbmcsIFxyXG5cdFx0XHR1cGRhdGVQb3N0Q29udGVudCxcclxuXHRcdFx0dXBkYXRlUG9zdEltYWdlLCBcclxuXHRcdFx0dXBkYXRlUG9zdExpbmssIFxyXG5cdFx0XHR1cGRhdGVQb3N0VmlkZW8sIFxyXG5cdFx0XHR1cGRhdGVQb3N0ICB9IGZyb20gJy4uLy4uL2FjdGlvbnMvZWRpdGluZ1Bvc3QuanMnXHJcbmltcG9ydCBjb29raWVzIGZyb20gJ2pzLWNvb2tpZSdcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG5pbXBvcnQgQmxvZyBmcm9tICcuLi9ibG9nLmpzJ1xyXG5pbXBvcnQgVGltZUFnbyBmcm9tICd0aW1lYWdvLXJlYWN0JztcclxuaW1wb3J0IExpbmsgZnJvbSAnbmV4dC9saW5rJ1xyXG5pbXBvcnQgZ2V0WW91VHViZUlkIGZyb20gJy4uLy4uL3V0aWxzL2dldFlvdVR1YmUuanMnIFxyXG5cclxuY2xhc3MgTm90ZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcblx0ICAgc3VwZXIocHJvcHMpO1xyXG5cdCAgIHRoaXMudG9rZW4gPSBjb29raWVzLmdldCgneC1hY2Nlc3MtdG9rZW4nKVxyXG5cdCAgIHRoaXMuY3VycmVudFVzZXIgPSB0aGlzLnByb3BzLnVzZXIucHJvZmlsZTtcclxuXHQgICB0aGlzLnBvc3QgPSB0aGlzLnByb3BzLnBvc3Q7XHJcblx0ICAgdGhpcy5kaXNwYXRjaCA9IHRoaXMucHJvcHMuZGlzcGF0Y2g7XHJcblx0ICAgdGhpcy5zdGF0ZSA9IHtcclxuXHQgICAgXHRpc0xpa2VkOiBmYWxzZSxcclxuXHQgICAgXHRsaWtlQ291bnRlcjogMCxcclxuXHQgICAgXHRpc0VkaXRpbmc6IGZhbHNlLFxyXG5cdCAgICBcdHBvc3Q6IG51bGxcclxuXHQgICB9XHJcbiAgIH1cclxuXHJcbiAgXHRjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcblx0ICBcdGlmKHRoaXMuY3VycmVudFVzZXIpIHtcclxuXHRcdCAgXHRpZih0aGlzLnBvc3QucG9zdExpa2VzLmluZGV4T2YodGhpcy5jdXJyZW50VXNlci5faWQpICE9IC0xKSB7XHJcblx0XHQgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHQgICAgICBpc0xpa2VkOiB0cnVlLFxyXG5cdFx0XHQgICAgICBsaWtlQ291bnRlcjogdGhpcy5wb3N0LnBvc3RMaWtlcy5sZW5ndGhcclxuXHRcdCAgICAgfSlcclxuXHRcdCAgIH1cclxuXHRcdH1cclxuXHRcdGlmKHRoaXMucG9zdC5wb3N0Q29udGVudCkge1xyXG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0IFx0cG9zdDogdGhpcy5wb3N0XHJcblx0XHRcdH0pXHJcblx0XHR9XHJcbiAgIH1cclxuXHJcbiAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICBcdCQoJy51aS5kcm9wZG93bicpLmRyb3Bkb3duKHtcclxuXHQgIFx0XHRvbjogJ2hvdmVyJ1xyXG5cdCAgXHR9KVxyXG4gICB9XHJcblxyXG4gIFx0Ly8g0LTQvtCx0LDQstC40YLRjCDRgtC+0LrQtdC9XHJcbiAgIGhhbmRsZVJlbW92ZShpZCkge1xyXG4gICAgICB2YXIgcmVzdWx0ID0gY29uZmlybSgn0JLRiyDQtNC10LnRgdGC0LLQuNGC0LXQu9GM0L3QviDRhdC+0YLQuNGC0LUg0YPQtNCw0LvQuNGC0Ywg0LfQsNC/0LjRgdGMPycpO1xyXG4gICAgICBpZiAocmVzdWx0KSB7XHJcblx0ICAgICAgcmVtb3ZlUG9zdEJ5SWQoaWQpLnRoZW4oKHJlcykgPT4ge1xyXG5cdCAgICAgIFx0aWYocmVzLmRhdGEuc3VjY2Vzcykge1xyXG5cdCAgICAgIFx0XHQkKCcucG9zdC0nICsgaWQpLmhpZGUoNTAwKTtcclxuXHQgICAgICBcdH1cclxuXHQgICAgICB9KVxyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgXHRoYW5kbGVFZGl0aW5nKHBvc3QpIHtcclxuICBcdFx0dGhpcy5kaXNwYXRjaChzdGFydFBvc3RFZGl0aW5nKHtcclxuICBcdFx0XHRwb3N0Q29udGVudDogcG9zdC5wb3N0Q29udGVudCxcclxuICBcdFx0XHRwb3N0SW1hZ2U6IHBvc3QucG9zdEltYWdlLFxyXG4gIFx0XHRcdHBvc3RWaWRlbzogcG9zdC5wb3N0VmlkZW8sXHJcbiAgXHRcdFx0cG9zdExpbms6IHBvc3QucG9zdExpbmtcclxuICBcdFx0fSkpLnRoZW4oKCkgPT4ge1xyXG4gIFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdCAgXHRcdFx0aXNFZGl0aW5nOiB0cnVlXHJcblx0ICBcdFx0fSlcclxuICBcdFx0fSlcclxuICBcdH1cclxuXHJcbiAgXHRoYW5kbGVMaWtlKHBvc3RJRCwgdXNlcklEKSB7XHJcbiAgICBcdHNldExpa2VCeUlkKHRoaXMudG9rZW4sIHBvc3RJRCkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIFx0aWYocmVzLmRhdGEuc3VjY2Vzcykge1xyXG5cdCAgICAgICAgXHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdCAgICAgICBcdC4uLnRoaXMuc3RhdGUucG9zdCxcclxuXHRcdCAgICAgICBcdGlzTGlrZWQ6ICF0aGlzLnN0YXRlLmlzTGlrZWQsXHJcblx0XHQgICAgICAgXHRsaWtlQ291bnRlcjogcmVzLmRhdGEuY291bnRlclxyXG5cdCAgICAgICAgfSlcclxuICAgICAgXHR9XHJcbiAgICBcdH0pXHJcbiAgXHR9XHJcblxyXG4gIFx0dXBsb2FkSW1hZ2UoZSkge1xyXG5cdCAgIHZhciBpbWFnZSA9IGUudGFyZ2V0LmZpbGVzWzBdO1xyXG5cdCAgIHVwbG9hZEltYWdlKHRoaXMudG9rZW4sIGltYWdlKS50aGVuKChyZXMpID0+IHtcclxuXHQgICBcdHRoaXMuZGlzcGF0Y2godXBkYXRlUG9zdEltYWdlKHJlcy5wYXRoKSkudGhlbigoKSA9PiB7XHJcblx0ICAgXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdCAgIFx0XHRcdHBvc3Q6IHtcclxuXHRcdFx0ICAgICAgICAgLi4udGhpcy5zdGF0ZS5wb3N0LFxyXG5cdFx0XHQgICAgICAgICBwb3N0SW1hZ2U6IHJlcy5wYXRoLFxyXG5cdFx0XHQgICAgICB9XHJcblx0ICAgXHRcdH0pXHJcblx0ICAgXHR9KVxyXG5cdCAgIH0pXHJcbiAgIH1cclxuXHJcbiAgXHRoYW5kbGVTYXZlKGlkLCBkYXRhLCB0b2tlbikge1xyXG4gIFx0XHR0aGlzLmRpc3BhdGNoKHVwZGF0ZVBvc3QoaWQsIGRhdGEsIHRva2VuKSkudGhlbigoKSA9PiB7XHJcbiAgXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XHJcbiAgXHRcdFx0XHRpc0VkaXRpbmc6IGZhbHNlLFxyXG4gIFx0XHRcdFx0cG9zdDoge1xyXG4gIFx0XHRcdFx0XHQuLi50aGlzLnN0YXRlLnBvc3QsXHJcbiAgXHRcdFx0XHRcdC4uLmRhdGFcclxuICBcdFx0XHRcdH1cclxuICBcdFx0XHR9KVxyXG4gIFx0XHR9KVxyXG4gIFx0fVxyXG5cclxuICBcdHJlbW92ZUltYWdlKCkge1xyXG4gIFx0XHR0aGlzLmRpc3BhdGNoKHVwZGF0ZVBvc3RJbWFnZShudWxsKSkudGhlbigoKSA9PntcclxuICBcdFx0XHR0aGlzLnNldFN0YXRlKHtcclxuICBcdFx0XHRcdHBvc3Q6IHtcclxuICBcdFx0XHRcdFx0Li4udGhpcy5zdGF0ZS5wb3N0LFxyXG4gIFx0XHRcdFx0XHRwb3N0SW1hZ2U6IG51bGxcclxuICBcdFx0XHRcdH1cclxuICBcdFx0XHR9KVxyXG4gIFx0XHR9KVxyXG4gIFx0fVxyXG5cclxuICBcdHJlbW92ZVZpZGVvKCkge1xyXG4gIFx0XHR0aGlzLmRpc3BhdGNoKHVwZGF0ZVBvc3RWaWRlbyhudWxsKSkudGhlbigoKSA9PntcclxuICBcdFx0XHR0aGlzLnNldFN0YXRlKHtcclxuICBcdFx0XHRcdHBvc3Q6IHtcclxuICBcdFx0XHRcdFx0Li4udGhpcy5zdGF0ZS5wb3N0LFxyXG4gIFx0XHRcdFx0XHRwb3N0VmlkZW86IG51bGxcclxuICBcdFx0XHRcdH1cclxuICBcdFx0XHR9KVxyXG4gIFx0XHR9KVxyXG4gIFx0fVxyXG5cclxuICBcdG9uVmlkZW8odXJsKSB7XHJcblx0ICAgdmFyIGlkID0gZ2V0WW91VHViZUlkKHVybClcclxuXHQgIFx0dGhpcy5wcm9wcy5kaXNwYXRjaCh1cGRhdGVQb3N0VmlkZW8oaWQpKS50aGVuKCgpID0+IHtcclxuXHQgIFx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHQgIFx0XHRcdHBvc3Q6IHtcclxuICBcdFx0XHRcdFx0Li4udGhpcy5zdGF0ZS5wb3N0LFxyXG4gIFx0XHRcdFx0XHRwb3N0VmlkZW86IGlkXHJcbiAgXHRcdFx0XHR9XHJcblx0ICBcdFx0fSlcclxuXHQgIFx0fSlcclxuICAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICB2YXIgcG9zdCA9IHRoaXMuc3RhdGUucG9zdDtcclxuXHRcdGlmIChwb3N0KSB7XHJcblx0XHRcdHZhciBsaWtlcyA9IHRoaXMuc3RhdGUubGlrZUNvdW50ZXI7XHJcblx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0PGFydGljbGUgY2xhc3NOYW1lPXtgYXJ0aWNsZSBub3RlIHByZXZpZXcgcG9zdC0ke3Bvc3QuX2lkfWB9PlxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJ1c2VyXCI+XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwibGVmdFwiPlxyXG5cdFx0XHRcdFx0XHRcdHsocG9zdC5wb3N0QXV0aG9yLmF1dGhvclR5cGUgPT0gJ3VzZXInKSA/XHJcblx0XHRcdFx0XHQgICAgICAgICA8VXNlciBpZD17cG9zdC5wb3N0QXV0aG9yLmF1dGhvcklEfSAvPiA6IDxCbG9nIGlkPXtwb3N0LnBvc3RBdXRob3IuYXV0aG9ySUR9IC8+XHJcblx0XHRcdFx0XHQgICAgICB9XHJcblx0XHRcdFx0ICAgICAgPC9kaXY+XHJcblx0XHRcdCAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmlnaHRcIj5cclxuXHRcdFx0ICAgICAgICBcdDxkaXYgY2xhc3NOYW1lPVwidWkgZHJvcGRvd25cIj5cclxuXHRcdFx0XHRcdFx0XHQ8aSBjbGFzc05hbWU9XCJmYSBmYS1lbGxpcHNpcy1oXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG5cdFx0XHRcdFx0XHRcdCAgPGRpdiBjbGFzc05hbWU9XCJtZW51XCI+XHJcblx0XHRcdFx0XHRcdFx0ICBcdCA8ZGl2IGNsYXNzTmFtZT1cIml0ZW1cIiBvbkNsaWNrPXsoKSA9PiB7dGhpcy5oYW5kbGVFZGl0aW5nKHBvc3QpfX0+0KDQtdC00LDQutGC0LjRgNC+0LLQsNGC0Yw8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHQgIFx0IDxkaXYgY2xhc3NOYW1lPVwiaXRlbVwiPtCf0L7QttCw0LvQvtCy0LDRgtGM0YHRjzwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdCAgICA8ZGl2IGNsYXNzTmFtZT1cIml0ZW1cIiBvbkNsaWNrPXsoKSA9PiB7dGhpcy5oYW5kbGVSZW1vdmUocG9zdC5faWQpfX0+0KPQtNCw0LvQuNGC0Yw8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdCAgICAgICAgIDwvZGl2PlxyXG5cdFx0XHRcdCAgIDwvZGl2PlxyXG5cdFx0XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cImltYWdlXCI+XHJcblx0XHRcdCAgICAgICAgXHQ8SW1hZ2UgXHJcblx0XHRcdCAgICAgICAgXHRcdHVybD17cG9zdC5wb3N0SW1hZ2V9XHJcblx0XHRcdCAgICAgICAgXHRcdGRpc3BhdGNoPXt0aGlzLmRpc3BhdGNofVxyXG5cdFx0XHQgICAgICAgIFx0XHRlZGl0aW5nPXt0aGlzLnN0YXRlLmlzRWRpdGluZ31cclxuXHRcdFx0ICAgICAgICBcdFx0b25SZW1vdmU9eygpID0+IHt0aGlzLnJlbW92ZUltYWdlKCl9fVxyXG5cdFx0XHQgICAgICAgIFx0Lz5cclxuXHRcdFx0ICAgICAgICBcdDxWaWRlbyBcclxuXHRcdFx0ICAgICAgICBcdFx0dmlkZW89e3Bvc3QucG9zdFZpZGVvfVxyXG5cdFx0XHQgICAgICAgIFx0XHRkaXNwYXRjaD17dGhpcy5kaXNwYXRjaH1cclxuXHRcdFx0ICAgICAgICBcdFx0ZWRpdGluZz17dGhpcy5zdGF0ZS5pc0VkaXRpbmd9XHJcblx0XHRcdCAgICAgICAgXHRcdG9uUmVtb3ZlPXsoKSA9PiB7dGhpcy5yZW1vdmVWaWRlbygpfX1cclxuXHRcdFx0ICAgICAgICBcdC8+XHJcblx0XHRcdCAgICAgIDwvZGl2PlxyXG5cdFx0XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRcIj5cclxuXHRcdFx0ICAgICAgICBcdCA8Q29udGVudCBcclxuXHRcdFx0ICAgICAgICBcdCBcdHRleHQ9e3Bvc3QucG9zdENvbnRlbnR9IFxyXG5cdFx0XHQgICAgICAgIFx0IFx0ZWRpdGluZz17dGhpcy5zdGF0ZS5pc0VkaXRpbmd9XHJcblx0XHRcdCAgICAgICAgXHQgXHRkaXNwYXRjaD17dGhpcy5kaXNwYXRjaH1cclxuXHRcdFx0ICAgICAgICBcdCAvPlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJsaW5rXCI+XHJcblx0XHRcdCAgICAgIFx0PFVybCBcclxuXHRcdFx0ICAgICAgXHRcdGxpbms9e3Bvc3QucG9zdExpbmt9XHJcblx0XHRcdCAgICAgIFx0XHRkaXNwYXRjaD17dGhpcy5kaXNwYXRjaH1cclxuXHRcdFx0ICAgICAgXHRcdGVkaXRpbmc9e3RoaXMuc3RhdGUuaXNFZGl0aW5nfVxyXG5cdFx0XHQgICAgICBcdC8+XHJcblx0XHRcdCAgICAgIDwvZGl2PlxyXG5cdFx0XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1ldGFcIj5cclxuXHRcdFx0ICAgICAgICBcdDxkaXYgY2xhc3NOYW1lPVwibGVmdFwiPlxyXG5cdFx0XHRcdCAgICAgICAgXHQ8QWN0aW9uQmFyIFxyXG5cdFx0XHRcdCAgICAgICAgXHRcdGRpc3BhdGNoPXt0aGlzLmRpc3BhdGNofVxyXG5cdFx0XHRcdCAgICAgICAgXHRcdHBhcmVudFN0YXRlPXt0aGlzLnN0YXRlfVxyXG5cdFx0XHRcdCAgICAgICAgXHRcdHBvc3Q9e3Bvc3R9XHJcblx0XHRcdFx0ICAgICAgICBcdFx0ZWRpdGluZz17dGhpcy5zdGF0ZS5pc0VkaXRpbmd9XHJcblx0XHRcdFx0ICAgICAgICBcdFx0b25DYW5jZWw9eygpID0+IHt0aGlzLnNldFN0YXRlKHtpc0VkaXRpbmc6IGZhbHNlfSl9fVxyXG5cdFx0XHRcdCAgICAgICAgXHRcdG9uTGlrZT17KCkgPT4ge3RoaXMuaGFuZGxlTGlrZShwb3N0Ll9pZCwgdGhpcy5jdXJyZW50VXNlci5faWQpfX1cclxuXHRcdFx0XHQgICAgICAgIFx0XHRvblNhdmU9eygpID0+IHt0aGlzLmhhbmRsZVNhdmUocG9zdC5faWQsIHRoaXMucHJvcHMuZWRpdGluZ1Bvc3QsIHRoaXMudG9rZW4pfX1cclxuXHRcdFx0XHQgICAgICAgIFx0XHRvblVwbG9hZD17KGUpID0+IHt0aGlzLnVwbG9hZEltYWdlKGUpfX1cclxuXHRcdFx0XHQgICAgICAgIFx0XHRvblZpZGVvPXsodXJsKSA9PiB7dGhpcy5vblZpZGVvKHVybCl9fVxyXG5cdFx0XHRcdCAgICAgICAgXHQvPlxyXG5cdFx0XHRcdCAgICAgIDwvZGl2PlxyXG5cdFx0XHQgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJpZ2h0XCI+XHJcblx0XHRcdCAgICAgICAgXHRcdDxzcGFuIGNsYXNzTmFtZT1cInRpbWVcIj5cclxuXHRcdFx0ICAgICAgICBcdFx0XHQ8VGltZUFnbyBkYXRldGltZT17cG9zdC51cGRhdGVkfSBsb2NhbGU9J3J1JyAvPlxyXG5cdFx0XHQgICAgICAgIFx0XHQ8L3NwYW4+XHJcblx0XHQgICAgICAgIFx0XHQ8L2Rpdj5cclxuXHRcdFx0ICAgICAgPC9kaXY+XHJcblx0XHRcdCAgICAgIDxzdHlsZSBqc3g+e2BcclxuXHRcdFx0ICAgICAgICBcdCAubm90ZSB7XHJcblx0XHRcdCAgICAgICAgXHQgXHRib3gtc2hhZG93OiAwcHggM3B4IDE4cHggMHB4IHJnYmEoMzQsIDM2LCAzOCwgMC4xKTtcclxuXHRcdFx0ICAgICAgICBcdCBcdHBhZGRpbmc6MTVweCAxOXB4O1xyXG5cdFx0XHQgICAgICAgIFx0IFx0Ym9yZGVyLXJhZGl1czo0cHg7XHJcblx0XHRcdCAgICAgICAgXHQgXHRiYWNrZ3JvdW5kOiNmZmY7XHJcblx0XHRcdCAgICAgICAgXHQgfVxyXG5cdFx0XHQgICAgICAgICAgLm5vdGUgLnVzZXIsXHJcblx0XHRcdCAgICAgICAgICAubm90ZSAubWV0YSB7XHJcblx0XHRcdCAgICAgICAgICBcdGRpc3BsYXk6ZmxleDtcclxuXHRcdFx0ICAgICAgICAgIFx0YWxpZ24taXRlbXM6Y2VudGVyO1xyXG5cdFx0XHQgICAgICAgICAgXHRqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtcclxuXHRcdFx0ICAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAgIC5ub3RlIC51c2VyIC5kcm9wZG93biBpIHtcclxuXHRcdFx0ICAgICAgICAgIFx0Y29sb3I6I2MwYzBjMDtcclxuXHRcdFx0ICAgICAgICAgIFx0Zm9udC1zaXplOjE2cHg7XHJcblx0XHRcdCAgICAgICAgICBcdHRyYW5zaXRpb246MC4ycyBhbGwgZWFzZTtcclxuXHRcdFx0ICAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAgIC5ub3RlIC51c2VyIC5kcm9wZG93biBpOmhvdmVyIHtcclxuXHRcdFx0ICAgICAgICAgIFx0Y29sb3I6IzAwMDtcclxuXHRcdFx0ICAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAgIC5ub3RlIC51c2VyIC5kcm9wZG93biAubWVudSB7XHJcblx0XHRcdCAgICAgICAgICBcdGxlZnQ6YXV0byFpbXBvcnRhbnQ7XHJcblx0XHRcdCAgICAgICAgICBcdHJpZ2h0Oi0xNXB4IWltcG9ydGFudDtcclxuXHRcdFx0ICAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAgIC5ub3RlIC5tZXRhIC50aW1lIHtcclxuXHRcdFx0XHRcdFx0XHRjb2xvcjojYzBjMGMwO1xyXG5cdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZToxM3B4O1xyXG5cdFx0XHQgICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICAgLm5vdGUgcC5wcmltYXJ5IHtcclxuXHRcdFx0ICAgICAgICAgIFx0Zm9udC1zaXplOjE3cHg7XHJcblx0XHRcdCAgICAgICAgICBcdGNvbG9yOiMzMzM7XHJcblx0XHRcdCAgICAgICAgICB9XHJcblx0XHRcdCAgICAgIGB9PC9zdHlsZT5cclxuXHRcdCAgIFx0PC9hcnRpY2xlPlxyXG5cdFx0XHQpXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gPEJsYW5rIC8+XHJcblx0XHR9XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBWaWRlbyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcblx0ICAgc3VwZXIocHJvcHMpO1xyXG5cdCAgIHRoaXMuc3RhdGUgPSB7XHJcblx0ICAgXHRpc0VkaXRpbmc6IGZhbHNlLFxyXG5cdCAgIFx0bGluazogbnVsbFxyXG5cdCAgIH1cclxuICAgfVxyXG5cclxuICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG4gICBcdGlmKHRoaXMucHJvcHMudmlkZW8pIHtcclxuXHQgICBcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdCAgIFx0XHRsaW5rOiB0aGlzLnByb3BzLnZpZGVvLFxyXG5cdCAgIFx0XHRpc0VkaXRpbmc6IHRoaXMucHJvcHMuZWRpdGluZ1xyXG5cdCAgIFx0fSlcclxuXHQgICB9XHJcbiAgIH1cclxuXHJcbiAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XHJcbiAgIFx0dGhpcy5zZXRTdGF0ZSh7XHJcbiAgIFx0XHRsaW5rOiBuZXh0UHJvcHMudmlkZW8sXHJcbiAgIFx0XHRpc0VkaXRpbmc6IG5leHRQcm9wcy5lZGl0aW5nXHJcbiAgIFx0fSlcclxuICAgfVxyXG5cclxuICAgcmVuZGVyKCkge1xyXG4gICBcdGlmKHRoaXMuc3RhdGUubGluaykge1xyXG4gICBcdFx0aWYodGhpcy5zdGF0ZS5pc0VkaXRpbmcpIHtcclxuICAgXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWRlb1wiPlxyXG5cdFx0XHQgICAgICBcdDxpZnJhbWUgXHJcblx0XHRcdFx0ICAgICAgXHR3aWR0aD1cIjEwMCVcIiBcclxuXHRcdFx0XHQgICAgICBcdGhlaWdodD1cIjMxNVwiIFxyXG5cdFx0XHRcdCAgICAgIFx0c3JjPXtgaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvJHt0aGlzLnN0YXRlLmxpbmt9YH0gXHJcblx0XHRcdFx0ICAgICAgXHRmcmFtZUJvcmRlcj1cIjBcIiBcclxuXHRcdFx0XHQgICAgICBcdGFsbG93RnVsbFNjcmVlbj17dHJ1ZX0+XHJcblx0XHRcdFx0ICAgICAgPC9pZnJhbWU+XHJcblx0XHRcdFx0ICAgICAgPGkgb25DbGljaz17KCkgPT4ge3RoaXMucHJvcHMub25SZW1vdmUoKX19IFxyXG5cdFx0XHRcdCAgICAgIFx0Y2xhc3NOYW1lPVwiZmEgZmEtY2xvc2VcIj5cclxuXHRcdFx0XHQgICAgICA8L2k+XHJcblx0XHRcdFx0ICAgICAgPHN0eWxlIGpzeD57YFxyXG5cdFx0XHRcdFx0XHRcdC52aWRlbyB7XHJcblx0XHRcdFx0XHRcdFx0XHRwb3NpdGlvbjpyZWxhdGl2ZTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0LnZpZGVvIGkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cG9zaXRpb246YWJzb2x1dGU7XHJcblx0XHRcdFx0XHRcdFx0XHRyaWdodDowcHg7XHJcblx0XHRcdFx0XHRcdFx0XHR0b3A6MHB4O1xyXG5cdFx0XHRcdFx0XHRcdFx0cGFkZGluZzoyMHB4O1xyXG5cdFx0XHRcdFx0XHRcdFx0b3BhY2l0eTowLjU7XHJcblx0XHRcdFx0XHRcdFx0XHRmb250LXNpemU6MTdweDtcclxuXHRcdFx0XHRcdFx0XHRcdHRyYW5zaXRpb246MC4ycyBhbGwgZWFzZTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0LnZpZGVvIGk6aG92ZXIge1xyXG5cdFx0XHRcdFx0XHRcdFx0b3BhY2l0eToxO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHQgICAgICBgfTwvc3R5bGU+XHJcblx0XHRcdCAgICAgIDwvZGl2PlxyXG5cdFx0XHQgICApXHJcbiAgIFx0XHR9IGVsc2Uge1xyXG4gICBcdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHQgICAgICA8aWZyYW1lIFxyXG5cdFx0XHQgICAgICBcdHdpZHRoPVwiMTAwJVwiIFxyXG5cdFx0XHQgICAgICBcdGhlaWdodD1cIjMxNVwiIFxyXG5cdFx0XHQgICAgICBcdHNyYz17YGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyR7dGhpcy5zdGF0ZS5saW5rfWB9IFxyXG5cdFx0XHQgICAgICBcdGZyYW1lQm9yZGVyPVwiMFwiIFxyXG5cdFx0XHQgICAgICBcdGFsbG93RnVsbFNjcmVlbj17dHJ1ZX0+XHJcblx0XHRcdCAgICAgIDwvaWZyYW1lPlxyXG5cdFx0XHQgICApXHJcbiAgIFx0XHR9XHJcbiAgIFx0fSBlbHNlIHtcclxuICAgXHRcdHJldHVybiBudWxsXHJcbiAgIFx0fVxyXG4gICB9XHJcbn1cclxuXHJcblxyXG5jbGFzcyBVcmwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG5cdCAgIHN1cGVyKHByb3BzKTtcclxuXHQgICB0aGlzLnN0YXRlID0ge1xyXG5cdCAgIFx0aXNFZGl0aW5nOiBmYWxzZSxcclxuXHQgICBcdGxpbms6IG51bGxcclxuXHQgICB9XHJcbiAgIH1cclxuXHJcbiAgIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuICAgXHRpZih0aGlzLnByb3BzLmxpbmspIHtcclxuXHQgICBcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdCAgIFx0XHRsaW5rOiB0aGlzLnByb3BzLmxpbmssXHJcblx0ICAgXHRcdGlzRWRpdGluZzogdGhpcy5wcm9wcy5lZGl0aW5nXHJcblx0ICAgXHR9KVxyXG5cdCAgIH1cclxuICAgfVxyXG5cclxuICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcclxuICAgXHR0aGlzLnNldFN0YXRlKHtcclxuICAgXHRcdGxpbms6IG5leHRQcm9wcy5saW5rLFxyXG4gICBcdFx0aXNFZGl0aW5nOiBuZXh0UHJvcHMuZWRpdGluZ1xyXG4gICBcdH0pXHJcbiAgIH1cclxuXHJcbiAgIHNhdmVMb2NhbGx5KGUpIHtcclxuICAgXHR2YXIgdmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcclxuICAgXHR0aGlzLnByb3BzLmRpc3BhdGNoKHVwZGF0ZVBvc3RMaW5rKHZhbHVlKSkudGhlbigoKSA9PiB7XHJcbiAgIFx0XHR0aGlzLnNldFN0YXRlKHtcclxuICAgXHRcdFx0dXJsOiB2YWx1ZVxyXG4gICBcdFx0fSlcclxuICAgXHR9KVxyXG4gICB9XHJcblxyXG4gICByZW5kZXIoKSB7XHJcbiAgIFx0aWYodGhpcy5zdGF0ZS5saW5rKSB7XHJcblx0XHQgIFx0aWYodGhpcy5zdGF0ZS5pc0VkaXRpbmcpIHtcclxuXHRcdCAgXHRcdHJldHVybiAoXHJcblx0XHRcdCAgXHRcdDxkaXYgY2xhc3NOYW1lPVwibGlua1wiPlxyXG5cdFx0XHQgICAgICAgIFx0PGkgY2xhc3NOYW1lPVwiZmEgZmEtbGlua1wiPjwvaT5cclxuXHRcdFx0ICAgICAgICBcdDxpbnB1dCBcclxuXHRcdFx0ICAgICAgICBcdFx0b25DaGFuZ2U9eyhlKSA9PiB7dGhpcy5zYXZlTG9jYWxseShlKX19IFxyXG5cdFx0XHQgICAgICAgIFx0XHR0eXBlPVwidGV4dFwiIFxyXG5cdFx0XHQgICAgICAgIFx0XHRkZWZhdWx0VmFsdWU9e3RoaXMuc3RhdGUubGlua30gXHJcblx0XHRcdCAgICAgICAgXHQvPlxyXG5cdFx0XHQgICAgICAgIFx0PHN0eWxlIGpzeD57YFxyXG5cdFx0XHRcdFx0XHRcdC5saW5rIHtcclxuXHRcdFx0XHQgICAgICAgICAgXHRtYXJnaW4tYm90dG9tOjE1cHg7XHJcblx0XHRcdFx0ICAgICAgICAgIH1cclxuXHRcdFx0XHQgICAgICAgICAubGluayBpIHtcclxuXHRcdFx0XHQgICAgICAgICAgXHRtYXJnaW4tcmlnaHQ6MTVweDtcclxuXHRcdFx0XHQgICAgICAgICAgXHRvcGFjaXR5Oi40O1xyXG5cdFx0XHRcdCAgICAgICAgIH1cclxuXHRcdFx0XHQgICAgICAgICAubGluayBpbnB1dCB7XHJcblx0XHRcdFx0ICAgICAgICAgXHRib3JkZXI6MHB4O1xyXG5cdFx0XHRcdCAgICAgICAgIFx0Zm9udC1zaXplOjE1cHg7XHJcblx0XHRcdFx0ICAgICAgICAgXHRvdXRsaW5lOm5vbmU7XHJcblx0XHRcdFx0ICAgICAgICAgXHRwYWRkaW5nOjVweDtcclxuXHRcdFx0XHQgICAgICAgICBcdHdpZHRoOjMwMHB4O1xyXG5cdFx0XHRcdCAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICBcdGB9PC9zdHlsZT5cclxuXHRcdFx0ICAgICAgPC9kaXY+IFxyXG5cdFx0XHQgICApXHJcblx0XHQgIFx0fSBlbHNlIHtcclxuXHRcdCAgXHRcdHJldHVybiAoXHJcblx0XHQgIFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwibGlua1wiPlxyXG5cdFx0XHQgICAgICAgIFx0PGkgY2xhc3NOYW1lPVwiZmEgZmEtbGlua1wiPjwvaT5cclxuXHRcdFx0ICAgICAgICBcdDxhIGhyZWY9e3RoaXMuc3RhdGUubGlua30gdGFyZ2V0PVwiX2JsYW5rXCI+e3RoaXMuc3RhdGUubGlua308L2E+XHJcblx0XHRcdCAgICAgICAgXHQ8c3R5bGUganN4PntgXHJcblx0XHRcdFx0XHRcdFx0Lmxpbmsge1xyXG5cdFx0XHRcdCAgICAgICAgICBcdG1hcmdpbi1ib3R0b206MTVweDtcclxuXHRcdFx0XHQgICAgICAgICAgfVxyXG5cdFx0XHRcdCAgICAgICAgIC5saW5rIGkge1xyXG5cdFx0XHRcdCAgICAgICAgICBcdG1hcmdpbi1yaWdodDoxNXB4O1xyXG5cdFx0XHRcdCAgICAgICAgICBcdG9wYWNpdHk6LjQ7XHJcblx0XHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgIFx0YH08L3N0eWxlPlxyXG5cdFx0XHQgICAgICA8L2Rpdj4gXHJcblx0XHQgIFx0XHQpXHJcblx0XHQgIFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIG51bGxcclxuXHRcdH1cclxuICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmNsYXNzIENvbnRlbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG5cdCAgIHN1cGVyKHByb3BzKTtcclxuXHQgICB0aGlzLmRpc3BhdGNoID0gdGhpcy5wcm9wcy5kaXNwYXRjaDtcclxuXHQgICB0aGlzLnN0YXRlID0ge1xyXG5cdCAgICBcdGlzRWRpdGluZzogZmFsc2UsXHJcblx0ICAgIFx0dGV4dDogJydcclxuXHQgICB9XHJcbiAgIH1cclxuXHJcbiAgIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuXHQgIFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0ICBcdFx0aXNFZGl0aW5nOiB0aGlzLnByb3BzLmVkaXRpbmcsXHJcblx0ICBcdFx0dGV4dDogdGhpcy5wcm9wcy50ZXh0XHJcblx0ICBcdH0pXHJcblx0ICAgfVxyXG5cclxuICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcclxuXHQgIFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0ICBcdFx0aXNFZGl0aW5nOiBuZXh0UHJvcHMuZWRpdGluZyxcclxuXHQgIFx0XHR0ZXh0OiBuZXh0UHJvcHMudGV4dFxyXG5cdCAgXHR9KVxyXG4gICB9XHJcblxyXG4gICB1cGRhdGVMb2NhbGx5KGUpIHtcclxuXHQgIFx0dmFyIHZhbHVlID0gZS50YXJnZXQudmFsdWU7XHJcblx0ICBcdHRoaXMuZGlzcGF0Y2godXBkYXRlUG9zdENvbnRlbnQodmFsdWUpKS50aGVuKCgpID0+IHtcclxuXHQgIFx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHQgIFx0XHRcdHRleHQ6dmFsdWVcclxuXHQgIFx0XHR9KVxyXG5cdCAgXHR9KVxyXG4gICB9XHJcblxyXG4gIFx0cmVuZGVyKCkge1xyXG4gIFx0XHRpZih0aGlzLnN0YXRlLmlzRWRpdGluZykge1xyXG4gIFx0XHRcdHJldHVybiAoXHJcbiAgXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImVkaXRvclwiPlxyXG4gIFx0XHRcdFx0XHQ8dGV4dGFyZWEgXHJcblx0ICBcdFx0XHRcdFx0b25DaGFuZ2U9eyhlKSA9PiB7dGhpcy51cGRhdGVMb2NhbGx5KGUpfX0gXHJcblx0ICBcdFx0XHRcdFx0Y29scz1cIjRcIiBcclxuXHQgIFx0XHRcdFx0XHRkZWZhdWx0VmFsdWU9e3RoaXMuc3RhdGUudGV4dH0gXHJcblx0ICBcdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCLQktCw0Ygg0YLQtdC60YHRgi4uXCI+XHJcbiAgXHRcdFx0XHRcdDwvdGV4dGFyZWE+XHJcbiAgXHRcdFx0XHRcdDxzdHlsZSBqc3g+e2BcclxuXHRcdFx0XHRcdFx0LmVkaXRvciB0ZXh0YXJlYSB7XHJcblx0XHRcdFx0XHRcdFx0d2lkdGg6MTAwJTtcclxuXHRcdFx0XHRcdFx0XHRib3JkZXI6MXB4IHNvbGlkICNlZWU7XHJcblx0XHRcdFx0XHRcdFx0cGFkZGluZzoxNHB4O1xyXG5cdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZToxNnB4O1xyXG5cdFx0XHRcdFx0XHRcdG91dGxpbmU6bm9uZTtcclxuXHRcdFx0XHRcdFx0XHRib3JkZXItcmFkaXVzOjRweDtcclxuXHRcdFx0XHRcdFx0fVxyXG4gIFx0XHRcdFx0XHRgfTwvc3R5bGU+XHJcbiAgXHRcdFx0XHQ8L2Rpdj5cclxuICBcdFx0XHQpXHJcbiAgXHRcdH0gZWxzZSB7XHJcblx0ICBcdFx0cmV0dXJuIChcclxuXHRcdCAgICBcdDxkaXY+XHJcblx0XHRcdCAgICAgIDxwIGNsYXNzTmFtZT1cInByaW1hcnlcIj5cclxuXHRcdFx0ICAgICAgXHR7dGhpcy5zdGF0ZS50ZXh0fVxyXG5cdFx0XHQgICAgICA8L3A+XHJcblx0XHQgICAgICA8L2Rpdj5cclxuXHQgICBcdCk7XHJcbiAgXHRcdH1cclxuICAgfVxyXG59XHJcblxyXG5jbGFzcyBJbWFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcblx0ICAgc3VwZXIocHJvcHMpO1xyXG5cdCAgIHRoaXMuZGlzcGF0Y2ggPSB0aGlzLnByb3BzLmRpc3BhdGNoO1xyXG5cdCAgIHRoaXMuc3RhdGUgPSB7XHJcblx0ICAgIFx0aXNFZGl0aW5nOiBmYWxzZSxcclxuXHQgICAgXHR1cmw6IG51bGxcclxuXHQgICB9XHJcbiAgIH1cclxuXHJcbiAgIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuXHQgIFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0ICBcdFx0aXNFZGl0aW5nOiB0aGlzLnByb3BzLmVkaXRpbmcsXHJcblx0ICBcdFx0dXJsOiB0aGlzLnByb3BzLnVybFxyXG5cdCAgXHR9KVxyXG4gICB9XHJcblxyXG4gICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG5cdCAgXHR0aGlzLnNldFN0YXRlKHtcclxuXHQgIFx0XHRpc0VkaXRpbmc6IG5leHRQcm9wcy5lZGl0aW5nLFxyXG5cdCAgXHRcdHVybDogbmV4dFByb3BzLnVybFxyXG4gIFx0XHR9KVxyXG4gICB9XHJcblxyXG4gICB1cGRhdGVMb2NhbGx5KHVybCkge1xyXG5cdCAgXHR0aGlzLmRpc3BhdGNoKHVwZGF0ZVBvc3RJbWFnZSh1cmwpKS50aGVuKCgpID0+IHtcclxuXHQgIFx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHQgIFx0XHRcdHVybDogdXJsXHJcblx0ICBcdFx0fSlcclxuXHQgIFx0fSlcclxuICAgfVxyXG5cclxuICBcdHJlbmRlcigpIHtcclxuICBcdFx0aWYodGhpcy5zdGF0ZS51cmwpIHtcclxuXHQgIFx0XHRpZih0aGlzLnN0YXRlLmlzRWRpdGluZykge1xyXG5cdCAgXHRcdFx0cmV0dXJuIChcclxuXHQgIFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJlZGl0b3JcIj5cclxuXHQgIFx0XHRcdFx0XHQ8aW1nIHNyYz17dGhpcy5zdGF0ZS51cmx9IHdpZHRoPVwiMTAwJVwiIC8+XHJcblx0ICBcdFx0XHRcdFx0PGkgY2xhc3NOYW1lPVwiZmEgZmEtY2xvc2VcIiBvbkNsaWNrPXsoKSA9PiB7dGhpcy5wcm9wcy5vblJlbW92ZSgpfX0+PC9pPlxyXG5cdCAgXHRcdFx0XHRcdDxzdHlsZSBqc3g+e2BcclxuXHQgIFx0XHRcdFx0XHRcdC5lZGl0b3Ige1xyXG5cdCAgXHRcdFx0XHRcdFx0XHRwb3NpdGlvbjpyZWxhdGl2ZTtcclxuXHQgIFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHQuZWRpdG9yIGkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cG9zaXRpb246YWJzb2x1dGU7XHJcblx0XHRcdFx0XHRcdFx0XHRyaWdodDowcHg7XHJcblx0XHRcdFx0XHRcdFx0XHR0b3A6MHB4O1xyXG5cdFx0XHRcdFx0XHRcdFx0cGFkZGluZzoyMHB4O1xyXG5cdFx0XHRcdFx0XHRcdFx0Zm9udC1zaXplOjE3cHg7XHJcblx0XHRcdFx0XHRcdFx0XHRjb2xvcjojZmZmO1xyXG5cdFx0XHRcdFx0XHRcdFx0b3BhY2l0eTowLjU7XHJcblx0XHRcdFx0XHRcdFx0XHR0cmFuc2l0aW9uOjAuMnMgYWxsIGVhc2U7XHJcblx0XHRcdFx0XHRcdFx0XHRjdXJzb3I6cG9pbnRlcjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0LmVkaXRvciBpOmhvdmVyIHtcclxuXHRcdFx0XHRcdFx0XHRcdG9wYWNpdHk6MS4wO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHQgIFx0XHRcdFx0XHRgfTwvc3R5bGU+XHJcblx0ICBcdFx0XHRcdDwvZGl2PlxyXG5cdCAgXHRcdFx0KVxyXG5cdCAgXHRcdH0gZWxzZSB7XHJcblx0XHQgIFx0XHRyZXR1cm4gKFxyXG5cdFx0XHQgICAgXHQ8ZGl2PlxyXG5cdFx0XHQgICAgICBcdDxpbWcgc3JjPXt0aGlzLnN0YXRlLnVybH0gd2lkdGg9XCIxMDAlXCIgLz5cclxuXHRcdFx0ICAgICAgPC9kaXY+XHJcblx0XHQgICBcdCk7XHJcblx0ICBcdFx0fVxyXG5cdCAgXHR9IGVsc2Uge1xyXG5cdCAgXHRcdHJldHVybiBudWxsXHJcblx0ICBcdH1cclxuICAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgQWN0aW9uQmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5jdXJyZW50VXNlciA9IHRoaXMucHJvcHMuY3VycmVudFVzZXI7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgXHRpc0VkaXRpbmc6IGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcbiAgXHR0aGlzLnNldFN0YXRlKHtcclxuICBcdFx0aXNFZGl0aW5nOiB0aGlzLnByb3BzLmVkaXRpbmcsXHJcbiAgXHRcdHBvc3Q6IHRoaXMucHJvcHMucG9zdCxcclxuICBcdFx0Li4udGhpcy5wcm9wcy5wYXJlbnRTdGF0ZVxyXG4gIFx0fSlcclxuICB9XHJcblxyXG4gICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG5cdCAgXHR0aGlzLnNldFN0YXRlKHtcclxuXHQgIFx0XHRpc0VkaXRpbmc6IG5leHRQcm9wcy5lZGl0aW5nLFxyXG5cdCAgXHRcdHBvc3Q6IG5leHRQcm9wcy5wb3N0LFxyXG5cdCAgXHRcdC4uLm5leHRQcm9wcy5wYXJlbnRTdGF0ZVxyXG5cdCAgXHR9KVxyXG4gICB9XHJcblxyXG5cclxuXHJcbiAgIGNyZWF0ZVBvcHVwKCkge1xyXG5cdCAgXHR0aGlzLnZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge1xyXG5cdCAgICAgIGlmKGUua2V5Q29kZSA9PSAxMykge1xyXG5cdCAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHQgICAgICAgICB0aGlzLnByb3BzLm9uVmlkZW8oZS50YXJnZXQudmFsdWUpXHJcblx0ICAgICAgfVxyXG5cdCAgIH0pXHJcbiAgIH1cclxuXHJcbiAgXHRyZW5kZXIoKSB7XHJcbiAgXHRcdHZhciBwb3N0ID0gdGhpcy5zdGF0ZS5wb3N0O1xyXG4gIFx0XHRpZiAocG9zdCkge1xyXG5cdFx0ICBcdGlmICh0aGlzLnN0YXRlLmlzRWRpdGluZykge1xyXG5cdFx0ICAgXHRyZXR1cm4gKFxyXG5cdFx0XHQgICAgICA8ZGl2PlxyXG5cdFx0ICAgICAgICBcdFx0PHNwYW4gb25DbGljaz17KCkgPT4ge3RoaXMucHJvcHMub25TYXZlKCl9fSBjbGFzc05hbWU9XCJ1aSBidXR0b24gc21hbGwgY2lyY3VsYXIgcHJpbWFyeVwiPtCh0L7RhdGA0LDQvdC40YLRjDwvc3Bhbj5cclxuXHRcdCAgICAgICAgXHRcdDxzcGFuIG9uQ2xpY2s9eygpID0+IHt0aGlzLnByb3BzLm9uQ2FuY2VsKCl9fSBjbGFzc05hbWU9XCJ1aSBidXR0b24gc21hbGwgY2lyY3VsYXIgZGVmYXVsdFwiPtCe0YLQvNC10L3QsDwvc3Bhbj5cclxuXHRcdCAgICAgIFx0ICAgeyghdGhpcy5zdGF0ZS5wb3N0LnBvc3RJbWFnZSBcclxuXHRcdCAgICAgIFx0ICAgXHQmJiAhdGhpcy5zdGF0ZS5wb3N0LnBvc3RWaWRlbykgXHJcblx0XHQgICAgICBcdCAgIFx0JiZcclxuXHRcdFx0ICAgICAgICAgICAgPHNwYW4+XHJcblx0XHRcdFx0ICAgICAgICAgICAgPHNwYW4gXHJcblx0XHRcdFx0XHQgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7dGhpcy5pbWFnZS5jbGljaygpfX0gXHJcblx0XHRcdFx0XHQgICAgICAgICAgICBjbGFzc05hbWU9XCJ1aSBidXR0b24gaWNvbiBjaXJjdWxhciBzbWFsbCBiYXNpY1wiPlxyXG5cdFx0XHRcdCAgICAgICAgICAgIFx0PGkgY2xhc3NOYW1lPVwiZmEgZmEtaW1hZ2VcIj48L2k+XHJcblx0XHRcdFx0ICAgICAgICAgICAgPC9zcGFuPlxyXG5cdFx0XHRcdCAgICAgICAgIFx0PGlucHV0IFxyXG5cdFx0XHQgIFx0XHRcdFx0XHRcdHJlZj17KGUpID0+IHt0aGlzLmltYWdlID0gZX19XHJcblx0XHRcdFx0ICBcdFx0XHRcdFx0dHlwZT1cImZpbGVcIiBcclxuXHRcdFx0XHQgIFx0XHRcdFx0XHRjbGFzc05hbWU9XCJ1aSBoaWRkZW5cIiBcclxuXHRcdFx0XHQgIFx0XHRcdFx0XHRvbkNoYW5nZT17KGUpID0+IHt0aGlzLnByb3BzLm9uVXBsb2FkKGUpfX0gXHJcblx0XHRcdCAgXHRcdFx0XHRcdC8+XHJcblx0XHQgIFx0XHRcdFx0XHQ8L3NwYW4+XHJcblx0XHRcdCAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAgeyghdGhpcy5zdGF0ZS5wb3N0LnBvc3RWaWRlbyBcclxuXHRcdFx0ICAgICAgICAgXHQmJiAhdGhpcy5zdGF0ZS5wb3N0LnBvc3RJbWFnZSkgXHJcblx0XHRcdCAgICAgICAgIFx0JiZcclxuXHRcdFx0ICAgICAgICAgICAgPHNwYW4+XHJcblx0XHRcdFx0ICAgICAgICAgICAgPHNwYW5cclxuXHRcdFx0XHQgICAgICAgICAgICBcdG9uQ2xpY2s9eyhlKSA9PiB7JCgnLnZpZGVvLmJ1dHRvbicpLnBvcHVwKHtwb3B1cCA6ICQoJy52aWRlby5wb3B1cCcpLCBvbjogJ2NsaWNrJ30pO3RoaXMuY3JlYXRlUG9wdXAoKX19IFxyXG5cdFx0XHRcdCAgICAgICAgICAgIFx0Y2xhc3NOYW1lPVwidWkgYnV0dG9uIHZpZGVvIGljb24gY2lyY3VsYXIgc21hbGwgYmFzaWNcIlxyXG5cdFx0XHRcdCAgICAgICAgICAgID48aSBjbGFzc05hbWU9XCJmYSBmYS12aWRlby1jYW1lcmFcIj48L2k+PC9zcGFuPlxyXG5cdFx0XHRcdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9wdXAgdmlkZW8gdWlcIj5cclxuXHRcdFx0XHQgICAgICAgICAgICAgICA8aW5wdXQgXHJcblx0XHRcdFx0ICAgICAgICAgICAgICAgIHJlZj17KGUpID0+IHt0aGlzLnZpZGVvID0gZX19IFxyXG5cdFx0XHRcdCAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiIFxyXG5cdFx0XHRcdCAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cItCh0YHRi9C70LrQsCDQvdCwINCy0LjQtNC10L4g0YEgWW91VHViZVwiIFxyXG5cdFx0XHRcdCAgICAgICAgICAgICAgIC8+XHJcblx0XHRcdFx0ICAgICAgICAgICAgPC9kaXY+XHJcblx0XHRcdCAgICAgICAgICAgIDwvc3Bhbj5cclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICA8c3R5bGUganN4PntgXHJcblx0XHRcdFx0XHRcdFx0LnBvcHVwIGlucHV0IHtcclxuXHRcdFx0XHRcdFx0XHRcdGJvcmRlcjowcHg7XHJcblx0XHRcdFx0XHRcdFx0XHRmb250LXNpemU6MTdweDtcclxuXHRcdFx0XHRcdFx0XHRcdHBhZGRpbmc6NXB4O1xyXG5cdFx0XHRcdFx0XHRcdFx0b3V0bGluZTpub25lO1xyXG5cdFx0XHRcdFx0XHRcdFx0d2lkdGg6MzUwcHg7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHQgICAgICAgICBgfTwvc3R5bGU+XHJcblx0XHRcdCAgICAgIDwvZGl2PlxyXG5cdFx0ICAgIFx0KTtcclxuXHRcdCAgIH0gZWxzZSB7XHJcblx0XHQgICBcdHJldHVybiAoXHJcblx0ICAgICAgICBcdFx0PHNwYW4gXHJcblx0ICAgICAgICBcdFx0b25DbGljaz17KCkgPT4ge3RoaXMucHJvcHMub25MaWtlKCl9fSBcclxuXHQgICAgICAgIFx0XHRjbGFzc05hbWU9eyh0aGlzLnN0YXRlLmlzTGlrZWQpID8gXHJcblx0ICAgICAgICBcdFx0XHRgdWkgYnV0dG9uIGNpcmN1bGFyIHNtYWxsIHByaW1hcnlgIDogXHJcblx0ICAgICAgICBcdFx0XHRgdWkgYnV0dG9uIGNpcmN1bGFyIHNtYWxsIGRlZmF1bHRgfVxyXG5cdCAgICAgICAgXHRcdD5cclxuXHRcdCAgICAgICAgXHRcdDxpIGNsYXNzTmFtZT17KHRoaXMuc3RhdGUuaXNMaWtlZCkgPyBcclxuXHRcdCAgICAgICAgXHRcdFx0YGZhIGZhLWhlYXJ0IGljb25gIDogXHJcblx0XHQgICAgICAgIFx0XHRcdGBmYSBmYS1oZWFydC1vIGljb25gfT5cclxuXHRcdCAgICAgICAgXHRcdDwvaT4ge3RoaXMuc3RhdGUubGlrZUNvdW50ZXJ9XHJcblx0XHQgICAgICAgIFx0XHQ8c3R5bGUganN4PntgXHJcblx0XHRcdFx0XHRcdFx0Lm5vdGUgLm1ldGEgLmJ1dHRvbi5kZWZhdWx0IHtcclxuXHRcdFx0XHRcdFx0XHRcdGJhY2tncm91bmQ6I2ZhZmFmYTtcclxuXHRcdFx0XHRcdFx0XHRcdHRyYW5zaXRpb246MC4ycyBhbGwgZWFzZTtcclxuXHRcdFx0XHQgICAgICAgIFx0IH1cclxuXHRcdFx0XHQgICAgICAgIFx0IC5ub3RlIC5tZXRhIC5idXR0b24uZGVmYXVsdDpob3ZlciB7XHJcblx0XHRcdFx0ICAgICAgICBcdCBcdGJhY2tncm91bmQ6I2VlZTtcclxuXHRcdFx0XHQgICAgICAgIFx0IH1cclxuXHRcdCAgICAgICAgXHRcdGB9PC9zdHlsZT5cclxuXHRcdCAgICAgICAgXHQ8L3NwYW4+XHJcblx0XHQgICBcdClcclxuXHRcdCAgIH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybiBudWxsXHJcblx0XHR9XHJcbiAgXHR9XHJcbn1cclxuXHJcblxyXG5cclxudmFyIEJsYW5rID0gKHByb3BzKSA9PiB7XHJcblx0cmV0dXJuIChcclxuXHRcdDxkaXY+XHJcbiAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXNlclwiPlxyXG5cdCAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW1hZ2VcIj5cclxuXHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJsYW5rIGF2YXRhclwiPjwvZGl2PlxyXG5cdCAgICAgICAgIDwvZGl2PlxyXG5cdCAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudFwiPlxyXG5cdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxhbmsgc3RyaW5nXCI+PC9kaXY+XHJcblx0ICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJibGFuayBzdHJpbmdcIj48L2Rpdj5cclxuXHQgICAgICAgICA8L2Rpdj5cclxuXHQgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50XCI+XHJcblx0ICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJibGFuayBoZWFkZXJcIj48L2Rpdj5cclxuXHQgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJsYW5rIGRlc2NyaXB0aW9uXCI+PC9kaXY+XHJcblx0ICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJibGFuayBkZXNjcmlwdGlvblwiPjwvZGl2PlxyXG4gICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgPHN0eWxlIGpzeD57YFxyXG5cdCAgICAgICAgIC51c2VyIC5jb250ZW50IHtcclxuXHQgICAgICAgICAgICBtYXJnaW4tbGVmdDoxNXB4O1xyXG5cdCAgICAgICAgIH1cclxuXHQgICAgICAgICAudXNlciB7XHJcblx0ICAgICAgICAgICAgZGlzcGxheTpmbGV4O1xyXG5cdCAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOnJvdztcclxuXHQgICAgICAgICB9XHJcbiAgICAgICAgIGB9PC9zdHlsZT5cclxuXHQgICA8L2Rpdj5cclxuXHQpXHJcbn1cclxuXHJcblxyXG5jb25uZWN0KChzdG9yZSkgPT4gc3RvcmUpKENvbnRlbnQpXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KChzdG9yZSkgPT4gc3RvcmUpKE5vdGUpIl19 */\n/*@ sourceURL=components\\feed\\note.js */'
				}));
			} else {
				return _react2.default.createElement('div', null, _react2.default.createElement('p', { className: 'primary' }, this.state.text));
			}
		}
	}]);

	return Content;
}(_react2.default.Component);

var Image = function (_React$Component5) {
	(0, _inherits3.default)(Image, _React$Component5);

	function Image(props) {
		(0, _classCallCheck3.default)(this, Image);

		var _this18 = (0, _possibleConstructorReturn3.default)(this, (Image.__proto__ || (0, _getPrototypeOf2.default)(Image)).call(this, props));

		_this18.dispatch = _this18.props.dispatch;
		_this18.state = {
			isEditing: false,
			url: null
		};
		return _this18;
	}

	(0, _createClass3.default)(Image, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			this.setState({
				isEditing: this.props.editing,
				url: this.props.url
			});
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			this.setState({
				isEditing: nextProps.editing,
				url: nextProps.url
			});
		}
	}, {
		key: 'updateLocally',
		value: function updateLocally(url) {
			var _this19 = this;

			this.dispatch((0, _editingPost.updatePostImage)(url)).then(function () {
				_this19.setState({
					url: url
				});
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _this20 = this;

			if (this.state.url) {
				if (this.state.isEditing) {
					return _react2.default.createElement('div', { className: 'editor', 'data-jsx': 483957625
					}, _react2.default.createElement('img', { src: this.state.url, width: '100%', 'data-jsx': 483957625
					}), _react2.default.createElement('i', { className: 'fa fa-close', onClick: function onClick() {
							_this20.props.onRemove();
						}, 'data-jsx': 483957625
					}), _react2.default.createElement(_style2.default, {
						styleId: 483957625,
						css: '.editor[data-jsx="483957625"] {position:relative;}.editor[data-jsx="483957625"] i[data-jsx="483957625"] {position:absolute;right:0px;top:0px;padding:20px;font-size:17px;color:#fff;opacity:0.5;-webkit-transition:0.2s all ease;-moz-transition:0.2s all ease;-ms-transition:0.2s all ease;transition:0.2s all ease;cursor:pointer;}.editor[data-jsx="483957625"] i[data-jsx="483957625"]:hover {opacity:1.0;}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHNcXGZlZWRcXG5vdGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd2hCb0IsQUFDRiwrQkFDVSxrQkFDbEIsQ0FDUSx1REFDUSxrQkFDUixVQUNGLFFBQ0ssYUFDRSxlQUNKLFdBQ0MsWUFDYSxxSEFDVixlQUNmLENBQ2dCLDZEQUNKLFlBQ1oiLCJmaWxlIjoiY29tcG9uZW50c1xcZmVlZFxcbm90ZS5qcyIsInNvdXJjZVJvb3QiOiJFOi93d3cvTGV2ZWx1cC5uYW1lIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFVzZXIgZnJvbSAnLi4vdXNlci5qcydcclxuaW1wb3J0IHsgdXBsb2FkSW1hZ2UgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2FwcC5qcydcclxuaW1wb3J0IHsgc2V0TGlrZUJ5SWQsIFxyXG5cdFx0XHRyZW1vdmVQb3N0QnlJZCB9IGZyb20gJy4uLy4uL2FjdGlvbnMvcG9zdC5qcydcclxuaW1wb3J0IHsgc3RhcnRQb3N0RWRpdGluZywgXHJcblx0XHRcdHVwZGF0ZVBvc3RDb250ZW50LFxyXG5cdFx0XHR1cGRhdGVQb3N0SW1hZ2UsIFxyXG5cdFx0XHR1cGRhdGVQb3N0TGluaywgXHJcblx0XHRcdHVwZGF0ZVBvc3RWaWRlbywgXHJcblx0XHRcdHVwZGF0ZVBvc3QgIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9lZGl0aW5nUG9zdC5qcydcclxuaW1wb3J0IGNvb2tpZXMgZnJvbSAnanMtY29va2llJ1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbmltcG9ydCBCbG9nIGZyb20gJy4uL2Jsb2cuanMnXHJcbmltcG9ydCBUaW1lQWdvIGZyb20gJ3RpbWVhZ28tcmVhY3QnO1xyXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnXHJcbmltcG9ydCBnZXRZb3VUdWJlSWQgZnJvbSAnLi4vLi4vdXRpbHMvZ2V0WW91VHViZS5qcycgXHJcblxyXG5jbGFzcyBOb3RlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuXHQgICBzdXBlcihwcm9wcyk7XHJcblx0ICAgdGhpcy50b2tlbiA9IGNvb2tpZXMuZ2V0KCd4LWFjY2Vzcy10b2tlbicpXHJcblx0ICAgdGhpcy5jdXJyZW50VXNlciA9IHRoaXMucHJvcHMudXNlci5wcm9maWxlO1xyXG5cdCAgIHRoaXMucG9zdCA9IHRoaXMucHJvcHMucG9zdDtcclxuXHQgICB0aGlzLmRpc3BhdGNoID0gdGhpcy5wcm9wcy5kaXNwYXRjaDtcclxuXHQgICB0aGlzLnN0YXRlID0ge1xyXG5cdCAgICBcdGlzTGlrZWQ6IGZhbHNlLFxyXG5cdCAgICBcdGxpa2VDb3VudGVyOiAwLFxyXG5cdCAgICBcdGlzRWRpdGluZzogZmFsc2UsXHJcblx0ICAgIFx0cG9zdDogbnVsbFxyXG5cdCAgIH1cclxuICAgfVxyXG5cclxuICBcdGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuXHQgIFx0aWYodGhpcy5jdXJyZW50VXNlcikge1xyXG5cdFx0ICBcdGlmKHRoaXMucG9zdC5wb3N0TGlrZXMuaW5kZXhPZih0aGlzLmN1cnJlbnRVc2VyLl9pZCkgIT0gLTEpIHtcclxuXHRcdCAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdCAgICAgIGlzTGlrZWQ6IHRydWUsXHJcblx0XHRcdCAgICAgIGxpa2VDb3VudGVyOiB0aGlzLnBvc3QucG9zdExpa2VzLmxlbmd0aFxyXG5cdFx0ICAgICB9KVxyXG5cdFx0ICAgfVxyXG5cdFx0fVxyXG5cdFx0aWYodGhpcy5wb3N0LnBvc3RDb250ZW50KSB7XHJcblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHQgXHRwb3N0OiB0aGlzLnBvc3RcclxuXHRcdFx0fSlcclxuXHRcdH1cclxuICAgfVxyXG5cclxuICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgIFx0JCgnLnVpLmRyb3Bkb3duJykuZHJvcGRvd24oe1xyXG5cdCAgXHRcdG9uOiAnaG92ZXInXHJcblx0ICBcdH0pXHJcbiAgIH1cclxuXHJcbiAgXHQvLyDQtNC+0LHQsNCy0LjRgtGMINGC0L7QutC10L1cclxuICAgaGFuZGxlUmVtb3ZlKGlkKSB7XHJcbiAgICAgIHZhciByZXN1bHQgPSBjb25maXJtKCfQktGLINC00LXQudGB0YLQstC40YLQtdC70YzQvdC+INGF0L7RgtC40YLQtSDRg9C00LDQu9C40YLRjCDQt9Cw0L/QuNGB0Yw/Jyk7XHJcbiAgICAgIGlmIChyZXN1bHQpIHtcclxuXHQgICAgICByZW1vdmVQb3N0QnlJZChpZCkudGhlbigocmVzKSA9PiB7XHJcblx0ICAgICAgXHRpZihyZXMuZGF0YS5zdWNjZXNzKSB7XHJcblx0ICAgICAgXHRcdCQoJy5wb3N0LScgKyBpZCkuaGlkZSg1MDApO1xyXG5cdCAgICAgIFx0fVxyXG5cdCAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICBcdGhhbmRsZUVkaXRpbmcocG9zdCkge1xyXG4gIFx0XHR0aGlzLmRpc3BhdGNoKHN0YXJ0UG9zdEVkaXRpbmcoe1xyXG4gIFx0XHRcdHBvc3RDb250ZW50OiBwb3N0LnBvc3RDb250ZW50LFxyXG4gIFx0XHRcdHBvc3RJbWFnZTogcG9zdC5wb3N0SW1hZ2UsXHJcbiAgXHRcdFx0cG9zdFZpZGVvOiBwb3N0LnBvc3RWaWRlbyxcclxuICBcdFx0XHRwb3N0TGluazogcG9zdC5wb3N0TGlua1xyXG4gIFx0XHR9KSkudGhlbigoKSA9PiB7XHJcbiAgXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0ICBcdFx0XHRpc0VkaXRpbmc6IHRydWVcclxuXHQgIFx0XHR9KVxyXG4gIFx0XHR9KVxyXG4gIFx0fVxyXG5cclxuICBcdGhhbmRsZUxpa2UocG9zdElELCB1c2VySUQpIHtcclxuICAgIFx0c2V0TGlrZUJ5SWQodGhpcy50b2tlbiwgcG9zdElEKS50aGVuKChyZXMpID0+IHtcclxuICAgICAgXHRpZihyZXMuZGF0YS5zdWNjZXNzKSB7XHJcblx0ICAgICAgICBcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0ICAgICAgIFx0Li4udGhpcy5zdGF0ZS5wb3N0LFxyXG5cdFx0ICAgICAgIFx0aXNMaWtlZDogIXRoaXMuc3RhdGUuaXNMaWtlZCxcclxuXHRcdCAgICAgICBcdGxpa2VDb3VudGVyOiByZXMuZGF0YS5jb3VudGVyXHJcblx0ICAgICAgICB9KVxyXG4gICAgICBcdH1cclxuICAgIFx0fSlcclxuICBcdH1cclxuXHJcbiAgXHR1cGxvYWRJbWFnZShlKSB7XHJcblx0ICAgdmFyIGltYWdlID0gZS50YXJnZXQuZmlsZXNbMF07XHJcblx0ICAgdXBsb2FkSW1hZ2UodGhpcy50b2tlbiwgaW1hZ2UpLnRoZW4oKHJlcykgPT4ge1xyXG5cdCAgIFx0dGhpcy5kaXNwYXRjaCh1cGRhdGVQb3N0SW1hZ2UocmVzLnBhdGgpKS50aGVuKCgpID0+IHtcclxuXHQgICBcdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0ICAgXHRcdFx0cG9zdDoge1xyXG5cdFx0XHQgICAgICAgICAuLi50aGlzLnN0YXRlLnBvc3QsXHJcblx0XHRcdCAgICAgICAgIHBvc3RJbWFnZTogcmVzLnBhdGgsXHJcblx0XHRcdCAgICAgIH1cclxuXHQgICBcdFx0fSlcclxuXHQgICBcdH0pXHJcblx0ICAgfSlcclxuICAgfVxyXG5cclxuICBcdGhhbmRsZVNhdmUoaWQsIGRhdGEsIHRva2VuKSB7XHJcbiAgXHRcdHRoaXMuZGlzcGF0Y2godXBkYXRlUG9zdChpZCwgZGF0YSwgdG9rZW4pKS50aGVuKCgpID0+IHtcclxuICBcdFx0XHR0aGlzLnNldFN0YXRlKHtcclxuICBcdFx0XHRcdGlzRWRpdGluZzogZmFsc2UsXHJcbiAgXHRcdFx0XHRwb3N0OiB7XHJcbiAgXHRcdFx0XHRcdC4uLnRoaXMuc3RhdGUucG9zdCxcclxuICBcdFx0XHRcdFx0Li4uZGF0YVxyXG4gIFx0XHRcdFx0fVxyXG4gIFx0XHRcdH0pXHJcbiAgXHRcdH0pXHJcbiAgXHR9XHJcblxyXG4gIFx0cmVtb3ZlSW1hZ2UoKSB7XHJcbiAgXHRcdHRoaXMuZGlzcGF0Y2godXBkYXRlUG9zdEltYWdlKG51bGwpKS50aGVuKCgpID0+e1xyXG4gIFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xyXG4gIFx0XHRcdFx0cG9zdDoge1xyXG4gIFx0XHRcdFx0XHQuLi50aGlzLnN0YXRlLnBvc3QsXHJcbiAgXHRcdFx0XHRcdHBvc3RJbWFnZTogbnVsbFxyXG4gIFx0XHRcdFx0fVxyXG4gIFx0XHRcdH0pXHJcbiAgXHRcdH0pXHJcbiAgXHR9XHJcblxyXG4gIFx0cmVtb3ZlVmlkZW8oKSB7XHJcbiAgXHRcdHRoaXMuZGlzcGF0Y2godXBkYXRlUG9zdFZpZGVvKG51bGwpKS50aGVuKCgpID0+e1xyXG4gIFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xyXG4gIFx0XHRcdFx0cG9zdDoge1xyXG4gIFx0XHRcdFx0XHQuLi50aGlzLnN0YXRlLnBvc3QsXHJcbiAgXHRcdFx0XHRcdHBvc3RWaWRlbzogbnVsbFxyXG4gIFx0XHRcdFx0fVxyXG4gIFx0XHRcdH0pXHJcbiAgXHRcdH0pXHJcbiAgXHR9XHJcblxyXG4gIFx0b25WaWRlbyh1cmwpIHtcclxuXHQgICB2YXIgaWQgPSBnZXRZb3VUdWJlSWQodXJsKVxyXG5cdCAgXHR0aGlzLnByb3BzLmRpc3BhdGNoKHVwZGF0ZVBvc3RWaWRlbyhpZCkpLnRoZW4oKCkgPT4ge1xyXG5cdCAgXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdCAgXHRcdFx0cG9zdDoge1xyXG4gIFx0XHRcdFx0XHQuLi50aGlzLnN0YXRlLnBvc3QsXHJcbiAgXHRcdFx0XHRcdHBvc3RWaWRlbzogaWRcclxuICBcdFx0XHRcdH1cclxuXHQgIFx0XHR9KVxyXG5cdCAgXHR9KVxyXG4gICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHZhciBwb3N0ID0gdGhpcy5zdGF0ZS5wb3N0O1xyXG5cdFx0aWYgKHBvc3QpIHtcclxuXHRcdFx0dmFyIGxpa2VzID0gdGhpcy5zdGF0ZS5saWtlQ291bnRlcjtcclxuXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHQ8YXJ0aWNsZSBjbGFzc05hbWU9e2BhcnRpY2xlIG5vdGUgcHJldmlldyBwb3N0LSR7cG9zdC5faWR9YH0+XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cInVzZXJcIj5cclxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJsZWZ0XCI+XHJcblx0XHRcdFx0XHRcdFx0eyhwb3N0LnBvc3RBdXRob3IuYXV0aG9yVHlwZSA9PSAndXNlcicpID9cclxuXHRcdFx0XHRcdCAgICAgICAgIDxVc2VyIGlkPXtwb3N0LnBvc3RBdXRob3IuYXV0aG9ySUR9IC8+IDogPEJsb2cgaWQ9e3Bvc3QucG9zdEF1dGhvci5hdXRob3JJRH0gLz5cclxuXHRcdFx0XHRcdCAgICAgIH1cclxuXHRcdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyaWdodFwiPlxyXG5cdFx0XHQgICAgICAgIFx0PGRpdiBjbGFzc05hbWU9XCJ1aSBkcm9wZG93blwiPlxyXG5cdFx0XHRcdFx0XHRcdDxpIGNsYXNzTmFtZT1cImZhIGZhLWVsbGlwc2lzLWhcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcblx0XHRcdFx0XHRcdFx0ICA8ZGl2IGNsYXNzTmFtZT1cIm1lbnVcIj5cclxuXHRcdFx0XHRcdFx0XHQgIFx0IDxkaXYgY2xhc3NOYW1lPVwiaXRlbVwiIG9uQ2xpY2s9eygpID0+IHt0aGlzLmhhbmRsZUVkaXRpbmcocG9zdCl9fT7QoNC10LTQsNC60YLQuNGA0L7QstCw0YLRjDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdCAgXHQgPGRpdiBjbGFzc05hbWU9XCJpdGVtXCI+0J/QvtC20LDQu9C+0LLQsNGC0YzRgdGPPC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0ICAgIDxkaXYgY2xhc3NOYW1lPVwiaXRlbVwiIG9uQ2xpY2s9eygpID0+IHt0aGlzLmhhbmRsZVJlbW92ZShwb3N0Ll9pZCl9fT7Qo9C00LDQu9C40YLRjDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0ICAgICAgICAgPC9kaXY+XHJcblx0XHRcdFx0ICAgPC9kaXY+XHJcblx0XHRcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW1hZ2VcIj5cclxuXHRcdFx0ICAgICAgICBcdDxJbWFnZSBcclxuXHRcdFx0ICAgICAgICBcdFx0dXJsPXtwb3N0LnBvc3RJbWFnZX1cclxuXHRcdFx0ICAgICAgICBcdFx0ZGlzcGF0Y2g9e3RoaXMuZGlzcGF0Y2h9XHJcblx0XHRcdCAgICAgICAgXHRcdGVkaXRpbmc9e3RoaXMuc3RhdGUuaXNFZGl0aW5nfVxyXG5cdFx0XHQgICAgICAgIFx0XHRvblJlbW92ZT17KCkgPT4ge3RoaXMucmVtb3ZlSW1hZ2UoKX19XHJcblx0XHRcdCAgICAgICAgXHQvPlxyXG5cdFx0XHQgICAgICAgIFx0PFZpZGVvIFxyXG5cdFx0XHQgICAgICAgIFx0XHR2aWRlbz17cG9zdC5wb3N0VmlkZW99XHJcblx0XHRcdCAgICAgICAgXHRcdGRpc3BhdGNoPXt0aGlzLmRpc3BhdGNofVxyXG5cdFx0XHQgICAgICAgIFx0XHRlZGl0aW5nPXt0aGlzLnN0YXRlLmlzRWRpdGluZ31cclxuXHRcdFx0ICAgICAgICBcdFx0b25SZW1vdmU9eygpID0+IHt0aGlzLnJlbW92ZVZpZGVvKCl9fVxyXG5cdFx0XHQgICAgICAgIFx0Lz5cclxuXHRcdFx0ICAgICAgPC9kaXY+XHJcblx0XHRcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudFwiPlxyXG5cdFx0XHQgICAgICAgIFx0IDxDb250ZW50IFxyXG5cdFx0XHQgICAgICAgIFx0IFx0dGV4dD17cG9zdC5wb3N0Q29udGVudH0gXHJcblx0XHRcdCAgICAgICAgXHQgXHRlZGl0aW5nPXt0aGlzLnN0YXRlLmlzRWRpdGluZ31cclxuXHRcdFx0ICAgICAgICBcdCBcdGRpc3BhdGNoPXt0aGlzLmRpc3BhdGNofVxyXG5cdFx0XHQgICAgICAgIFx0IC8+XHJcblx0XHRcdCAgICAgIDwvZGl2PlxyXG5cdFx0XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpbmtcIj5cclxuXHRcdFx0ICAgICAgXHQ8VXJsIFxyXG5cdFx0XHQgICAgICBcdFx0bGluaz17cG9zdC5wb3N0TGlua31cclxuXHRcdFx0ICAgICAgXHRcdGRpc3BhdGNoPXt0aGlzLmRpc3BhdGNofVxyXG5cdFx0XHQgICAgICBcdFx0ZWRpdGluZz17dGhpcy5zdGF0ZS5pc0VkaXRpbmd9XHJcblx0XHRcdCAgICAgIFx0Lz5cclxuXHRcdFx0ICAgICAgPC9kaXY+XHJcblx0XHRcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWV0YVwiPlxyXG5cdFx0XHQgICAgICAgIFx0PGRpdiBjbGFzc05hbWU9XCJsZWZ0XCI+XHJcblx0XHRcdFx0ICAgICAgICBcdDxBY3Rpb25CYXIgXHJcblx0XHRcdFx0ICAgICAgICBcdFx0ZGlzcGF0Y2g9e3RoaXMuZGlzcGF0Y2h9XHJcblx0XHRcdFx0ICAgICAgICBcdFx0cGFyZW50U3RhdGU9e3RoaXMuc3RhdGV9XHJcblx0XHRcdFx0ICAgICAgICBcdFx0cG9zdD17cG9zdH1cclxuXHRcdFx0XHQgICAgICAgIFx0XHRlZGl0aW5nPXt0aGlzLnN0YXRlLmlzRWRpdGluZ31cclxuXHRcdFx0XHQgICAgICAgIFx0XHRvbkNhbmNlbD17KCkgPT4ge3RoaXMuc2V0U3RhdGUoe2lzRWRpdGluZzogZmFsc2V9KX19XHJcblx0XHRcdFx0ICAgICAgICBcdFx0b25MaWtlPXsoKSA9PiB7dGhpcy5oYW5kbGVMaWtlKHBvc3QuX2lkLCB0aGlzLmN1cnJlbnRVc2VyLl9pZCl9fVxyXG5cdFx0XHRcdCAgICAgICAgXHRcdG9uU2F2ZT17KCkgPT4ge3RoaXMuaGFuZGxlU2F2ZShwb3N0Ll9pZCwgdGhpcy5wcm9wcy5lZGl0aW5nUG9zdCwgdGhpcy50b2tlbil9fVxyXG5cdFx0XHRcdCAgICAgICAgXHRcdG9uVXBsb2FkPXsoZSkgPT4ge3RoaXMudXBsb2FkSW1hZ2UoZSl9fVxyXG5cdFx0XHRcdCAgICAgICAgXHRcdG9uVmlkZW89eyh1cmwpID0+IHt0aGlzLm9uVmlkZW8odXJsKX19XHJcblx0XHRcdFx0ICAgICAgICBcdC8+XHJcblx0XHRcdFx0ICAgICAgPC9kaXY+XHJcblx0XHRcdCAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmlnaHRcIj5cclxuXHRcdFx0ICAgICAgICBcdFx0PHNwYW4gY2xhc3NOYW1lPVwidGltZVwiPlxyXG5cdFx0XHQgICAgICAgIFx0XHRcdDxUaW1lQWdvIGRhdGV0aW1lPXtwb3N0LnVwZGF0ZWR9IGxvY2FsZT0ncnUnIC8+XHJcblx0XHRcdCAgICAgICAgXHRcdDwvc3Bhbj5cclxuXHRcdCAgICAgICAgXHRcdDwvZGl2PlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgPHN0eWxlIGpzeD57YFxyXG5cdFx0XHQgICAgICAgIFx0IC5ub3RlIHtcclxuXHRcdFx0ICAgICAgICBcdCBcdGJveC1zaGFkb3c6IDBweCAzcHggMThweCAwcHggcmdiYSgzNCwgMzYsIDM4LCAwLjEpO1xyXG5cdFx0XHQgICAgICAgIFx0IFx0cGFkZGluZzoxNXB4IDE5cHg7XHJcblx0XHRcdCAgICAgICAgXHQgXHRib3JkZXItcmFkaXVzOjRweDtcclxuXHRcdFx0ICAgICAgICBcdCBcdGJhY2tncm91bmQ6I2ZmZjtcclxuXHRcdFx0ICAgICAgICBcdCB9XHJcblx0XHRcdCAgICAgICAgICAubm90ZSAudXNlcixcclxuXHRcdFx0ICAgICAgICAgIC5ub3RlIC5tZXRhIHtcclxuXHRcdFx0ICAgICAgICAgIFx0ZGlzcGxheTpmbGV4O1xyXG5cdFx0XHQgICAgICAgICAgXHRhbGlnbi1pdGVtczpjZW50ZXI7XHJcblx0XHRcdCAgICAgICAgICBcdGp1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO1xyXG5cdFx0XHQgICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICAgLm5vdGUgLnVzZXIgLmRyb3Bkb3duIGkge1xyXG5cdFx0XHQgICAgICAgICAgXHRjb2xvcjojYzBjMGMwO1xyXG5cdFx0XHQgICAgICAgICAgXHRmb250LXNpemU6MTZweDtcclxuXHRcdFx0ICAgICAgICAgIFx0dHJhbnNpdGlvbjowLjJzIGFsbCBlYXNlO1xyXG5cdFx0XHQgICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICAgLm5vdGUgLnVzZXIgLmRyb3Bkb3duIGk6aG92ZXIge1xyXG5cdFx0XHQgICAgICAgICAgXHRjb2xvcjojMDAwO1xyXG5cdFx0XHQgICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICAgLm5vdGUgLnVzZXIgLmRyb3Bkb3duIC5tZW51IHtcclxuXHRcdFx0ICAgICAgICAgIFx0bGVmdDphdXRvIWltcG9ydGFudDtcclxuXHRcdFx0ICAgICAgICAgIFx0cmlnaHQ6LTE1cHghaW1wb3J0YW50O1xyXG5cdFx0XHQgICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICAgLm5vdGUgLm1ldGEgLnRpbWUge1xyXG5cdFx0XHRcdFx0XHRcdGNvbG9yOiNjMGMwYzA7XHJcblx0XHRcdFx0XHRcdFx0Zm9udC1zaXplOjEzcHg7XHJcblx0XHRcdCAgICAgICAgICB9XHJcblx0XHRcdCAgICAgICAgICAubm90ZSBwLnByaW1hcnkge1xyXG5cdFx0XHQgICAgICAgICAgXHRmb250LXNpemU6MTdweDtcclxuXHRcdFx0ICAgICAgICAgIFx0Y29sb3I6IzMzMztcclxuXHRcdFx0ICAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgYH08L3N0eWxlPlxyXG5cdFx0ICAgXHQ8L2FydGljbGU+XHJcblx0XHRcdClcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybiA8QmxhbmsgLz5cclxuXHRcdH1cclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIFZpZGVvIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuXHQgICBzdXBlcihwcm9wcyk7XHJcblx0ICAgdGhpcy5zdGF0ZSA9IHtcclxuXHQgICBcdGlzRWRpdGluZzogZmFsc2UsXHJcblx0ICAgXHRsaW5rOiBudWxsXHJcblx0ICAgfVxyXG4gICB9XHJcblxyXG4gICBjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcbiAgIFx0aWYodGhpcy5wcm9wcy52aWRlbykge1xyXG5cdCAgIFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0ICAgXHRcdGxpbms6IHRoaXMucHJvcHMudmlkZW8sXHJcblx0ICAgXHRcdGlzRWRpdGluZzogdGhpcy5wcm9wcy5lZGl0aW5nXHJcblx0ICAgXHR9KVxyXG5cdCAgIH1cclxuICAgfVxyXG5cclxuICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcclxuICAgXHR0aGlzLnNldFN0YXRlKHtcclxuICAgXHRcdGxpbms6IG5leHRQcm9wcy52aWRlbyxcclxuICAgXHRcdGlzRWRpdGluZzogbmV4dFByb3BzLmVkaXRpbmdcclxuICAgXHR9KVxyXG4gICB9XHJcblxyXG4gICByZW5kZXIoKSB7XHJcbiAgIFx0aWYodGhpcy5zdGF0ZS5saW5rKSB7XHJcbiAgIFx0XHRpZih0aGlzLnN0YXRlLmlzRWRpdGluZykge1xyXG4gICBcdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZGVvXCI+XHJcblx0XHRcdCAgICAgIFx0PGlmcmFtZSBcclxuXHRcdFx0XHQgICAgICBcdHdpZHRoPVwiMTAwJVwiIFxyXG5cdFx0XHRcdCAgICAgIFx0aGVpZ2h0PVwiMzE1XCIgXHJcblx0XHRcdFx0ICAgICAgXHRzcmM9e2BodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8ke3RoaXMuc3RhdGUubGlua31gfSBcclxuXHRcdFx0XHQgICAgICBcdGZyYW1lQm9yZGVyPVwiMFwiIFxyXG5cdFx0XHRcdCAgICAgIFx0YWxsb3dGdWxsU2NyZWVuPXt0cnVlfT5cclxuXHRcdFx0XHQgICAgICA8L2lmcmFtZT5cclxuXHRcdFx0XHQgICAgICA8aSBvbkNsaWNrPXsoKSA9PiB7dGhpcy5wcm9wcy5vblJlbW92ZSgpfX0gXHJcblx0XHRcdFx0ICAgICAgXHRjbGFzc05hbWU9XCJmYSBmYS1jbG9zZVwiPlxyXG5cdFx0XHRcdCAgICAgIDwvaT5cclxuXHRcdFx0XHQgICAgICA8c3R5bGUganN4PntgXHJcblx0XHRcdFx0XHRcdFx0LnZpZGVvIHtcclxuXHRcdFx0XHRcdFx0XHRcdHBvc2l0aW9uOnJlbGF0aXZlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHQudmlkZW8gaSB7XHJcblx0XHRcdFx0XHRcdFx0XHRwb3NpdGlvbjphYnNvbHV0ZTtcclxuXHRcdFx0XHRcdFx0XHRcdHJpZ2h0OjBweDtcclxuXHRcdFx0XHRcdFx0XHRcdHRvcDowcHg7XHJcblx0XHRcdFx0XHRcdFx0XHRwYWRkaW5nOjIwcHg7XHJcblx0XHRcdFx0XHRcdFx0XHRvcGFjaXR5OjAuNTtcclxuXHRcdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZToxN3B4O1xyXG5cdFx0XHRcdFx0XHRcdFx0dHJhbnNpdGlvbjowLjJzIGFsbCBlYXNlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHQudmlkZW8gaTpob3ZlciB7XHJcblx0XHRcdFx0XHRcdFx0XHRvcGFjaXR5OjE7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdCAgICAgIGB9PC9zdHlsZT5cclxuXHRcdFx0ICAgICAgPC9kaXY+XHJcblx0XHRcdCAgIClcclxuICAgXHRcdH0gZWxzZSB7XHJcbiAgIFx0XHRcdHJldHVybiAoXHJcblx0XHRcdCAgICAgIDxpZnJhbWUgXHJcblx0XHRcdCAgICAgIFx0d2lkdGg9XCIxMDAlXCIgXHJcblx0XHRcdCAgICAgIFx0aGVpZ2h0PVwiMzE1XCIgXHJcblx0XHRcdCAgICAgIFx0c3JjPXtgaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvJHt0aGlzLnN0YXRlLmxpbmt9YH0gXHJcblx0XHRcdCAgICAgIFx0ZnJhbWVCb3JkZXI9XCIwXCIgXHJcblx0XHRcdCAgICAgIFx0YWxsb3dGdWxsU2NyZWVuPXt0cnVlfT5cclxuXHRcdFx0ICAgICAgPC9pZnJhbWU+XHJcblx0XHRcdCAgIClcclxuICAgXHRcdH1cclxuICAgXHR9IGVsc2Uge1xyXG4gICBcdFx0cmV0dXJuIG51bGxcclxuICAgXHR9XHJcbiAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIFVybCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcblx0ICAgc3VwZXIocHJvcHMpO1xyXG5cdCAgIHRoaXMuc3RhdGUgPSB7XHJcblx0ICAgXHRpc0VkaXRpbmc6IGZhbHNlLFxyXG5cdCAgIFx0bGluazogbnVsbFxyXG5cdCAgIH1cclxuICAgfVxyXG5cclxuICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG4gICBcdGlmKHRoaXMucHJvcHMubGluaykge1xyXG5cdCAgIFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0ICAgXHRcdGxpbms6IHRoaXMucHJvcHMubGluayxcclxuXHQgICBcdFx0aXNFZGl0aW5nOiB0aGlzLnByb3BzLmVkaXRpbmdcclxuXHQgICBcdH0pXHJcblx0ICAgfVxyXG4gICB9XHJcblxyXG4gICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICBcdHRoaXMuc2V0U3RhdGUoe1xyXG4gICBcdFx0bGluazogbmV4dFByb3BzLmxpbmssXHJcbiAgIFx0XHRpc0VkaXRpbmc6IG5leHRQcm9wcy5lZGl0aW5nXHJcbiAgIFx0fSlcclxuICAgfVxyXG5cclxuICAgc2F2ZUxvY2FsbHkoZSkge1xyXG4gICBcdHZhciB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICBcdHRoaXMucHJvcHMuZGlzcGF0Y2godXBkYXRlUG9zdExpbmsodmFsdWUpKS50aGVuKCgpID0+IHtcclxuICAgXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG4gICBcdFx0XHR1cmw6IHZhbHVlXHJcbiAgIFx0XHR9KVxyXG4gICBcdH0pXHJcbiAgIH1cclxuXHJcbiAgIHJlbmRlcigpIHtcclxuICAgXHRpZih0aGlzLnN0YXRlLmxpbmspIHtcclxuXHRcdCAgXHRpZih0aGlzLnN0YXRlLmlzRWRpdGluZykge1xyXG5cdFx0ICBcdFx0cmV0dXJuIChcclxuXHRcdFx0ICBcdFx0PGRpdiBjbGFzc05hbWU9XCJsaW5rXCI+XHJcblx0XHRcdCAgICAgICAgXHQ8aSBjbGFzc05hbWU9XCJmYSBmYS1saW5rXCI+PC9pPlxyXG5cdFx0XHQgICAgICAgIFx0PGlucHV0IFxyXG5cdFx0XHQgICAgICAgIFx0XHRvbkNoYW5nZT17KGUpID0+IHt0aGlzLnNhdmVMb2NhbGx5KGUpfX0gXHJcblx0XHRcdCAgICAgICAgXHRcdHR5cGU9XCJ0ZXh0XCIgXHJcblx0XHRcdCAgICAgICAgXHRcdGRlZmF1bHRWYWx1ZT17dGhpcy5zdGF0ZS5saW5rfSBcclxuXHRcdFx0ICAgICAgICBcdC8+XHJcblx0XHRcdCAgICAgICAgXHQ8c3R5bGUganN4PntgXHJcblx0XHRcdFx0XHRcdFx0Lmxpbmsge1xyXG5cdFx0XHRcdCAgICAgICAgICBcdG1hcmdpbi1ib3R0b206MTVweDtcclxuXHRcdFx0XHQgICAgICAgICAgfVxyXG5cdFx0XHRcdCAgICAgICAgIC5saW5rIGkge1xyXG5cdFx0XHRcdCAgICAgICAgICBcdG1hcmdpbi1yaWdodDoxNXB4O1xyXG5cdFx0XHRcdCAgICAgICAgICBcdG9wYWNpdHk6LjQ7XHJcblx0XHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHRcdCAgICAgICAgIC5saW5rIGlucHV0IHtcclxuXHRcdFx0XHQgICAgICAgICBcdGJvcmRlcjowcHg7XHJcblx0XHRcdFx0ICAgICAgICAgXHRmb250LXNpemU6MTVweDtcclxuXHRcdFx0XHQgICAgICAgICBcdG91dGxpbmU6bm9uZTtcclxuXHRcdFx0XHQgICAgICAgICBcdHBhZGRpbmc6NXB4O1xyXG5cdFx0XHRcdCAgICAgICAgIFx0d2lkdGg6MzAwcHg7XHJcblx0XHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgIFx0YH08L3N0eWxlPlxyXG5cdFx0XHQgICAgICA8L2Rpdj4gXHJcblx0XHRcdCAgIClcclxuXHRcdCAgXHR9IGVsc2Uge1xyXG5cdFx0ICBcdFx0cmV0dXJuIChcclxuXHRcdCAgXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJsaW5rXCI+XHJcblx0XHRcdCAgICAgICAgXHQ8aSBjbGFzc05hbWU9XCJmYSBmYS1saW5rXCI+PC9pPlxyXG5cdFx0XHQgICAgICAgIFx0PGEgaHJlZj17dGhpcy5zdGF0ZS5saW5rfSB0YXJnZXQ9XCJfYmxhbmtcIj57dGhpcy5zdGF0ZS5saW5rfTwvYT5cclxuXHRcdFx0ICAgICAgICBcdDxzdHlsZSBqc3g+e2BcclxuXHRcdFx0XHRcdFx0XHQubGluayB7XHJcblx0XHRcdFx0ICAgICAgICAgIFx0bWFyZ2luLWJvdHRvbToxNXB4O1xyXG5cdFx0XHRcdCAgICAgICAgICB9XHJcblx0XHRcdFx0ICAgICAgICAgLmxpbmsgaSB7XHJcblx0XHRcdFx0ICAgICAgICAgIFx0bWFyZ2luLXJpZ2h0OjE1cHg7XHJcblx0XHRcdFx0ICAgICAgICAgIFx0b3BhY2l0eTouNDtcclxuXHRcdFx0XHQgICAgICAgICB9XHJcblx0XHRcdCAgICAgICAgXHRgfTwvc3R5bGU+XHJcblx0XHRcdCAgICAgIDwvZGl2PiBcclxuXHRcdCAgXHRcdClcclxuXHRcdCAgXHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gbnVsbFxyXG5cdFx0fVxyXG4gICB9XHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgQ29udGVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcblx0ICAgc3VwZXIocHJvcHMpO1xyXG5cdCAgIHRoaXMuZGlzcGF0Y2ggPSB0aGlzLnByb3BzLmRpc3BhdGNoO1xyXG5cdCAgIHRoaXMuc3RhdGUgPSB7XHJcblx0ICAgIFx0aXNFZGl0aW5nOiBmYWxzZSxcclxuXHQgICAgXHR0ZXh0OiAnJ1xyXG5cdCAgIH1cclxuICAgfVxyXG5cclxuICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG5cdCAgXHR0aGlzLnNldFN0YXRlKHtcclxuXHQgIFx0XHRpc0VkaXRpbmc6IHRoaXMucHJvcHMuZWRpdGluZyxcclxuXHQgIFx0XHR0ZXh0OiB0aGlzLnByb3BzLnRleHRcclxuXHQgIFx0fSlcclxuXHQgICB9XHJcblxyXG4gICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG5cdCAgXHR0aGlzLnNldFN0YXRlKHtcclxuXHQgIFx0XHRpc0VkaXRpbmc6IG5leHRQcm9wcy5lZGl0aW5nLFxyXG5cdCAgXHRcdHRleHQ6IG5leHRQcm9wcy50ZXh0XHJcblx0ICBcdH0pXHJcbiAgIH1cclxuXHJcbiAgIHVwZGF0ZUxvY2FsbHkoZSkge1xyXG5cdCAgXHR2YXIgdmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcclxuXHQgIFx0dGhpcy5kaXNwYXRjaCh1cGRhdGVQb3N0Q29udGVudCh2YWx1ZSkpLnRoZW4oKCkgPT4ge1xyXG5cdCAgXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdCAgXHRcdFx0dGV4dDp2YWx1ZVxyXG5cdCAgXHRcdH0pXHJcblx0ICBcdH0pXHJcbiAgIH1cclxuXHJcbiAgXHRyZW5kZXIoKSB7XHJcbiAgXHRcdGlmKHRoaXMuc3RhdGUuaXNFZGl0aW5nKSB7XHJcbiAgXHRcdFx0cmV0dXJuIChcclxuICBcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZWRpdG9yXCI+XHJcbiAgXHRcdFx0XHRcdDx0ZXh0YXJlYSBcclxuXHQgIFx0XHRcdFx0XHRvbkNoYW5nZT17KGUpID0+IHt0aGlzLnVwZGF0ZUxvY2FsbHkoZSl9fSBcclxuXHQgIFx0XHRcdFx0XHRjb2xzPVwiNFwiIFxyXG5cdCAgXHRcdFx0XHRcdGRlZmF1bHRWYWx1ZT17dGhpcy5zdGF0ZS50ZXh0fSBcclxuXHQgIFx0XHRcdFx0XHRwbGFjZWhvbGRlcj1cItCS0LDRiCDRgtC10LrRgdGCLi5cIj5cclxuICBcdFx0XHRcdFx0PC90ZXh0YXJlYT5cclxuICBcdFx0XHRcdFx0PHN0eWxlIGpzeD57YFxyXG5cdFx0XHRcdFx0XHQuZWRpdG9yIHRleHRhcmVhIHtcclxuXHRcdFx0XHRcdFx0XHR3aWR0aDoxMDAlO1xyXG5cdFx0XHRcdFx0XHRcdGJvcmRlcjoxcHggc29saWQgI2VlZTtcclxuXHRcdFx0XHRcdFx0XHRwYWRkaW5nOjE0cHg7XHJcblx0XHRcdFx0XHRcdFx0Zm9udC1zaXplOjE2cHg7XHJcblx0XHRcdFx0XHRcdFx0b3V0bGluZTpub25lO1xyXG5cdFx0XHRcdFx0XHRcdGJvcmRlci1yYWRpdXM6NHB4O1xyXG5cdFx0XHRcdFx0XHR9XHJcbiAgXHRcdFx0XHRcdGB9PC9zdHlsZT5cclxuICBcdFx0XHRcdDwvZGl2PlxyXG4gIFx0XHRcdClcclxuICBcdFx0fSBlbHNlIHtcclxuXHQgIFx0XHRyZXR1cm4gKFxyXG5cdFx0ICAgIFx0PGRpdj5cclxuXHRcdFx0ICAgICAgPHAgY2xhc3NOYW1lPVwicHJpbWFyeVwiPlxyXG5cdFx0XHQgICAgICBcdHt0aGlzLnN0YXRlLnRleHR9XHJcblx0XHRcdCAgICAgIDwvcD5cclxuXHRcdCAgICAgIDwvZGl2PlxyXG5cdCAgIFx0KTtcclxuICBcdFx0fVxyXG4gICB9XHJcbn1cclxuXHJcbmNsYXNzIEltYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuXHQgICBzdXBlcihwcm9wcyk7XHJcblx0ICAgdGhpcy5kaXNwYXRjaCA9IHRoaXMucHJvcHMuZGlzcGF0Y2g7XHJcblx0ICAgdGhpcy5zdGF0ZSA9IHtcclxuXHQgICAgXHRpc0VkaXRpbmc6IGZhbHNlLFxyXG5cdCAgICBcdHVybDogbnVsbFxyXG5cdCAgIH1cclxuICAgfVxyXG5cclxuICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG5cdCAgXHR0aGlzLnNldFN0YXRlKHtcclxuXHQgIFx0XHRpc0VkaXRpbmc6IHRoaXMucHJvcHMuZWRpdGluZyxcclxuXHQgIFx0XHR1cmw6IHRoaXMucHJvcHMudXJsXHJcblx0ICBcdH0pXHJcbiAgIH1cclxuXHJcbiAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XHJcblx0ICBcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdCAgXHRcdGlzRWRpdGluZzogbmV4dFByb3BzLmVkaXRpbmcsXHJcblx0ICBcdFx0dXJsOiBuZXh0UHJvcHMudXJsXHJcbiAgXHRcdH0pXHJcbiAgIH1cclxuXHJcbiAgIHVwZGF0ZUxvY2FsbHkodXJsKSB7XHJcblx0ICBcdHRoaXMuZGlzcGF0Y2godXBkYXRlUG9zdEltYWdlKHVybCkpLnRoZW4oKCkgPT4ge1xyXG5cdCAgXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdCAgXHRcdFx0dXJsOiB1cmxcclxuXHQgIFx0XHR9KVxyXG5cdCAgXHR9KVxyXG4gICB9XHJcblxyXG4gIFx0cmVuZGVyKCkge1xyXG4gIFx0XHRpZih0aGlzLnN0YXRlLnVybCkge1xyXG5cdCAgXHRcdGlmKHRoaXMuc3RhdGUuaXNFZGl0aW5nKSB7XHJcblx0ICBcdFx0XHRyZXR1cm4gKFxyXG5cdCAgXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImVkaXRvclwiPlxyXG5cdCAgXHRcdFx0XHRcdDxpbWcgc3JjPXt0aGlzLnN0YXRlLnVybH0gd2lkdGg9XCIxMDAlXCIgLz5cclxuXHQgIFx0XHRcdFx0XHQ8aSBjbGFzc05hbWU9XCJmYSBmYS1jbG9zZVwiIG9uQ2xpY2s9eygpID0+IHt0aGlzLnByb3BzLm9uUmVtb3ZlKCl9fT48L2k+XHJcblx0ICBcdFx0XHRcdFx0PHN0eWxlIGpzeD57YFxyXG5cdCAgXHRcdFx0XHRcdFx0LmVkaXRvciB7XHJcblx0ICBcdFx0XHRcdFx0XHRcdHBvc2l0aW9uOnJlbGF0aXZlO1xyXG5cdCAgXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdC5lZGl0b3IgaSB7XHJcblx0XHRcdFx0XHRcdFx0XHRwb3NpdGlvbjphYnNvbHV0ZTtcclxuXHRcdFx0XHRcdFx0XHRcdHJpZ2h0OjBweDtcclxuXHRcdFx0XHRcdFx0XHRcdHRvcDowcHg7XHJcblx0XHRcdFx0XHRcdFx0XHRwYWRkaW5nOjIwcHg7XHJcblx0XHRcdFx0XHRcdFx0XHRmb250LXNpemU6MTdweDtcclxuXHRcdFx0XHRcdFx0XHRcdGNvbG9yOiNmZmY7XHJcblx0XHRcdFx0XHRcdFx0XHRvcGFjaXR5OjAuNTtcclxuXHRcdFx0XHRcdFx0XHRcdHRyYW5zaXRpb246MC4ycyBhbGwgZWFzZTtcclxuXHRcdFx0XHRcdFx0XHRcdGN1cnNvcjpwb2ludGVyO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHQuZWRpdG9yIGk6aG92ZXIge1xyXG5cdFx0XHRcdFx0XHRcdFx0b3BhY2l0eToxLjA7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdCAgXHRcdFx0XHRcdGB9PC9zdHlsZT5cclxuXHQgIFx0XHRcdFx0PC9kaXY+XHJcblx0ICBcdFx0XHQpXHJcblx0ICBcdFx0fSBlbHNlIHtcclxuXHRcdCAgXHRcdHJldHVybiAoXHJcblx0XHRcdCAgICBcdDxkaXY+XHJcblx0XHRcdCAgICAgIFx0PGltZyBzcmM9e3RoaXMuc3RhdGUudXJsfSB3aWR0aD1cIjEwMCVcIiAvPlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdCAgIFx0KTtcclxuXHQgIFx0XHR9XHJcblx0ICBcdH0gZWxzZSB7XHJcblx0ICBcdFx0cmV0dXJuIG51bGxcclxuXHQgIFx0fVxyXG4gICB9XHJcbn1cclxuXHJcblxyXG5jbGFzcyBBY3Rpb25CYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLmN1cnJlbnRVc2VyID0gdGhpcy5wcm9wcy5jdXJyZW50VXNlcjtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICBcdGlzRWRpdGluZzogZmFsc2VcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuICBcdHRoaXMuc2V0U3RhdGUoe1xyXG4gIFx0XHRpc0VkaXRpbmc6IHRoaXMucHJvcHMuZWRpdGluZyxcclxuICBcdFx0cG9zdDogdGhpcy5wcm9wcy5wb3N0LFxyXG4gIFx0XHQuLi50aGlzLnByb3BzLnBhcmVudFN0YXRlXHJcbiAgXHR9KVxyXG4gIH1cclxuXHJcbiAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XHJcblx0ICBcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdCAgXHRcdGlzRWRpdGluZzogbmV4dFByb3BzLmVkaXRpbmcsXHJcblx0ICBcdFx0cG9zdDogbmV4dFByb3BzLnBvc3QsXHJcblx0ICBcdFx0Li4ubmV4dFByb3BzLnBhcmVudFN0YXRlXHJcblx0ICBcdH0pXHJcbiAgIH1cclxuXHJcblxyXG5cclxuICAgY3JlYXRlUG9wdXAoKSB7XHJcblx0ICBcdHRoaXMudmlkZW8uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7XHJcblx0ICAgICAgaWYoZS5rZXlDb2RlID09IDEzKSB7XHJcblx0ICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdCAgICAgICAgIHRoaXMucHJvcHMub25WaWRlbyhlLnRhcmdldC52YWx1ZSlcclxuXHQgICAgICB9XHJcblx0ICAgfSlcclxuICAgfVxyXG5cclxuICBcdHJlbmRlcigpIHtcclxuICBcdFx0dmFyIHBvc3QgPSB0aGlzLnN0YXRlLnBvc3Q7XHJcbiAgXHRcdGlmIChwb3N0KSB7XHJcblx0XHQgIFx0aWYgKHRoaXMuc3RhdGUuaXNFZGl0aW5nKSB7XHJcblx0XHQgICBcdHJldHVybiAoXHJcblx0XHRcdCAgICAgIDxkaXY+XHJcblx0XHQgICAgICAgIFx0XHQ8c3BhbiBvbkNsaWNrPXsoKSA9PiB7dGhpcy5wcm9wcy5vblNhdmUoKX19IGNsYXNzTmFtZT1cInVpIGJ1dHRvbiBzbWFsbCBjaXJjdWxhciBwcmltYXJ5XCI+0KHQvtGF0YDQsNC90LjRgtGMPC9zcGFuPlxyXG5cdFx0ICAgICAgICBcdFx0PHNwYW4gb25DbGljaz17KCkgPT4ge3RoaXMucHJvcHMub25DYW5jZWwoKX19IGNsYXNzTmFtZT1cInVpIGJ1dHRvbiBzbWFsbCBjaXJjdWxhciBkZWZhdWx0XCI+0J7RgtC80LXQvdCwPC9zcGFuPlxyXG5cdFx0ICAgICAgXHQgICB7KCF0aGlzLnN0YXRlLnBvc3QucG9zdEltYWdlIFxyXG5cdFx0ICAgICAgXHQgICBcdCYmICF0aGlzLnN0YXRlLnBvc3QucG9zdFZpZGVvKSBcclxuXHRcdCAgICAgIFx0ICAgXHQmJlxyXG5cdFx0XHQgICAgICAgICAgICA8c3Bhbj5cclxuXHRcdFx0XHQgICAgICAgICAgICA8c3BhbiBcclxuXHRcdFx0XHRcdCAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHt0aGlzLmltYWdlLmNsaWNrKCl9fSBcclxuXHRcdFx0XHRcdCAgICAgICAgICAgIGNsYXNzTmFtZT1cInVpIGJ1dHRvbiBpY29uIGNpcmN1bGFyIHNtYWxsIGJhc2ljXCI+XHJcblx0XHRcdFx0ICAgICAgICAgICAgXHQ8aSBjbGFzc05hbWU9XCJmYSBmYS1pbWFnZVwiPjwvaT5cclxuXHRcdFx0XHQgICAgICAgICAgICA8L3NwYW4+XHJcblx0XHRcdFx0ICAgICAgICAgXHQ8aW5wdXQgXHJcblx0XHRcdCAgXHRcdFx0XHRcdFx0cmVmPXsoZSkgPT4ge3RoaXMuaW1hZ2UgPSBlfX1cclxuXHRcdFx0XHQgIFx0XHRcdFx0XHR0eXBlPVwiZmlsZVwiIFxyXG5cdFx0XHRcdCAgXHRcdFx0XHRcdGNsYXNzTmFtZT1cInVpIGhpZGRlblwiIFxyXG5cdFx0XHRcdCAgXHRcdFx0XHRcdG9uQ2hhbmdlPXsoZSkgPT4ge3RoaXMucHJvcHMub25VcGxvYWQoZSl9fSBcclxuXHRcdFx0ICBcdFx0XHRcdFx0Lz5cclxuXHRcdCAgXHRcdFx0XHRcdDwvc3Bhbj5cclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICB7KCF0aGlzLnN0YXRlLnBvc3QucG9zdFZpZGVvIFxyXG5cdFx0XHQgICAgICAgICBcdCYmICF0aGlzLnN0YXRlLnBvc3QucG9zdEltYWdlKSBcclxuXHRcdFx0ICAgICAgICAgXHQmJlxyXG5cdFx0XHQgICAgICAgICAgICA8c3Bhbj5cclxuXHRcdFx0XHQgICAgICAgICAgICA8c3BhblxyXG5cdFx0XHRcdCAgICAgICAgICAgIFx0b25DbGljaz17KGUpID0+IHskKCcudmlkZW8uYnV0dG9uJykucG9wdXAoe3BvcHVwIDogJCgnLnZpZGVvLnBvcHVwJyksIG9uOiAnY2xpY2snfSk7dGhpcy5jcmVhdGVQb3B1cCgpfX0gXHJcblx0XHRcdFx0ICAgICAgICAgICAgXHRjbGFzc05hbWU9XCJ1aSBidXR0b24gdmlkZW8gaWNvbiBjaXJjdWxhciBzbWFsbCBiYXNpY1wiXHJcblx0XHRcdFx0ICAgICAgICAgICAgPjxpIGNsYXNzTmFtZT1cImZhIGZhLXZpZGVvLWNhbWVyYVwiPjwvaT48L3NwYW4+XHJcblx0XHRcdFx0ICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3B1cCB2aWRlbyB1aVwiPlxyXG5cdFx0XHRcdCAgICAgICAgICAgICAgIDxpbnB1dCBcclxuXHRcdFx0XHQgICAgICAgICAgICAgICAgcmVmPXsoZSkgPT4ge3RoaXMudmlkZW8gPSBlfX0gXHJcblx0XHRcdFx0ICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCIgXHJcblx0XHRcdFx0ICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi0KHRgdGL0LvQutCwINC90LAg0LLQuNC00LXQviDRgSBZb3VUdWJlXCIgXHJcblx0XHRcdFx0ICAgICAgICAgICAgICAgLz5cclxuXHRcdFx0XHQgICAgICAgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgICAgICAgPC9zcGFuPlxyXG5cdFx0XHQgICAgICAgICB9XHJcblx0XHRcdCAgICAgICAgIDxzdHlsZSBqc3g+e2BcclxuXHRcdFx0XHRcdFx0XHQucG9wdXAgaW5wdXQge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ym9yZGVyOjBweDtcclxuXHRcdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZToxN3B4O1xyXG5cdFx0XHRcdFx0XHRcdFx0cGFkZGluZzo1cHg7XHJcblx0XHRcdFx0XHRcdFx0XHRvdXRsaW5lOm5vbmU7XHJcblx0XHRcdFx0XHRcdFx0XHR3aWR0aDozNTBweDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdCAgICAgICAgIGB9PC9zdHlsZT5cclxuXHRcdFx0ICAgICAgPC9kaXY+XHJcblx0XHQgICAgXHQpO1xyXG5cdFx0ICAgfSBlbHNlIHtcclxuXHRcdCAgIFx0cmV0dXJuIChcclxuXHQgICAgICAgIFx0XHQ8c3BhbiBcclxuXHQgICAgICAgIFx0XHRvbkNsaWNrPXsoKSA9PiB7dGhpcy5wcm9wcy5vbkxpa2UoKX19IFxyXG5cdCAgICAgICAgXHRcdGNsYXNzTmFtZT17KHRoaXMuc3RhdGUuaXNMaWtlZCkgPyBcclxuXHQgICAgICAgIFx0XHRcdGB1aSBidXR0b24gY2lyY3VsYXIgc21hbGwgcHJpbWFyeWAgOiBcclxuXHQgICAgICAgIFx0XHRcdGB1aSBidXR0b24gY2lyY3VsYXIgc21hbGwgZGVmYXVsdGB9XHJcblx0ICAgICAgICBcdFx0PlxyXG5cdFx0ICAgICAgICBcdFx0PGkgY2xhc3NOYW1lPXsodGhpcy5zdGF0ZS5pc0xpa2VkKSA/IFxyXG5cdFx0ICAgICAgICBcdFx0XHRgZmEgZmEtaGVhcnQgaWNvbmAgOiBcclxuXHRcdCAgICAgICAgXHRcdFx0YGZhIGZhLWhlYXJ0LW8gaWNvbmB9PlxyXG5cdFx0ICAgICAgICBcdFx0PC9pPiB7dGhpcy5zdGF0ZS5saWtlQ291bnRlcn1cclxuXHRcdCAgICAgICAgXHRcdDxzdHlsZSBqc3g+e2BcclxuXHRcdFx0XHRcdFx0XHQubm90ZSAubWV0YSAuYnV0dG9uLmRlZmF1bHQge1xyXG5cdFx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZDojZmFmYWZhO1xyXG5cdFx0XHRcdFx0XHRcdFx0dHJhbnNpdGlvbjowLjJzIGFsbCBlYXNlO1xyXG5cdFx0XHRcdCAgICAgICAgXHQgfVxyXG5cdFx0XHRcdCAgICAgICAgXHQgLm5vdGUgLm1ldGEgLmJ1dHRvbi5kZWZhdWx0OmhvdmVyIHtcclxuXHRcdFx0XHQgICAgICAgIFx0IFx0YmFja2dyb3VuZDojZWVlO1xyXG5cdFx0XHRcdCAgICAgICAgXHQgfVxyXG5cdFx0ICAgICAgICBcdFx0YH08L3N0eWxlPlxyXG5cdFx0ICAgICAgICBcdDwvc3Bhbj5cclxuXHRcdCAgIFx0KVxyXG5cdFx0ICAgfVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIG51bGxcclxuXHRcdH1cclxuICBcdH1cclxufVxyXG5cclxuXHJcblxyXG52YXIgQmxhbmsgPSAocHJvcHMpID0+IHtcclxuXHRyZXR1cm4gKFxyXG5cdFx0PGRpdj5cclxuICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1c2VyXCI+XHJcblx0ICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbWFnZVwiPlxyXG5cdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxhbmsgYXZhdGFyXCI+PC9kaXY+XHJcblx0ICAgICAgICAgPC9kaXY+XHJcblx0ICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50XCI+XHJcblx0ICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJibGFuayBzdHJpbmdcIj48L2Rpdj5cclxuXHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJsYW5rIHN0cmluZ1wiPjwvZGl2PlxyXG5cdCAgICAgICAgIDwvZGl2PlxyXG5cdCAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRcIj5cclxuXHQgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJsYW5rIGhlYWRlclwiPjwvZGl2PlxyXG5cdCAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxhbmsgZGVzY3JpcHRpb25cIj48L2Rpdj5cclxuXHQgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJsYW5rIGRlc2NyaXB0aW9uXCI+PC9kaXY+XHJcbiAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICA8c3R5bGUganN4PntgXHJcblx0ICAgICAgICAgLnVzZXIgLmNvbnRlbnQge1xyXG5cdCAgICAgICAgICAgIG1hcmdpbi1sZWZ0OjE1cHg7XHJcblx0ICAgICAgICAgfVxyXG5cdCAgICAgICAgIC51c2VyIHtcclxuXHQgICAgICAgICAgICBkaXNwbGF5OmZsZXg7XHJcblx0ICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246cm93O1xyXG5cdCAgICAgICAgIH1cclxuICAgICAgICAgYH08L3N0eWxlPlxyXG5cdCAgIDwvZGl2PlxyXG5cdClcclxufVxyXG5cclxuXHJcbmNvbm5lY3QoKHN0b3JlKSA9PiBzdG9yZSkoQ29udGVudClcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoKHN0b3JlKSA9PiBzdG9yZSkoTm90ZSkiXX0= */\n/*@ sourceURL=components\\feed\\note.js */'
					}));
				} else {
					return _react2.default.createElement('div', null, _react2.default.createElement('img', { src: this.state.url, width: '100%' }));
				}
			} else {
				return null;
			}
		}
	}]);

	return Image;
}(_react2.default.Component);

var ActionBar = function (_React$Component6) {
	(0, _inherits3.default)(ActionBar, _React$Component6);

	function ActionBar(props) {
		(0, _classCallCheck3.default)(this, ActionBar);

		var _this21 = (0, _possibleConstructorReturn3.default)(this, (ActionBar.__proto__ || (0, _getPrototypeOf2.default)(ActionBar)).call(this, props));

		_this21.currentUser = _this21.props.currentUser;
		_this21.state = {
			isEditing: false
		};
		return _this21;
	}

	(0, _createClass3.default)(ActionBar, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			this.setState((0, _extends3.default)({
				isEditing: this.props.editing,
				post: this.props.post
			}, this.props.parentState));
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			this.setState((0, _extends3.default)({
				isEditing: nextProps.editing,
				post: nextProps.post
			}, nextProps.parentState));
		}
	}, {
		key: 'createPopup',
		value: function createPopup() {
			var _this22 = this;

			this.video.addEventListener('keydown', function (e) {
				if (e.keyCode == 13) {
					e.preventDefault();
					_this22.props.onVideo(e.target.value);
				}
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _this23 = this;

			var post = this.state.post;
			if (post) {
				if (this.state.isEditing) {
					return _react2.default.createElement('div', {
						'data-jsx': 2459011142
					}, _react2.default.createElement('span', { onClick: function onClick() {
							_this23.props.onSave();
						}, className: 'ui button small circular primary', 'data-jsx': 2459011142
					}, '\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C'), _react2.default.createElement('span', { onClick: function onClick() {
							_this23.props.onCancel();
						}, className: 'ui button small circular default', 'data-jsx': 2459011142
					}, '\u041E\u0442\u043C\u0435\u043D\u0430'), !this.state.post.postImage && !this.state.post.postVideo && _react2.default.createElement('span', {
						'data-jsx': 2459011142
					}, _react2.default.createElement('span', {
						onClick: function onClick() {
							_this23.image.click();
						},
						className: 'ui button icon circular small basic', 'data-jsx': 2459011142
					}, _react2.default.createElement('i', { className: 'fa fa-image', 'data-jsx': 2459011142
					})), _react2.default.createElement('input', {
						ref: function ref(e) {
							_this23.image = e;
						},
						type: 'file',
						className: 'ui hidden',
						onChange: function onChange(e) {
							_this23.props.onUpload(e);
						},
						'data-jsx': 2459011142
					})), !this.state.post.postVideo && !this.state.post.postImage && _react2.default.createElement('span', {
						'data-jsx': 2459011142
					}, _react2.default.createElement('span', {
						onClick: function onClick(e) {
							$('.video.button').popup({ popup: $('.video.popup'), on: 'click' });_this23.createPopup();
						},
						className: 'ui button video icon circular small basic',
						'data-jsx': 2459011142
					}, _react2.default.createElement('i', { className: 'fa fa-video-camera', 'data-jsx': 2459011142
					})), _react2.default.createElement('div', { className: 'popup video ui', 'data-jsx': 2459011142
					}, _react2.default.createElement('input', {
						ref: function ref(e) {
							_this23.video = e;
						},
						type: 'text',
						placeholder: '\u0421\u0441\u044B\u043B\u043A\u0430 \u043D\u0430 \u0432\u0438\u0434\u0435\u043E \u0441 YouTube',
						'data-jsx': 2459011142
					}))), _react2.default.createElement(_style2.default, {
						styleId: 2459011142,
						css: '.popup[data-jsx="2459011142"] input[data-jsx="2459011142"] {border:0px;font-size:17px;padding:5px;outline:none;width:350px;}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\feed\\note.js */'
					}));
				} else {
					return _react2.default.createElement('span', {
						onClick: function onClick() {
							_this23.props.onLike();
						},
						className: this.state.isLiked ? 'ui button circular small primary' : 'ui button circular small default',
						'data-jsx': 3055413465
					}, _react2.default.createElement('i', { className: this.state.isLiked ? 'fa fa-heart icon' : 'fa fa-heart-o icon', 'data-jsx': 3055413465
					}), ' ', this.state.likeCounter, _react2.default.createElement(_style2.default, {
						styleId: 3055413465,
						css: '.note[data-jsx="3055413465"] .meta[data-jsx="3055413465"] .button.default[data-jsx="3055413465"] {background:#fafafa;-webkit-transition:0.2s all ease;-moz-transition:0.2s all ease;-ms-transition:0.2s all ease;transition:0.2s all ease;}.note[data-jsx="3055413465"] .meta[data-jsx="3055413465"] .button.default[data-jsx="3055413465"]:hover {background:#eee;}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\feed\\note.js */'
					}));
				}
			} else {
				return null;
			}
		}
	}]);

	return ActionBar;
}(_react2.default.Component);

var Blank = function Blank(props) {
	return _react2.default.createElement('div', {
		'data-jsx': 327546934
	}, _react2.default.createElement('div', { className: 'user', 'data-jsx': 327546934
	}, _react2.default.createElement('div', { className: 'image', 'data-jsx': 327546934
	}, _react2.default.createElement('div', { className: 'blank avatar', 'data-jsx': 327546934
	})), _react2.default.createElement('div', { className: 'content', 'data-jsx': 327546934
	}, _react2.default.createElement('div', { className: 'blank string', 'data-jsx': 327546934
	}), _react2.default.createElement('div', { className: 'blank string', 'data-jsx': 327546934
	}))), _react2.default.createElement('div', { className: 'content', 'data-jsx': 327546934
	}, _react2.default.createElement('div', { className: 'blank header', 'data-jsx': 327546934
	}), _react2.default.createElement('div', { className: 'blank description', 'data-jsx': 327546934
	}), _react2.default.createElement('div', { className: 'blank description', 'data-jsx': 327546934
	})), _react2.default.createElement(_style2.default, {
		styleId: 327546934,
		css: '.user[data-jsx="327546934"] .content[data-jsx="327546934"] {margin-left:15px;}.user[data-jsx="327546934"] {display:-webkit-flex; display:flex;-webkit-flex-direction:row;-moz-flex-direction:row;flex-direction:row;}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\feed\\note.js */'
	}));
};

(0, _reactRedux.connect)(function (store) {
	return store;
})(Content);

exports.default = (0, _reactRedux.connect)(function (store) {
	return store;
})(Note);

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "E:\\www\\Levelup.name\\components\\feed\\note.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "E:\\www\\Levelup.name\\components\\feed\\note.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(330)))

/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,