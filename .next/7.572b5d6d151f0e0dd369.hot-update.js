webpackHotUpdate(7,{

/***/ 709:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(93);

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = __webpack_require__(37);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(18);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(19);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(40);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(39);

var _inherits3 = _interopRequireDefault(_inherits2);

var _style = __webpack_require__(566);

var _style2 = _interopRequireDefault(_style);

var _react = __webpack_require__(10);

var _react2 = _interopRequireDefault(_react);

var _user = __webpack_require__(572);

var _user2 = _interopRequireDefault(_user);

var _reactRedux = __webpack_require__(565);

var _link = __webpack_require__(563);

var _link2 = _interopRequireDefault(_link);

var _post = __webpack_require__(576);

var _jsCookie = __webpack_require__(568);

var _jsCookie2 = _interopRequireDefault(_jsCookie);

var _initscripts = __webpack_require__(579);

var _app = __webpack_require__(575);

var _user3 = __webpack_require__(571);

var _findURL = __webpack_require__(722);

var _findURL2 = _interopRequireDefault(_findURL);

var _getYouTube = __webpack_require__(723);

var _getYouTube2 = _interopRequireDefault(_getYouTube);

var _reactAvatar = __webpack_require__(570);

var _reactAvatar2 = _interopRequireDefault(_reactAvatar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FlashPost = function (_React$Component) {
  (0, _inherits3.default)(FlashPost, _React$Component);

  function FlashPost(props) {
    (0, _classCallCheck3.default)(this, FlashPost);

    var _this = (0, _possibleConstructorReturn3.default)(this, (FlashPost.__proto__ || (0, _getPrototypeOf2.default)(FlashPost)).call(this, props));

    _this.currentUser = _this.props.user.profile;
    _this.token = _jsCookie2.default.get('x-access-token');
    _this.state = {
      errors: [],
      faces: null,
      isRevealed: false,
      isBlocked: false,
      isDisabled: false,
      placeholder: 'О чем бы вы хотели сейчас рассказать?',
      post: {
        postAuthor: {
          authorType: null,
          authorID: null
        },
        postImage: null,
        postVideo: null,
        postLink: null,
        postContent: '',
        postType: 'note'
      },
      currentFace: {
        faceImage: null,
        faceTitle: null
      }
    };
    return _this;
  }

  (0, _createClass3.default)(FlashPost, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      if (this.currentUser) {
        (0, _user3.getUserFaces)(this.currentUser._id).then(function (res) {
          _this2.setState({
            faces: res.data,
            post: (0, _extends3.default)({}, _this2.state.post, {
              postAuthor: (0, _extends3.default)({}, _this2.state.post.postAuthor, {
                authorID: _this2.currentUser._id,
                authorType: _this2.props.defaultType
              })
            })
          });
        });
      }

      if (this.state.post.postImage || this.state.post.postVideo || this.state.post.postContent) {
        this.setState({
          isRevealed: true
        });
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this3 = this;

      (0, _initscripts.UI)();
      $('.ui.dropdown').dropdown();
      $('.video.button').popup({
        popup: $('.video.popup'),
        on: 'click'
      });
      $('.video.popup input').on('keypress', function (e) {
        if (e.keyCode == 13) {
          e.preventDefault();
          _this3.setVideo(e.target.value);
        }
      });
    }
  }, {
    key: 'makePost',
    value: function makePost() {
      var post = this.state.post;
      (0, _post.postAdd)(this.token, post).then(function (res) {
        console.log(res.data);
      });
    }
  }, {
    key: 'handleTyping',
    value: function handleTyping(e) {
      var value = e.target.value;
      if (value.length >= 140) {
        this.setState({ isBlocked: true });
        $('.ui.form').popup({
          popup: '.limit.popup',
          hoverable: true
        });
      } else {
        if ((0, _findURL2.default)(value).length == 0) {
          this.setState({
            isBlocked: false,
            post: (0, _extends3.default)({}, this.state.post, {
              postContent: value
            })
          });
        } else {
          this.setState({
            post: (0, _extends3.default)({}, this.state.post, {
              postLink: (0, _findURL2.default)(value)[0],
              postContent: value
            })
          });
        }
      }
    }
  }, {
    key: 'uploadImage',
    value: function uploadImage(e) {
      var _this4 = this;

      var image = e.target.files[0];
      (0, _app.uploadImage)(this.token, image).then(function (res) {
        _this4.setState({
          placeholder: 'Добавьте подпись к загруженному изображению',
          post: (0, _extends3.default)({}, _this4.state.post, {
            postImage: res.path
          })
        });
      });
    }
  }, {
    key: 'handleImage',
    value: function handleImage(e) {
      this.setState({
        isDisabled: true
      });
    }
  }, {
    key: 'setVideo',
    value: function setVideo(value) {
      var id = (0, _getYouTube2.default)(value);
      if (id) {
        var url = '//www.youtube.com/embed/' + id;
        this.setState({
          placeholder: 'Подпись к видеоролику',
          post: (0, _extends3.default)({}, this.state.post, {
            postVideo: url
          })
        });
      } else {
        this.setState({
          errors: this.state.errors.concat(['Некорретная ссылка'])
        });
      }
    }
  }, {
    key: 'deleteImage',
    value: function deleteImage() {
      this.setState({
        placeholder: 'О чем бы вы хотели сейчас рассказать?',
        post: (0, _extends3.default)({}, this.state.post, {
          postImage: null
        })
      });
    }
  }, {
    key: 'deleteVideo',
    value: function deleteVideo() {
      this.setState({
        placeholder: 'О чем бы вы хотели сейчас рассказать?',
        post: (0, _extends3.default)({}, this.state.post, {
          postVideo: null
        })
      });
    }
  }, {
    key: 'deleteLink',
    value: function deleteLink() {
      this.setState({
        placeholder: 'О чем бы вы хотели сейчас рассказать?',
        post: (0, _extends3.default)({}, this.state.post, {
          postLink: null
        })
      });
    }
  }, {
    key: 'setType',
    value: function setType(type, item) {
      var image = type == 'blog' ? item.blogImage : item.userImage;
      var name = type == 'blog' ? item.blogTitle : item.userTitle;
      if (type == 'user' || type == 'blog') {
        this.setState({
          post: (0, _extends3.default)({}, this.state.post, {
            postAuthor: {
              authorType: type,
              authorID: item._id
            }
          }),
          currentFace: {
            faceImage: image,
            faceName: name
          }
        });
      } else {
        console.log("Данного типа не существует");
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this5 = this;

      var post = this.state.post;
      var user = this.currentUser;
      if (this.props.user.profile && post) {
        // Кнопка
        var button = _react2.default.createElement('span', null, !this.state.isBlocked ? _react2.default.createElement('a', { onClick: function onClick() {
            _this5.makePost();
          }, className: 'medium circular ui button primary' }, '\u041E\u043F\u0443\u0431\u043B\u0438\u043A\u043E\u0432\u0430\u0442\u044C') : _react2.default.createElement(_link2.default, { href: '/editor' }, _react2.default.createElement('a', { className: 'medium circular ui button primary' }, '\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u0432 \u0440\u0435\u0434\u0430\u043A\u0442\u043E\u0440')));

        // Изображение
        var image = _react2.default.createElement('div', {
          'data-jsx': 2596683662
        }, this.state.post.postImage ? _react2.default.createElement('div', { className: 'uploaded-image', 'data-jsx': 2596683662
        }, _react2.default.createElement('img', { src: this.state.post.postImage, width: '100%', 'data-jsx': 2596683662
        }), _react2.default.createElement('i', { onClick: function onClick() {
            _this5.deleteImage();
          }, className: 'fa fa-close', 'data-jsx': 2596683662
        })) : _react2.default.createElement('div', {
          'data-jsx': 2596683662
        }), _react2.default.createElement(_style2.default, {
          styleId: 2596683662,
          css: '.uploaded-image[data-jsx="2596683662"] img[data-jsx="2596683662"] {border-radius:5px;}.uploaded-image[data-jsx="2596683662"] {margin:15px 0px;position:relative;width:70%;}.uploaded-image[data-jsx="2596683662"] i[data-jsx="2596683662"] {position:absolute;right:0px;top:0px;padding:15px;color:#fff;opacity:0.5;-webkit-transition:0.2s all ease;-moz-transition:0.2s all ease;-ms-transition:0.2s all ease;transition:0.2s all ease;}.uploaded-image[data-jsx="2596683662"] i[data-jsx="2596683662"]:hover {opacity:1;}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\flashpost.js */'
        }));

        // Ссылка
        var link = _react2.default.createElement('div', {
          'data-jsx': 2037672842
        }, this.state.post.postLink != null && _react2.default.createElement('div', { className: 'link', 'data-jsx': 2037672842
        }, _react2.default.createElement('i', { className: 'fa fa-link', 'data-jsx': 2037672842
        }), _react2.default.createElement('span', {
          'data-jsx': 2037672842
        }, _react2.default.createElement('a', { href: this.state.post.postLink, 'data-jsx': 2037672842
        }, this.state.post.postLink)), _react2.default.createElement('i', { className: 'fa fa-close', onClick: function onClick() {
            _this5.deleteLink();
          }, 'data-jsx': 2037672842
        })), _react2.default.createElement(_style2.default, {
          styleId: 2037672842,
          css: '.link[data-jsx="2037672842"] {border-radius:5px;padding:15px;border:1px solid #eee;position:relative;margin-top:15px;}.link[data-jsx="2037672842"] .fa-link[data-jsx="2037672842"] {opacity:0.3;margin-right:20px;}.link[data-jsx="2037672842"] .fa-close[data-jsx="2037672842"] {position:absolute;right:0px;padding:10px 20px;top:8px;opacity:0.3;-webkit-transition:0.2s all ease;-moz-transition:0.2s all ease;-ms-transition:0.2s all ease;transition:0.2s all ease;}.link[data-jsx="2037672842"] .fa-close[data-jsx="2037672842"]:hover {opacity:1.0;}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\flashpost.js */'
        }));

        var video = _react2.default.createElement('div', null, this.state.post.postVideo && _react2.default.createElement('div', { className: 'video', 'data-jsx': 733287100
        }, _react2.default.createElement('iframe', { width: '560', height: '315', src: this.state.post.postVideo, frameBorder: '0', allowFullScreen: true, 'data-jsx': 733287100
        }), _react2.default.createElement('i', { className: 'fa fa-close', onClick: function onClick() {
            _this5.deleteVideo();
          }, 'data-jsx': 733287100
        }), _react2.default.createElement(_style2.default, {
          styleId: 733287100,
          css: '.video[data-jsx="733287100"] {position:relative;}.video[data-jsx="733287100"] i[data-jsx="733287100"] {position:absolute;right:0px;top:0px;padding:15px;cursor:pointer;opacity:.5;-webkit-transition:.2s all ease;-moz-transition:.2s all ease;-ms-transition:.2s all ease;transition:.2s all ease;}.video[data-jsx="733287100"] i[data-jsx="733287100"]:hover {opacity:1;}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\flashpost.js */'
        })));

        var symbols = 140 - this.state.post.postContent.length;

        return _react2.default.createElement('div', { className: this.state.isRevealed ? 'revealed flashpost' : 'flashpost', onClick: function onClick() {
            _this5.setState({ isRevealed: true });
          }, 'data-jsx': 3261166757
        }, _react2.default.createElement('form', { className: 'ui form', 'data-jsx': 3261166757
        }, _react2.default.createElement('div', { className: 'field', 'data-jsx': 3261166757
        }, _react2.default.createElement('div', { className: 'image user', 'data-jsx': 3261166757
        }, _react2.default.createElement('div', { className: 'ui inline dropdown right face', 'data-jsx': 3261166757
        }, _react2.default.createElement(_reactAvatar2.default, {
          color: '#46978c',
          round: true,
          size: 32,
          src: this.state.currentFace.faceImage ? this.state.currentFace.faceImage : user.userImage,
          name: this.state.currentFace.faceName
        }), this.state.isRevealed && _react2.default.createElement('i', { className: 'fa fa-angle-down icon', 'data-jsx': 3261166757
        }), _react2.default.createElement('div', { className: 'menu left', 'data-jsx': 3261166757
        }, _react2.default.createElement('div', { className: 'item', onClick: function onClick() {
            _this5.setType('user', user);
          }, 'data-jsx': 3261166757
        }, _react2.default.createElement(_reactAvatar2.default, { color: '#46978c', round: true, size: 20, src: user.userImage, name: user.userName }), _react2.default.createElement('span', {
          'data-jsx': 3261166757
        }, user.userName)), this.state.faces && this.state.faces.map(function (item, i) {
          return _react2.default.createElement('div', { onClick: function onClick() {
              _this5.setType('blog', item);
            }, className: 'item', key: i, 'data-jsx': 3261166757
          }, _react2.default.createElement(_reactAvatar2.default, { color: '#46978c', round: true, size: 20, src: item.blogImage, name: item.blogTitle }), _react2.default.createElement('span', {
            'data-jsx': 3261166757
          }, item.blogTitle));
        })))), _react2.default.createElement('div', { className: 'note', 'data-jsx': 3261166757
        }, _react2.default.createElement('div', {
          'data-jsx': 3261166757
        }, image), _react2.default.createElement('div', {
          'data-jsx': 3261166757
        }, video), _react2.default.createElement('div', { className: 'textarea', 'data-jsx': 3261166757
        }, _react2.default.createElement('textarea', { disabled: this.state.isDisabled, maxLength: '140', ref: function ref(e) {
            _this5.textarea = e;
          }, onChange: function onChange(e) {
            _this5.handleTyping(e);
          }, defaultValue: post.postContent, rows: '2', placeholder: this.state.placeholder, 'data-jsx': 3261166757
        }), _react2.default.createElement('div', { className: 'bar', 'data-jsx': 3261166757
        }, button, !this.state.post.postImage && !this.state.post.postVideo && _react2.default.createElement('span', { onClick: function onClick() {
            _this5.image.click();
          }, className: 'ui button icon circular small basic', 'data-jsx': 3261166757
        }, _react2.default.createElement('i', { className: 'fa fa-image', 'data-jsx': 3261166757
        })), !this.state.post.postVideo && !this.state.post.postImage && _react2.default.createElement('span', {
          'data-jsx': 3261166757
        }, _react2.default.createElement('span', { onClick: function onClick() {
            $('.video.button').popup({ popup: $('.video.popup'), on: 'click' });
          }, className: 'ui button video icon circular small basic', 'data-jsx': 3261166757
        }, _react2.default.createElement('i', { className: 'fa fa-video-camera', 'data-jsx': 3261166757
        })), _react2.default.createElement('div', { className: 'popup video ui', 'data-jsx': 3261166757
        }, _react2.default.createElement('input', {
          ref: function ref(e) {
            _this5.video = e;
          },
          type: 'text',
          placeholder: '\u0421\u0441\u044B\u043B\u043A\u0430 \u043D\u0430 \u0432\u0438\u0434\u0435\u043E \u0441 YouTube',
          'data-jsx': 3261166757
        }))), _react2.default.createElement('div', { className: 'ui limit popup', 'data-jsx': 3261166757
        }, _react2.default.createElement('p', {
          'data-jsx': 3261166757
        }, '\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u0430\u044F \u0434\u043B\u0438\u043D\u0430 \u043A\u043E\u0440\u043E\u0442\u043A\u043E\u0433\u043E \u043F\u043E\u0441\u0442\u0430 \u0440\u0430\u0432\u043D\u0430 140 \u0441\u0438\u043C\u0432\u043E\u043B\u0430\u043C. \u0412\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u0432\u044B \u0445\u043E\u0442\u0438\u0442\u0435 \u043E\u043F\u0443\u0431\u043B\u0438\u043A\u043E\u0432\u0430\u0442\u044C \u043F\u0443\u0431\u043B\u0438\u043A\u0430\u0446\u0438\u044E?')), _react2.default.createElement('div', { className: 'symbols', 'data-jsx': 3261166757
        }, symbols))), _react2.default.createElement('div', {
          'data-jsx': 3261166757
        }, link)), _react2.default.createElement('input', { onChange: function onChange(e) {
            _this5.uploadImage(e);
          }, type: 'file', className: 'ui hidden', ref: function ref(e) {
            _this5.image = e;
          }, 'data-jsx': 3261166757
        }))), _react2.default.createElement(_style2.default, {
          styleId: 3261166757,
          css: '.dropdown[data-jsx="3261166757"] .menu[data-jsx="3261166757"] .item[data-jsx="3261166757"] span[data-jsx="3261166757"] {margin-left:5px;}.note[data-jsx="3261166757"] {padding:15px 0px;}.textarea[data-jsx="3261166757"] {position:relative;}.flashpost[data-jsx="3261166757"] {background:#fff;border-bottom:1px solid rgba(0,0,0,0.07);box-shadow:0px 11px 20px 0px rgba(0, 0, 0, 0.03)            }.flashpost[data-jsx="3261166757"] .image[data-jsx="3261166757"] {position: absolute;left:0px;top:50%;margin-top:-20px;display:-webkit-flex; display:flex;justify-content:center;align-items:center;}.flashpost[data-jsx="3261166757"] textarea[data-jsx="3261166757"] {background:transparent;border:0px;padding:10px 18px;height:36px;font-size:16px;overflow:hidden;padding-left:48px;-webkit-transition: 0.2s all ease;-moz-transition: 0.2s all ease;-ms-transition: 0.2s all ease;transition: 0.2s all ease;resize: none;}.flashpost[data-jsx="3261166757"] .field[data-jsx="3261166757"] {position: relative;}.flashpost[data-jsx="3261166757"] .bar[data-jsx="3261166757"] {position: absolute;opacity:0;bottom:-100%;left:-999px;width:100%;}.flashpost[data-jsx="3261166757"] .bar[data-jsx="3261166757"] .popup[data-jsx="3261166757"] {width:360px;}.flashpost[data-jsx="3261166757"] .bar[data-jsx="3261166757"] .popup[data-jsx="3261166757"] input[data-jsx="3261166757"] {border:0px!important;background:transparent!important;border-radius:0px!important;font-size:18px;width:360px;}.flashpost[data-jsx="3261166757"] .bar[data-jsx="3261166757"] .symbols[data-jsx="3261166757"] {position:absolute;right:0px;bottom:10px;font-size:16px;opacity:0.6;}.flashpost.revealed[data-jsx="3261166757"] .bar[data-jsx="3261166757"] {top:auto;left:0px;bottom:0px;opacity:1.0;}.flashpost.revealed[data-jsx="3261166757"] textarea[data-jsx="3261166757"] {height:150px;padding-left:0px!important;padding-right:70px;}.flashpost.revealed[data-jsx="3261166757"] .user[data-jsx="3261166757"] {right: 0px;left: auto;opacity: 1;top: 0px;margin-top: 20px;z-index:999;}.flashpost[data-jsx="3261166757"] {padding:6px 30px;}.flashpost[data-jsx="3261166757"] textarea[data-jsx="3261166757"]:focus {background:transparent;}.flashpost[data-jsx="3261166757"] .dropdown[data-jsx="3261166757"] {display:-webkit-flex; display:flex;align-items:center;}.flashpost[data-jsx="3261166757"] .dropdown[data-jsx="3261166757"] i[data-jsx="3261166757"] {margin-left:10px;}.flashpost[data-jsx="3261166757"] .dropdown[data-jsx="3261166757"] .menu[data-jsx="3261166757"] .item[data-jsx="3261166757"] {display:-webkit-flex; display:flex;align-items:center;}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\flashpost.js */'
        }));
      } else {
        return _react2.default.createElement('div', null);
      }
    }
  }]);

  return FlashPost;
}(_react2.default.Component);

exports.default = (0, _reactRedux.connect)(function (store) {
  return store;
})(FlashPost);

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "E:\\www\\Levelup.name\\components\\flashpost.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "E:\\www\\Levelup.name\\components\\flashpost.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(330)))

/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,