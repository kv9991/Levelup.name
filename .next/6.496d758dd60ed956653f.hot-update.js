webpackHotUpdate(6,{

/***/ 620:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _defineProperty2 = __webpack_require__(565);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _promise = __webpack_require__(47);

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = __webpack_require__(111);

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = __webpack_require__(39);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(14);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(15);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(40);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(41);

var _inherits3 = _interopRequireDefault(_inherits2);

var _style = __webpack_require__(544);

var _style2 = _interopRequireDefault(_style);

var _react = __webpack_require__(8);

var _react2 = _interopRequireDefault(_react);

var _jsCookie = __webpack_require__(545);

var _jsCookie2 = _interopRequireDefault(_jsCookie);

var _reactRedux = __webpack_require__(543);

var _dynamic = __webpack_require__(557);

var _dynamic2 = _interopRequireDefault(_dynamic);

var _app = __webpack_require__(559);

var _post = __webpack_require__(555);

var _getYouTube = __webpack_require__(621);

var _getYouTube2 = _interopRequireDefault(_getYouTube);

var _findURL = __webpack_require__(622);

var _findURL2 = _interopRequireDefault(_findURL);

var _initScripts = __webpack_require__(560);

var _index = __webpack_require__(706);

var _index2 = _interopRequireDefault(_index);

var _user = __webpack_require__(554);

var _user2 = _interopRequireDefault(_user);

var _blog = __webpack_require__(568);

var _blog2 = _interopRequireDefault(_blog);

var _timeagoReact = __webpack_require__(556);

var _timeagoReact2 = _interopRequireDefault(_timeagoReact);

var _link = __webpack_require__(546);

var _link2 = _interopRequireDefault(_link);

var _loader = __webpack_require__(549);

var _loader2 = _interopRequireDefault(_loader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\www\\Levelup.name\\components\\isomorphic\\feed\\views\\note.js';
// Important


// Actions


// Utils 


// Components


// Dynamics
var BlurImageLoader = (0, _dynamic2.default)(typeof window === 'undefined' ? new (__webpack_require__(557).SameLoopPromise)(function (resolve, reject) {
	eval('require.ensure = function (deps, callback) { callback(require) }');

	__webpack_require__.e/* require.ensure */(7).then((function (require) {
		var m = __webpack_require__(558);

		m = m.default || m;
		m.__webpackChunkName = 'react-blur-image-loader-95796f65-e46d-4207-a05d-8756c729a1b7.js';
		resolve(m);
	}).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
}) : new (__webpack_require__(557).SameLoopPromise)(function (resolve, reject) {
	var weakId = /*require.resolve*/(558);

	try {
		var weakModule = __webpack_require__(weakId);

		return resolve(weakModule.default || weakModule);
	} catch (err) {}

	__webpack_require__.e/* require.ensure */(7).then((function (require) {
		try {
			var m = __webpack_require__(558);

			m = m.default || m;
			resolve(m);
		} catch (error) {
			reject(error);
		}
	}).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
}));

var defaultState = {
	isLiked: false,
	likeCounter: 0,
	isEditing: false,
	post: null,
	isCommentsRevealed: false
};

var Note = function (_React$Component) {
	(0, _inherits3.default)(Note, _React$Component);

	function Note(props) {
		(0, _classCallCheck3.default)(this, Note);

		var _this = (0, _possibleConstructorReturn3.default)(this, (Note.__proto__ || (0, _getPrototypeOf2.default)(Note)).call(this, props));

		_this.token = _jsCookie2.default.get('x-access-token');
		_this.dispatch = _this.props.dispatch;
		_this.state = defaultState;
		return _this;
	}

	// React Lifecycle


	(0, _createClass3.default)(Note, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			if (this.props.currentUser) {
				if (this.props.post.postLikes.indexOf(this.props.currentUser._id) != -1) {
					this.setState({
						isLiked: true
					});
				}
			}
			this.setState({
				likeCounter: this.props.post.postLikes.length,
				post: this.props.post
			});
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			if (nextProps.currentUser) {
				if (nextProps.post.postLikes.indexOf(nextProps.currentUser._id) != -1) {
					this.setState({
						isLiked: true
					});
				}
			}
			this.setState({
				likeCounter: nextProps.post.postLikes.length,
				post: nextProps.post
			});
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			(0, _initScripts.UI)();
			$('.ui.dropdown').dropdown();
		}

		// Specific Methods

	}, {
		key: 'handleTyping',
		value: function handleTyping(value) {
			var _this2 = this;

			if ((0, _findURL2.default)(value).length == 0) {
				this.changeField(value, 'postContent');
			} else {
				this.changeField((0, _findURL2.default)(value)[0], 'postLink').then(function () {
					_this2.changeField(value, 'postContent');
				});
			}
		}
	}, {
		key: 'handleRemove',
		value: function handleRemove(id) {
			var result = confirm('Вы действительно хотите удалить запись?');
			if (result) {
				(0, _post.removePostById)(id).then(function (res) {
					if (res.data.success) {
						$('.post-' + id).hide(500);
					}
				});
			}
		}
	}, {
		key: 'handleLike',
		value: function handleLike(postID, userID) {
			var _this3 = this;

			(0, _post.setLikeById)(this.token, postID).then(function (res) {
				if (res.data.success) {
					_this3.setState((0, _extends3.default)({}, _this3.state.post, {
						isLiked: !_this3.state.isLiked,
						likeCounter: res.data.counter
					}));
				} else {
					console.log(res.data);
				}
			});
		}
	}, {
		key: 'handleImage',
		value: function handleImage(token, image) {
			var _this4 = this;

			(0, _app.uploadImage)(token, image).then(function (res) {
				if (res.path && res.success) {
					_this4.changeField(res.path, 'postImage');
				}
			});
		}
	}, {
		key: 'handleSave',
		value: function handleSave(token, id, data) {
			var _this5 = this;

			(0, _post.postUpdate)(token, id, data).then(function (res) {
				if (res.data.success) {
					_this5.setState({
						isEditing: false
					});
				}
			});
		}
	}, {
		key: 'handleVideo',
		value: function handleVideo(url) {
			var id = (0, _getYouTube2.default)(url);
			this.changeField(id, 'postVideo');
		}

		// Isomorphic Methods

	}, {
		key: 'changeField',
		value: function changeField(value, target) {
			var _this6 = this;

			return new _promise2.default(function (resolve) {
				_this6.setState({
					post: (0, _extends3.default)({}, _this6.state.post, (0, _defineProperty3.default)({}, target, value))
				});
				resolve(true);
			});
		}
	}, {
		key: 'removeField',
		value: function removeField(field) {
			this.setState({
				post: (0, _extends3.default)({}, this.state.post, (0, _defineProperty3.default)({}, field, null))
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _this7 = this;

			var post = this.state.post;
			if (post) {
				return _react2.default.createElement('article', { className: 'article block-item note preview post-' + post._id, 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 164
					}
				}, _react2.default.createElement('div', { className: 'user', 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 165
					}
				}, _react2.default.createElement('div', { className: 'left', 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 166
					}
				}, post.postAuthor.authorType == 'user' ? _react2.default.createElement(_user2.default, { id: post.postAuthor.authorID, __source: {
						fileName: _jsxFileName,
						lineNumber: 168
					}
				}) : _react2.default.createElement(_blog2.default, { id: post.postAuthor.authorID, __source: {
						fileName: _jsxFileName,
						lineNumber: 168
					}
				})), _react2.default.createElement('div', { className: 'right', 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 171
					}
				}, _react2.default.createElement('div', { className: 'ui dropdown', 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 172
					}
				}, _react2.default.createElement('i', { className: 'fa fa-ellipsis-h', 'aria-hidden': 'true', 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 173
					}
				}), _react2.default.createElement('div', { className: 'menu', 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 174
					}
				}, _react2.default.createElement('div', { className: 'item', onClick: function onClick() {
						_this7.setState({ isEditing: true });
					}, 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 175
					}
				}, '\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C'), _react2.default.createElement('div', { className: 'item', onClick: function onClick() {
						console.log('*modal');
					}, 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 176
					}
				}, '\u041F\u043E\u0436\u0430\u043B\u043E\u0432\u0430\u0442\u044C\u0441\u044F'), _react2.default.createElement('div', { className: 'item', onClick: function onClick() {
						_this7.handleRemove(post._id);
					}, 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 177
					}
				}, '\u0423\u0434\u0430\u043B\u0438\u0442\u044C'))))), _react2.default.createElement('div', { className: 'media', 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 182
					}
				}, _react2.default.createElement(Image, {
					url: post.postImage,
					isEditing: this.state.isEditing,
					onRemove: function onRemove(field) {
						_this7.removeField(field);
					},
					__source: {
						fileName: _jsxFileName,
						lineNumber: 183
					}
				}), _react2.default.createElement(Video, {
					id: post.postVideo,
					isEditing: this.state.isEditing,
					onRemove: function onRemove(field) {
						_this7.removeField(field);
					},
					__source: {
						fileName: _jsxFileName,
						lineNumber: 188
					}
				})), _react2.default.createElement('div', { className: 'content', 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 194
					}
				}, _react2.default.createElement(Content, {
					text: post.postContent,
					isEditing: this.state.isEditing,
					onChange: function onChange(value) {
						_this7.handleTyping(value);
					},
					__source: {
						fileName: _jsxFileName,
						lineNumber: 195
					}
				})), _react2.default.createElement('div', { className: 'link', 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 201
					}
				}, _react2.default.createElement(Url, {
					link: post.postLink,
					isEditing: this.state.isEditing,
					onRemove: function onRemove(field) {
						_this7.removeField(field);
					},
					onChange: function onChange(value, target) {
						_this7.changeField(value, target);
					},
					__source: {
						fileName: _jsxFileName,
						lineNumber: 202
					}
				})), _react2.default.createElement('div', { className: 'meta', 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 209
					}
				}, _react2.default.createElement('div', { className: 'left', 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 210
					}
				}, _react2.default.createElement(ActionBar, {
					post: post,
					isLiked: this.state.isLiked,
					likeCounter: this.state.likeCounter,
					isEditing: this.state.isEditing,
					onCancel: function onCancel() {
						_this7.setState({ isEditing: false, post: _this7.props.post });
					},
					onLike: function onLike() {
						_this7.handleLike(post._id, _this7.props.currentUser._id);
					},
					onSave: function onSave() {
						_this7.handleSave(_this7.token, post._id, _this7.state.post);
					},
					onUpload: function onUpload(file) {
						_this7.handleImage(_this7.token, file);
					},
					onVideo: function onVideo(url) {
						_this7.handleVideo(url);
					},
					onComment: function onComment() {
						_this7.setState({ isCommentsRevealed: !_this7.state.isCommentsRevealed });
					},
					__source: {
						fileName: _jsxFileName,
						lineNumber: 211
					}
				})), _react2.default.createElement('div', { className: 'right', 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 224
					}
				}, _react2.default.createElement('span', { className: 'time', 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 225
					}
				}, _react2.default.createElement(_timeagoReact2.default, { datetime: post.updated, locale: 'ru', __source: {
						fileName: _jsxFileName,
						lineNumber: 226
					}
				})))), _react2.default.createElement('div', { className: 'comments', 'data-jsx': 2510651470,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 230
					}
				}, _react2.default.createElement(_index2.default, {
					comments: post.postComments,
					postID: post._id,
					isRevealed: this.state.isCommentsRevealed,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 231
					}
				})), _react2.default.createElement(_style2.default, {
					styleId: 2510651470,
					css: '.note[data-jsx="2510651470"] .user[data-jsx="2510651470"],.note[data-jsx="2510651470"] .meta[data-jsx="2510651470"]{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:space-between;-webkit-justify-content:space-between;-ms-flex-pack:space-between;justify-content:space-between}.note[data-jsx="2510651470"] .meta[data-jsx="2510651470"]{margin-top:15px;padding-top:15px;border-top:1px solid #eee}.note[data-jsx="2510651470"] .media[data-jsx="2510651470"]{margin-top:10px}.note[data-jsx="2510651470"] .user[data-jsx="2510651470"] .dropdown[data-jsx="2510651470"] i[data-jsx="2510651470"]{color:#c0c0c0;font-size:16px;-webkit-transition:0.2s all ease;transition:0.2s all ease}.note[data-jsx="2510651470"] .user[data-jsx="2510651470"] .dropdown[data-jsx="2510651470"] i[data-jsx="2510651470"]:hover{color:#000}.note[data-jsx="2510651470"] .user[data-jsx="2510651470"] .dropdown[data-jsx="2510651470"] .menu[data-jsx="2510651470"]{left:auto!important;right:-15px!important}.note[data-jsx="2510651470"] .meta[data-jsx="2510651470"] .time[data-jsx="2510651470"]{color:#c0c0c0;font-size:13px}.note[data-jsx="2510651470"] .content[data-jsx="2510651470"]{word-wrap:break-word;overflow-wrap:break-word;margin:15px 0px}.note[data-jsx="2510651470"] p.primary[data-jsx="2510651470"]{font-size:17px;color:#333}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHNcXGlzb21vcnBoaWNcXGZlZWRcXHZpZXdzXFxub3RlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRPcUIsQUFJMkIsQUFDRyxBQUNELEFBQ0YsQUFDRixBQUNTLEFBQ2IsQUFDZSxBQUNQLFdBSlMsR0FEa0IsQUFHYixDQUVXLENBUE8sQUFDbkIsSUFHNEIsRUFFRCxJQUNGLEdBTDRCLEFBR3ZDLElBTDZDLFNBSWxCLE1BRVMsV0FOc0IsS0FNVCxVQVA3QyxhQUdnRCxnRkFISiwrSEFBYSIsImZpbGUiOiJjb21wb25lbnRzXFxpc29tb3JwaGljXFxmZWVkXFx2aWV3c1xcbm90ZS5qcyIsInNvdXJjZVJvb3QiOiJFOi93d3cvTGV2ZWx1cC5uYW1lIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0YW50XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjb29raWVzIGZyb20gJ2pzLWNvb2tpZSdcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG5pbXBvcnQgZHluYW1pYyBmcm9tICduZXh0L2R5bmFtaWMnXHJcblxyXG4vLyBBY3Rpb25zXHJcbmltcG9ydCB7IHVwbG9hZEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vYWN0aW9ucy9hcHAuanMnXHJcbmltcG9ydCB7IHNldExpa2VCeUlkLCByZW1vdmVQb3N0QnlJZCwgcG9zdFVwZGF0ZSB9IGZyb20gJy4uLy4uLy4uLy4uL2FjdGlvbnMvcG9zdC5qcydcclxuXHJcbi8vIFV0aWxzIFxyXG5pbXBvcnQgZ2V0WW91VHViZUlkIGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2dldFlvdVR1YmUuanMnIFxyXG5pbXBvcnQgZmluZFVSTCBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9maW5kVVJMLmpzJyBcclxuaW1wb3J0IHsgVUkgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9pbml0U2NyaXB0cy5qcydcclxuXHJcbi8vIENvbXBvbmVudHNcclxuaW1wb3J0IENvbW1lbnRzIGZyb20gJy4uLy4uL2NvbW1lbnRzL2luZGV4LmpzJ1xyXG5pbXBvcnQgVXNlciBmcm9tICcuLi8uLi91c2VyLmpzJ1xyXG5pbXBvcnQgQmxvZyBmcm9tICcuLi8uLi9ibG9nLmpzJ1xyXG5pbXBvcnQgVGltZUFnbyBmcm9tICd0aW1lYWdvLXJlYWN0JztcclxuaW1wb3J0IExpbmsgZnJvbSAnbmV4dC9saW5rJ1xyXG5pbXBvcnQgTG9hZGVyIGZyb20gJy4uLy4uL2xvYWRlci5qcydcclxuXHJcbi8vIER5bmFtaWNzXHJcbnZhciBCbHVySW1hZ2VMb2FkZXIgPSBkeW5hbWljKGltcG9ydCgncmVhY3QtYmx1ci1pbWFnZS1sb2FkZXInKSlcclxuXHJcbmNvbnN0IGRlZmF1bHRTdGF0ZSA9IHtcclxuXHRpc0xpa2VkOiBmYWxzZSxcclxuIFx0bGlrZUNvdW50ZXI6IDAsXHJcbiBcdGlzRWRpdGluZzogZmFsc2UsXHJcbiBcdHBvc3Q6IG51bGwsXHJcbiBcdGlzQ29tbWVudHNSZXZlYWxlZDogZmFsc2VcclxufVxyXG5cclxuY2xhc3MgTm90ZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcblx0ICAgc3VwZXIocHJvcHMpO1xyXG5cdCAgIHRoaXMudG9rZW4gPSBjb29raWVzLmdldCgneC1hY2Nlc3MtdG9rZW4nKVxyXG5cdCAgIHRoaXMuZGlzcGF0Y2ggPSB0aGlzLnByb3BzLmRpc3BhdGNoO1xyXG5cdCAgIHRoaXMuc3RhdGUgPSBkZWZhdWx0U3RhdGU7XHJcbiAgIH1cclxuXHJcbiAgIC8vIFJlYWN0IExpZmVjeWNsZVxyXG4gIFx0Y29tcG9uZW50V2lsbE1vdW50KCkge1xyXG5cdCAgXHRpZih0aGlzLnByb3BzLmN1cnJlbnRVc2VyKSB7XHJcblx0XHQgIFx0aWYodGhpcy5wcm9wcy5wb3N0LnBvc3RMaWtlcy5pbmRleE9mKHRoaXMucHJvcHMuY3VycmVudFVzZXIuX2lkKSAhPSAtMSkge1xyXG5cdFx0ICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdCAgICAgIGlzTGlrZWQ6IHRydWVcclxuXHRcdCAgICAgIH0pXHJcblx0XHQgICB9XHJcblx0XHR9XHRcdFxyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdGxpa2VDb3VudGVyOiB0aGlzLnByb3BzLnBvc3QucG9zdExpa2VzLmxlbmd0aCxcclxuXHRcdFx0cG9zdDogdGhpcy5wcm9wcy5wb3N0XHJcblx0XHR9KVxyXG4gICB9XHJcblxyXG4gICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICBcdGlmKG5leHRQcm9wcy5jdXJyZW50VXNlcikge1xyXG5cdFx0ICBcdGlmKG5leHRQcm9wcy5wb3N0LnBvc3RMaWtlcy5pbmRleE9mKG5leHRQcm9wcy5jdXJyZW50VXNlci5faWQpICE9IC0xKSB7XHJcblx0XHQgICAgICB0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0ICAgICAgaXNMaWtlZDogdHJ1ZVxyXG5cdFx0ICAgICAgfSlcclxuXHRcdCAgIH1cclxuXHRcdH1cdFx0XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0bGlrZUNvdW50ZXI6IG5leHRQcm9wcy5wb3N0LnBvc3RMaWtlcy5sZW5ndGgsXHJcblx0XHRcdHBvc3Q6IG5leHRQcm9wcy5wb3N0XHJcblx0XHR9KVxyXG4gICB9XHJcblxyXG4gICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgXHRVSSgpO1xyXG4gICBcdCQoJy51aS5kcm9wZG93bicpXHJcbiAgIFx0LmRyb3Bkb3duKCk7XHJcbiAgIH1cclxuXHJcbiAgIC8vIFNwZWNpZmljIE1ldGhvZHNcclxuICAgaGFuZGxlVHlwaW5nKHZhbHVlKSB7XHJcbiAgICAgIGlmKGZpbmRVUkwodmFsdWUpLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VGaWVsZCh2YWx1ZSwgJ3Bvc3RDb250ZW50JylcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBcdHRoaXMuY2hhbmdlRmllbGQoZmluZFVSTCh2YWx1ZSlbMF0sICdwb3N0TGluaycpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIFx0XHR0aGlzLmNoYW5nZUZpZWxkKHZhbHVlLCAncG9zdENvbnRlbnQnKVxyXG4gICAgICAgIFx0fSlcclxuICAgICAgfVxyXG4gIFx0fVxyXG5cclxuICAgaGFuZGxlUmVtb3ZlKGlkKSB7XHJcbiAgICAgIHZhciByZXN1bHQgPSBjb25maXJtKCfQktGLINC00LXQudGB0YLQstC40YLQtdC70YzQvdC+INGF0L7RgtC40YLQtSDRg9C00LDQu9C40YLRjCDQt9Cw0L/QuNGB0Yw/Jyk7XHJcbiAgICAgIGlmIChyZXN1bHQpIHtcclxuXHQgICAgICByZW1vdmVQb3N0QnlJZChpZCkudGhlbigocmVzKSA9PiB7XHJcblx0ICAgICAgXHRpZihyZXMuZGF0YS5zdWNjZXNzKSB7XHJcblx0ICAgICAgXHRcdCQoJy5wb3N0LScgKyBpZCkuaGlkZSg1MDApO1xyXG5cdCAgICAgIFx0fVxyXG5cdCAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICBcdGhhbmRsZUxpa2UocG9zdElELCB1c2VySUQpIHtcclxuICAgIFx0c2V0TGlrZUJ5SWQodGhpcy50b2tlbiwgcG9zdElEKS50aGVuKChyZXMpID0+IHtcclxuICAgICAgXHRpZihyZXMuZGF0YS5zdWNjZXNzKSB7XHJcblx0ICAgICAgICBcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0ICAgICAgIFx0Li4udGhpcy5zdGF0ZS5wb3N0LFxyXG5cdFx0ICAgICAgIFx0aXNMaWtlZDogIXRoaXMuc3RhdGUuaXNMaWtlZCxcclxuXHRcdCAgICAgICBcdGxpa2VDb3VudGVyOiByZXMuZGF0YS5jb3VudGVyXHJcblx0ICAgICAgICB9KVxyXG4gICAgICBcdH0gZWxzZSB7XHJcbiAgICAgIFx0XHRjb25zb2xlLmxvZyhyZXMuZGF0YSlcclxuICAgICAgXHR9XHJcbiAgICBcdH0pXHJcbiAgXHR9XHJcblxyXG4gIFx0aGFuZGxlSW1hZ2UodG9rZW4sIGltYWdlKSB7XHJcblx0ICAgdXBsb2FkSW1hZ2UodG9rZW4sIGltYWdlKS50aGVuKChyZXMpID0+IHtcclxuXHQgICBcdGlmKHJlcy5wYXRoICYmIHJlcy5zdWNjZXNzKSB7XHJcblx0ICAgXHRcdHRoaXMuY2hhbmdlRmllbGQocmVzLnBhdGgsICdwb3N0SW1hZ2UnKTtcclxuXHQgICBcdH1cclxuXHQgICB9KVxyXG4gICB9XHJcblxyXG4gIFx0aGFuZGxlU2F2ZSh0b2tlbiwgaWQsIGRhdGEpIHtcclxuICBcdFx0cG9zdFVwZGF0ZSh0b2tlbiwgaWQsIGRhdGEpLnRoZW4oKHJlcykgPT4ge1xyXG4gIFx0XHRcdGlmKHJlcy5kYXRhLnN1Y2Nlc3MpIHtcclxuICBcdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdCAgXHRcdFx0XHRpc0VkaXRpbmc6IGZhbHNlXHJcblx0ICBcdFx0XHR9KVxyXG4gIFx0XHRcdH1cclxuICBcdFx0fSlcclxuICBcdH1cclxuXHJcbiAgXHRoYW5kbGVWaWRlbyh1cmwpIHtcclxuXHQgICB2YXIgaWQgPSBnZXRZb3VUdWJlSWQodXJsKVxyXG5cdCAgXHR0aGlzLmNoYW5nZUZpZWxkKGlkLCAncG9zdFZpZGVvJylcclxuICAgfVxyXG5cclxuICAgLy8gSXNvbW9ycGhpYyBNZXRob2RzXHJcblxyXG4gICBjaGFuZ2VGaWVsZCh2YWx1ZSwgdGFyZ2V0KSB7XHJcbiAgIFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgIFx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHQgICBcdFx0cG9zdDoge1xyXG5cdCAgIFx0XHRcdC4uLnRoaXMuc3RhdGUucG9zdCxcclxuXHQgICBcdFx0XHRbdGFyZ2V0XTogdmFsdWVcclxuXHQgICBcdFx0fVxyXG5cdCAgIFx0fSlcclxuXHQgICBcdHJlc29sdmUodHJ1ZSlcclxuICAgXHR9KVxyXG4gICB9XHJcblxyXG4gICByZW1vdmVGaWVsZChmaWVsZCkge1xyXG4gIFx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0cG9zdDoge1xyXG5cdFx0XHRcdC4uLnRoaXMuc3RhdGUucG9zdCxcclxuXHRcdFx0XHRbZmllbGRdOiBudWxsXHJcblx0XHRcdH1cclxuXHRcdH0pXHJcbiAgXHR9XHJcblxyXG4gICByZW5kZXIoKSB7XHJcbiAgICBcdHZhciBwb3N0ID0gdGhpcy5zdGF0ZS5wb3N0O1xyXG5cdFx0aWYgKHBvc3QpIHtcclxuXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHQ8YXJ0aWNsZSBjbGFzc05hbWU9e2BhcnRpY2xlIGJsb2NrLWl0ZW0gbm90ZSBwcmV2aWV3IHBvc3QtJHtwb3N0Ll9pZH1gfT5cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwidXNlclwiPiBcclxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJsZWZ0XCI+XHJcblx0XHRcdFx0XHRcdFx0eyhwb3N0LnBvc3RBdXRob3IuYXV0aG9yVHlwZSA9PSAndXNlcicpID9cclxuXHRcdFx0XHRcdCAgICAgICAgIDxVc2VyIGlkPXtwb3N0LnBvc3RBdXRob3IuYXV0aG9ySUR9IC8+IDogPEJsb2cgaWQ9e3Bvc3QucG9zdEF1dGhvci5hdXRob3JJRH0gLz5cclxuXHRcdFx0XHRcdCAgICAgIH1cclxuXHRcdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyaWdodFwiPlxyXG5cdFx0XHRcdCAgICAgICAgXHQ8ZGl2IGNsYXNzTmFtZT1cInVpIGRyb3Bkb3duXCI+XHJcblx0XHRcdFx0XHRcdFx0XHQ8aSBjbGFzc05hbWU9XCJmYSBmYS1lbGxpcHNpcy1oXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG5cdFx0XHRcdFx0XHRcdFx0ICA8ZGl2IGNsYXNzTmFtZT1cIm1lbnVcIj5cclxuXHRcdFx0XHRcdFx0XHRcdCAgXHQgPGRpdiBjbGFzc05hbWU9XCJpdGVtXCIgb25DbGljaz17KCkgPT4ge3RoaXMuc2V0U3RhdGUoe2lzRWRpdGluZzogdHJ1ZX0pfX0+0KDQtdC00LDQutGC0LjRgNC+0LLQsNGC0Yw8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdCAgXHQgPGRpdiBjbGFzc05hbWU9XCJpdGVtXCIgb25DbGljaz17KCkgPT4ge2NvbnNvbGUubG9nKCcqbW9kYWwnKX19PtCf0L7QttCw0LvQvtCy0LDRgtGM0YHRjzwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0ICAgIDxkaXYgY2xhc3NOYW1lPVwiaXRlbVwiIG9uQ2xpY2s9eygpID0+IHt0aGlzLmhhbmRsZVJlbW92ZShwb3N0Ll9pZCl9fT7Qo9C00LDQu9C40YLRjDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdCAgICAgICAgIDwvZGl2PlxyXG5cdFx0XHRcdCAgIDwvZGl2PlxyXG5cdFx0XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lZGlhXCI+XHJcblx0XHRcdCAgICAgICAgXHQ8SW1hZ2UgXHJcblx0XHRcdCAgICAgICAgXHRcdHVybD17cG9zdC5wb3N0SW1hZ2V9XHJcblx0XHRcdCAgICAgICAgXHRcdGlzRWRpdGluZz17dGhpcy5zdGF0ZS5pc0VkaXRpbmd9XHJcblx0XHRcdCAgICAgICAgXHRcdG9uUmVtb3ZlPXsoZmllbGQpID0+IHt0aGlzLnJlbW92ZUZpZWxkKGZpZWxkKX19XHJcblx0XHRcdCAgICAgICAgXHQvPlxyXG5cdFx0XHQgICAgICAgIFx0PFZpZGVvIFxyXG5cdFx0XHQgICAgICAgIFx0XHRpZD17cG9zdC5wb3N0VmlkZW99XHJcblx0XHRcdCAgICAgICAgXHRcdGlzRWRpdGluZz17dGhpcy5zdGF0ZS5pc0VkaXRpbmd9XHJcblx0XHRcdCAgICAgICAgXHRcdG9uUmVtb3ZlPXsoZmllbGQpID0+IHt0aGlzLnJlbW92ZUZpZWxkKGZpZWxkKX19XHJcblx0XHRcdCAgICAgICAgXHQvPlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50XCI+XHJcblx0XHRcdCAgICAgICAgXHQgPENvbnRlbnQgXHJcblx0XHRcdCAgICAgICAgXHQgXHR0ZXh0PXtwb3N0LnBvc3RDb250ZW50fSBcclxuXHRcdFx0ICAgICAgICBcdCBcdGlzRWRpdGluZz17dGhpcy5zdGF0ZS5pc0VkaXRpbmd9XHJcblx0XHRcdCAgICAgICAgXHQgXHRvbkNoYW5nZT17KHZhbHVlKSA9PiB7dGhpcy5oYW5kbGVUeXBpbmcodmFsdWUpfX1cclxuXHRcdFx0ICAgICAgICBcdCAvPlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJsaW5rXCI+XHJcblx0XHRcdCAgICAgIFx0PFVybCBcclxuXHRcdFx0ICAgICAgXHRcdGxpbms9e3Bvc3QucG9zdExpbmt9XHJcblx0XHRcdCAgICAgIFx0XHRpc0VkaXRpbmc9e3RoaXMuc3RhdGUuaXNFZGl0aW5nfVxyXG5cdFx0XHQgICAgICBcdFx0b25SZW1vdmU9eyhmaWVsZCkgPT4ge3RoaXMucmVtb3ZlRmllbGQoZmllbGQpfX1cclxuXHRcdFx0ICAgICAgXHRcdG9uQ2hhbmdlPXsodmFsdWUsIHRhcmdldCkgPT4ge3RoaXMuY2hhbmdlRmllbGQodmFsdWUsIHRhcmdldCl9fVxyXG5cdFx0XHQgICAgICBcdC8+XHJcblx0XHRcdCAgICAgIDwvZGl2PlxyXG5cdFx0XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1ldGFcIj5cclxuXHRcdFx0ICAgICAgICBcdDxkaXYgY2xhc3NOYW1lPVwibGVmdFwiPlxyXG5cdFx0XHRcdCAgICAgICAgXHQ8QWN0aW9uQmFyIFxyXG5cdFx0XHRcdCAgICAgICAgXHRcdHBvc3Q9e3Bvc3R9XHJcblx0XHRcdFx0ICAgICAgICBcdFx0aXNMaWtlZD17dGhpcy5zdGF0ZS5pc0xpa2VkfVxyXG5cdFx0XHRcdCAgICAgICAgXHRcdGxpa2VDb3VudGVyPXt0aGlzLnN0YXRlLmxpa2VDb3VudGVyfVxyXG5cdFx0XHRcdCAgICAgICAgXHRcdGlzRWRpdGluZz17dGhpcy5zdGF0ZS5pc0VkaXRpbmd9XHJcblx0XHRcdFx0ICAgICAgICBcdFx0b25DYW5jZWw9eygpID0+IHt0aGlzLnNldFN0YXRlKHtpc0VkaXRpbmc6IGZhbHNlLCBwb3N0OiB0aGlzLnByb3BzLnBvc3R9KX19XHJcblx0XHRcdFx0ICAgICAgICBcdFx0b25MaWtlPXsoKSA9PiB7dGhpcy5oYW5kbGVMaWtlKHBvc3QuX2lkLCB0aGlzLnByb3BzLmN1cnJlbnRVc2VyLl9pZCl9fVxyXG5cdFx0XHRcdCAgICAgICAgXHRcdG9uU2F2ZT17KCkgPT4ge3RoaXMuaGFuZGxlU2F2ZSh0aGlzLnRva2VuLCBwb3N0Ll9pZCwgdGhpcy5zdGF0ZS5wb3N0KX19XHJcblx0XHRcdFx0ICAgICAgICBcdFx0b25VcGxvYWQ9eyhmaWxlKSA9PiB7dGhpcy5oYW5kbGVJbWFnZSh0aGlzLnRva2VuLCBmaWxlKX19XHJcblx0XHRcdFx0ICAgICAgICBcdFx0b25WaWRlbz17KHVybCkgPT4ge3RoaXMuaGFuZGxlVmlkZW8odXJsKX19XHJcblx0XHRcdFx0ICAgICAgICBcdFx0b25Db21tZW50PXsoKSA9PiB7dGhpcy5zZXRTdGF0ZSh7aXNDb21tZW50c1JldmVhbGVkOiAhdGhpcy5zdGF0ZS5pc0NvbW1lbnRzUmV2ZWFsZWR9KX19XHJcblx0XHRcdFx0ICAgICAgICBcdC8+XHJcblx0XHRcdFx0ICAgICAgPC9kaXY+XHJcblx0XHRcdCAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmlnaHRcIj5cclxuXHRcdFx0ICAgICAgICBcdFx0PHNwYW4gY2xhc3NOYW1lPVwidGltZVwiPlxyXG5cdFx0XHQgICAgICAgIFx0XHRcdDxUaW1lQWdvIGRhdGV0aW1lPXtwb3N0LnVwZGF0ZWR9IGxvY2FsZT0ncnUnIC8+XHJcblx0XHRcdCAgICAgICAgXHRcdDwvc3Bhbj5cclxuXHRcdCAgICAgICAgXHRcdDwvZGl2PlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21tZW50c1wiPlxyXG5cdFx0XHQgICAgICBcdDxDb21tZW50cyBcclxuXHRcdFx0ICAgICAgXHRcdGNvbW1lbnRzPXtwb3N0LnBvc3RDb21tZW50c31cclxuXHRcdFx0ICAgICAgXHRcdHBvc3RJRD17cG9zdC5faWR9XHJcblx0XHRcdCAgICAgIFx0XHRpc1JldmVhbGVkPXt0aGlzLnN0YXRlLmlzQ29tbWVudHNSZXZlYWxlZH1cclxuXHRcdFx0ICAgICAgXHQvPlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgPHN0eWxlIGpzeD57YFxyXG5cdFx0XHQgICAgICAgICAubm90ZSAudXNlcixcclxuXHRcdFx0ICAgICAgICAgLm5vdGUgLm1ldGEge1xyXG5cdFx0XHQgICAgICAgICAgXHRkaXNwbGF5OmZsZXg7XHJcblx0XHRcdCAgICAgICAgICBcdGFsaWduLWl0ZW1zOmNlbnRlcjtcclxuXHRcdFx0ICAgICAgICAgIFx0anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47XHJcblx0XHRcdCAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAgLm5vdGUgLm1ldGEge1xyXG5cdFx0XHQgICAgICAgICAgXHRtYXJnaW4tdG9wOjE1cHg7XHJcblx0XHRcdCAgICAgICAgICBcdHBhZGRpbmctdG9wOjE1cHg7XHJcblx0XHRcdCAgICAgICAgICBcdGJvcmRlci10b3A6MXB4IHNvbGlkICNlZWU7XHJcblx0XHRcdCAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAgLm5vdGUgLm1lZGlhIHtcclxuXHRcdFx0ICAgICAgICAgXHRtYXJnaW4tdG9wOjEwcHg7XHJcblx0XHRcdCAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAgLm5vdGUgLnVzZXIgLmRyb3Bkb3duIGkge1xyXG5cdFx0XHQgICAgICAgICBcdGNvbG9yOiNjMGMwYzA7XHJcblx0XHRcdCAgICAgICAgICBcdGZvbnQtc2l6ZToxNnB4O1xyXG5cdFx0XHQgICAgICAgICAgXHR0cmFuc2l0aW9uOjAuMnMgYWxsIGVhc2U7XHJcblx0XHRcdCAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAgLm5vdGUgLnVzZXIgLmRyb3Bkb3duIGk6aG92ZXIge1xyXG5cdFx0XHQgICAgICAgICAgXHRjb2xvcjojMDAwO1xyXG5cdFx0XHQgICAgICAgICB9XHJcblx0XHRcdCAgICAgICAgIC5ub3RlIC51c2VyIC5kcm9wZG93biAubWVudSB7XHJcblx0XHRcdCAgICAgICAgICBcdGxlZnQ6YXV0byFpbXBvcnRhbnQ7XHJcblx0XHRcdCAgICAgICAgICBcdHJpZ2h0Oi0xNXB4IWltcG9ydGFudDtcclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICAubm90ZSAubWV0YSAudGltZSB7XHJcblx0XHRcdFx0XHRcdFx0Y29sb3I6I2MwYzBjMDtcclxuXHRcdFx0XHRcdFx0XHRmb250LXNpemU6MTNweDtcclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICAubm90ZSAuY29udGVudCB7XHJcblx0XHRcdCAgICAgICAgICBcdHdvcmQtd3JhcDogYnJlYWstd29yZDtcclxuXHRcdFx0XHRcdFx0XHRvdmVyZmxvdy13cmFwOiBicmVhay13b3JkO1xyXG5cdFx0XHRcdFx0XHRcdG1hcmdpbjoxNXB4IDBweDtcclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICAubm90ZSBwLnByaW1hcnkge1xyXG5cdFx0XHQgICAgICAgICAgXHRmb250LXNpemU6MTdweDtcclxuXHRcdFx0ICAgICAgICAgIFx0Y29sb3I6IzMzMztcclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICBgfTwvc3R5bGU+XHJcblx0XHQgICBcdDwvYXJ0aWNsZT5cclxuXHRcdFx0KVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIDxCbGFuayAvPlxyXG5cdFx0fVxyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgVmlkZW8gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG5cdCAgIHN1cGVyKHByb3BzKTtcclxuICAgfVxyXG5cclxuICAgcmVuZGVyKCkge1xyXG4gICBcdGlmKHRoaXMucHJvcHMuaWQpIHtcclxuICAgXHRcdGlmKHRoaXMucHJvcHMuaXNFZGl0aW5nKSB7XHJcbiAgIFx0XHRcdHJldHVybiAoXHJcblx0XHRcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlkZW9cIj5cclxuXHRcdFx0ICAgICAgXHQ8aWZyYW1lIFxyXG5cdFx0XHRcdCAgICAgIFx0d2lkdGg9XCIxMDAlXCIgXHJcblx0XHRcdFx0ICAgICAgXHRoZWlnaHQ9XCIzMTVcIiBcclxuXHRcdFx0XHQgICAgICBcdHNyYz17YGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyR7dGhpcy5wcm9wcy5pZH1gfSBcclxuXHRcdFx0XHQgICAgICBcdGZyYW1lQm9yZGVyPVwiMFwiIFxyXG5cdFx0XHRcdCAgICAgIFx0YWxsb3dGdWxsU2NyZWVuPXt0cnVlfT5cclxuXHRcdFx0XHQgICAgICA8L2lmcmFtZT5cclxuXHRcdFx0XHQgICAgICA8aSBvbkNsaWNrPXsoKSA9PiB7dGhpcy5wcm9wcy5vblJlbW92ZSgncG9zdFZpZGVvJyl9fSBcclxuXHRcdFx0XHQgICAgICBcdGNsYXNzTmFtZT1cImZhIGZhLWNsb3NlXCI+XHJcblx0XHRcdFx0ICAgICAgPC9pPlxyXG5cdFx0XHRcdCAgICAgIDxzdHlsZSBqc3g+e2BcclxuXHRcdFx0XHRcdFx0XHQudmlkZW8ge1xyXG5cdFx0XHRcdFx0XHRcdFx0cG9zaXRpb246cmVsYXRpdmU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdC52aWRlbyBpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHBvc2l0aW9uOmFic29sdXRlO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmlnaHQ6MHB4O1xyXG5cdFx0XHRcdFx0XHRcdFx0dG9wOjBweDtcclxuXHRcdFx0XHRcdFx0XHRcdHBhZGRpbmc6MjBweDtcclxuXHRcdFx0XHRcdFx0XHRcdG9wYWNpdHk6MC41O1xyXG5cdFx0XHRcdFx0XHRcdFx0Zm9udC1zaXplOjE3cHg7XHJcblx0XHRcdFx0XHRcdFx0XHR0cmFuc2l0aW9uOjAuMnMgYWxsIGVhc2U7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdC52aWRlbyBpOmhvdmVyIHtcclxuXHRcdFx0XHRcdFx0XHRcdG9wYWNpdHk6MTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0ICAgICAgYH08L3N0eWxlPlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgKVxyXG4gICBcdFx0fSBlbHNlIHtcclxuICAgXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0ICAgICAgPGlmcmFtZSBcclxuXHRcdFx0ICAgICAgXHR3aWR0aD1cIjEwMCVcIiBcclxuXHRcdFx0ICAgICAgXHRoZWlnaHQ9XCIzMTVcIiBcclxuXHRcdFx0ICAgICAgXHRzcmM9e2BodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8ke3RoaXMucHJvcHMuaWR9YH0gXHJcblx0XHRcdCAgICAgIFx0ZnJhbWVCb3JkZXI9XCIwXCIgXHJcblx0XHRcdCAgICAgIFx0YWxsb3dGdWxsU2NyZWVuPXt0cnVlfT5cclxuXHRcdFx0ICAgICAgPC9pZnJhbWU+XHJcblx0XHRcdCAgIClcclxuICAgXHRcdH1cclxuICAgXHR9IGVsc2Uge1xyXG4gICBcdFx0cmV0dXJuIG51bGxcclxuICAgXHR9XHJcbiAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIFVybCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcblx0ICAgc3VwZXIocHJvcHMpO1xyXG4gICB9XHJcblxyXG4gICByZW5kZXIoKSB7XHJcbiAgIFx0aWYodGhpcy5wcm9wcy5saW5rKSB7XHJcblx0XHQgIFx0aWYodGhpcy5wcm9wcy5pc0VkaXRpbmcpIHtcclxuXHRcdCAgXHRcdHJldHVybiAoXHJcblx0XHRcdCAgXHRcdDxkaXYgY2xhc3NOYW1lPVwibGlua1wiPlxyXG5cdFx0XHQgICAgICAgIFx0PGkgY2xhc3NOYW1lPVwiZmEgZmEtY2xvc2VcIiBvbkNsaWNrPXsoKSA9PiB7dGhpcy5wcm9wcy5vblJlbW92ZSgncG9zdExpbmsnKX19PjwvaT5cclxuXHRcdFx0ICAgICAgICBcdDxpbnB1dCBcclxuXHRcdFx0ICAgICAgICBcdFx0b25DaGFuZ2U9eyhlKSA9PiB7dGhpcy5wcm9wcy5vbkNoYW5nZShlLnRhcmdldC52YWx1ZSwgJ3Bvc3RMaW5rJyl9fSBcclxuXHRcdFx0ICAgICAgICBcdFx0dHlwZT1cInRleHRcIiBcclxuXHRcdFx0ICAgICAgICBcdFx0ZGVmYXVsdFZhbHVlPXt0aGlzLnByb3BzLmxpbmt9IFxyXG5cdFx0XHQgICAgICAgIFx0Lz5cclxuXHRcdFx0ICAgICAgICBcdFxyXG5cdFx0XHQgICAgICAgIFx0PHN0eWxlIGpzeD57YFxyXG5cdFx0XHRcdFx0XHRcdC5saW5rIHtcclxuXHRcdFx0XHQgICAgICAgICAgXHRtYXJnaW4tYm90dG9tOjE1cHg7XHJcblx0XHRcdFx0ICAgICAgICAgIH1cclxuXHRcdFx0XHQgICAgICAgICAubGluayBpLmZhLWNsb3NlIHtcclxuXHRcdFx0XHQgICAgICAgICBcdGN1cnNvaXI6cG9pbnRlcjtcclxuXHRcdFx0XHQgICAgICAgICBcdG1hcmdpbi1yaWdodDoxNXB4O1xyXG5cdFx0XHRcdCAgICAgICAgICBcdG9wYWNpdHk6LjQ7XHJcblx0XHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHRcdCAgICAgICAgIC5saW5rIGlucHV0IHtcclxuXHRcdFx0XHQgICAgICAgICBcdGJvcmRlcjowcHg7XHJcblx0XHRcdFx0ICAgICAgICAgXHRmb250LXNpemU6MTVweDtcclxuXHRcdFx0XHQgICAgICAgICBcdG91dGxpbmU6bm9uZTtcclxuXHRcdFx0XHQgICAgICAgICBcdHBhZGRpbmc6NXB4O1xyXG5cdFx0XHRcdCAgICAgICAgIFx0d2lkdGg6ODAlO1xyXG5cdFx0XHRcdCAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICBcdGB9PC9zdHlsZT5cclxuXHRcdFx0ICAgICAgPC9kaXY+IFxyXG5cdFx0XHQgICApXHJcblx0XHQgIFx0fSBlbHNlIHtcclxuXHRcdCAgXHRcdHJldHVybiAoXHJcblx0XHQgIFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwibGlua1wiIGRhdGEtaW52ZXJ0ZWQ9XCJcIiBcclxuXHRcdFx0ICAgICAgICBcdFx0ZGF0YS10b29sdGlwPVwi0J/RgNC40LrRgNC10L/Qu9C10L3QvdCw0Y8g0YHRgdGL0LvQutCwXCIgXHJcblx0XHRcdCAgICAgICAgXHRcdGRhdGEtcG9zaXRpb249XCJib3R0b20gbGVmdFwiPlxyXG5cdFx0XHQgICAgICAgIFx0PGkgY2xhc3NOYW1lPVwiZmEgZmEtbGlua1wiPjwvaT5cclxuXHRcdFx0ICAgICAgICBcdDxhIGhyZWY9e3RoaXMucHJvcHMubGlua30gdGFyZ2V0PVwiX2JsYW5rXCI+e3RoaXMucHJvcHMubGlua308L2E+XHJcblx0XHRcdCAgICAgICAgXHQ8c3R5bGUganN4PntgXHJcblx0XHRcdFx0XHRcdFx0Lmxpbmsge1xyXG5cdFx0XHRcdCAgICAgICAgICBcdG1hcmdpbi1ib3R0b206MTVweDtcclxuXHRcdFx0XHQgICAgICAgICAgfVxyXG5cdFx0XHRcdCAgICAgICAgIC5saW5rIGkge1xyXG5cdFx0XHRcdCAgICAgICAgICBcdG1hcmdpbi1yaWdodDoxNXB4O1xyXG5cdFx0XHRcdCAgICAgICAgICBcdG9wYWNpdHk6LjQ7XHJcblx0XHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgIFx0YH08L3N0eWxlPlxyXG5cdFx0XHQgICAgICA8L2Rpdj4gXHJcblx0XHQgIFx0XHQpXHJcblx0XHQgIFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIG51bGxcclxuXHRcdH1cclxuICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmNsYXNzIENvbnRlbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG5cdCAgIHN1cGVyKHByb3BzKTtcclxuICAgfVxyXG5cclxuICBcdHJlbmRlcigpIHtcclxuICBcdFx0aWYodGhpcy5wcm9wcy5pc0VkaXRpbmcpIHtcclxuICBcdFx0XHRyZXR1cm4gKFxyXG4gIFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJlZGl0b3JcIj5cclxuICBcdFx0XHRcdFx0PHRleHRhcmVhIFxyXG5cdCAgXHRcdFx0XHRcdG9uQ2hhbmdlPXsoZSkgPT4ge3RoaXMucHJvcHMub25DaGFuZ2UoZS50YXJnZXQudmFsdWUpfX0gXHJcblx0ICBcdFx0XHRcdFx0Y29scz1cIjRcIiBcclxuXHQgIFx0XHRcdFx0XHRkZWZhdWx0VmFsdWU9e3RoaXMucHJvcHMudGV4dH0gXHJcblx0ICBcdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCLQktCw0Ygg0YLQtdC60YHRgi4uXCJcclxuXHQgIFx0XHRcdFx0XHRtYXhMZW5ndGg9XCIxNDBcIj5cclxuICBcdFx0XHRcdFx0PC90ZXh0YXJlYT5cclxuICBcdFx0XHRcdFx0PHN0eWxlIGpzeD57YFxyXG5cdFx0XHRcdFx0XHQuZWRpdG9yIHRleHRhcmVhIHtcclxuXHRcdFx0XHRcdFx0XHR3aWR0aDoxMDAlO1xyXG5cdFx0XHRcdFx0XHRcdGJvcmRlcjoxcHggc29saWQgI2VlZTtcclxuXHRcdFx0XHRcdFx0XHRwYWRkaW5nOjE0cHg7XHJcblx0XHRcdFx0XHRcdFx0Zm9udC1zaXplOjE2cHg7XHJcblx0XHRcdFx0XHRcdFx0b3V0bGluZTpub25lO1xyXG5cdFx0XHRcdFx0XHRcdGJvcmRlci1yYWRpdXM6NHB4O1xyXG5cdFx0XHRcdFx0XHR9XHJcbiAgXHRcdFx0XHRcdGB9PC9zdHlsZT5cclxuICBcdFx0XHRcdDwvZGl2PlxyXG4gIFx0XHRcdClcclxuICBcdFx0fSBlbHNlIHtcclxuXHQgIFx0XHRyZXR1cm4gKFxyXG5cdFx0ICAgIFx0PGRpdiBjbGFzc05hbWU9XCJ0ZXh0XCI+XHJcblx0XHRcdCAgICAgIDxwIGNsYXNzTmFtZT1cInByaW1hcnlcIj5cclxuXHRcdFx0ICAgICAgXHR7dGhpcy5wcm9wcy50ZXh0fVxyXG5cdFx0XHQgICAgICA8L3A+XHJcblx0XHQgICAgICA8L2Rpdj5cclxuXHQgICBcdCk7XHJcbiAgXHRcdH1cclxuICAgfVxyXG59XHJcblxyXG5jbGFzcyBJbWFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcblx0ICAgc3VwZXIocHJvcHMpO1xyXG4gICB9XHJcblxyXG4gIFx0cmVuZGVyKCkge1xyXG4gIFx0XHRpZih0aGlzLnByb3BzLnVybCkge1xyXG5cdCAgXHRcdGlmKHRoaXMucHJvcHMuaXNFZGl0aW5nKSB7XHJcblx0ICBcdFx0XHRyZXR1cm4gKFxyXG5cdCAgXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImVkaXRvclwiPlxyXG5cdCAgXHRcdFx0XHRcdDxCbHVySW1hZ2VMb2FkZXIgc3JjPXt0aGlzLnByb3BzLnVybH1cclxuXHRcdCAgICAgICAgICAgICAgIGZ1bGxDb3Zlcj17dHJ1ZX1cclxuXHRcdCAgICAgICAgICAgICAgIG1heEJsdXJMZXZlbD17MTB9XHJcblx0XHQgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltZT17NDAwfVxyXG5cdFx0ICAgICAgICAgICAgICAgbG9hZGVyPXs8TG9hZGVyIC8+fVxyXG5cdFx0ICAgICAgICAgICAgLz5cclxuXHQgIFx0XHRcdFx0XHQ8aSBjbGFzc05hbWU9XCJmYSBmYS1jbG9zZVwiIG9uQ2xpY2s9eygpID0+IHt0aGlzLnByb3BzLm9uUmVtb3ZlKCdwb3N0SW1hZ2UnKX19PjwvaT5cclxuXHQgIFx0XHRcdFx0XHQ8c3R5bGUganN4PntgXHJcblx0ICBcdFx0XHRcdFx0XHQuZWRpdG9yIHtcclxuXHQgIFx0XHRcdFx0XHRcdFx0cG9zaXRpb246cmVsYXRpdmU7XHJcblx0ICBcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0LmVkaXRvciBpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHBvc2l0aW9uOmFic29sdXRlO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmlnaHQ6MHB4O1xyXG5cdFx0XHRcdFx0XHRcdFx0dG9wOjBweDtcclxuXHRcdFx0XHRcdFx0XHRcdHBhZGRpbmc6MjBweDtcclxuXHRcdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZToxN3B4O1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29sb3I6IzAwMDtcclxuXHRcdFx0XHRcdFx0XHRcdG9wYWNpdHk6MC41O1xyXG5cdFx0XHRcdFx0XHRcdFx0dHJhbnNpdGlvbjowLjJzIGFsbCBlYXNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0Y3Vyc29yOnBvaW50ZXI7XHJcblx0XHRcdFx0XHRcdFx0XHR6LWluZGV4Ojk5OTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0LmVkaXRvciBpOmhvdmVyIHtcclxuXHRcdFx0XHRcdFx0XHRcdG9wYWNpdHk6MS4wO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHQgIFx0XHRcdFx0XHRgfTwvc3R5bGU+XHJcblx0ICBcdFx0XHRcdDwvZGl2PlxyXG5cdCAgXHRcdFx0KVxyXG5cdCAgXHRcdH0gZWxzZSB7XHJcblx0XHQgIFx0XHRyZXR1cm4gKFxyXG5cdFx0XHQgICAgXHQ8ZGl2IGNsYXNzTmFtZT1cImltYWdlXCI+XHJcblx0XHRcdCAgICAgIFx0PEJsdXJJbWFnZUxvYWRlciBzcmM9e3RoaXMucHJvcHMudXJsfVxyXG5cdFx0ICAgICAgICAgICAgICAgZnVsbENvdmVyPXt0cnVlfVxyXG5cdFx0ICAgICAgICAgICAgICAgbWF4Qmx1ckxldmVsPXsxMH1cclxuXHRcdCAgICAgICAgICAgICAgIHRyYW5zaXRpb25UaW1lPXs0MDB9XHJcblx0XHQgICAgICAgICAgICAgICBsb2FkZXI9ezxMb2FkZXIgLz59XHJcblx0XHQgICAgICAgICAgICAvPlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdCAgIFx0KTtcclxuXHQgIFx0XHR9XHJcblx0ICBcdH0gZWxzZSB7XHJcblx0ICBcdFx0cmV0dXJuIG51bGxcclxuXHQgIFx0fVxyXG4gICB9XHJcbn1cclxuXHJcblxyXG5jbGFzcyBBY3Rpb25CYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG5cdCAgIHN1cGVyKHByb3BzKTtcclxuICAgfVxyXG5cclxuICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgIFx0VUkoKVxyXG4gICB9XHJcblxyXG4gICBvblZpZGVvKGUsIHZhbHVlKSB7XHJcbiAgICAgIGlmKGUua2V5Q29kZSA9PSAxMykge1xyXG4gICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgIHRoaXMucHJvcHMub25WaWRlbyh2YWx1ZSlcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gIFx0cmVuZGVyKCkge1xyXG4gIFx0XHR2YXIgcG9zdCA9IHRoaXMucHJvcHMucG9zdDtcclxuICBcdFx0aWYgKHBvc3QpIHtcclxuXHRcdCAgXHRpZiAodGhpcy5wcm9wcy5pc0VkaXRpbmcpIHtcclxuXHRcdCAgIFx0cmV0dXJuIChcclxuXHRcdFx0ICAgICAgPGRpdj5cclxuXHRcdCAgICAgICAgXHRcdDxzcGFuIG9uQ2xpY2s9eygpID0+IHt0aGlzLnByb3BzLm9uU2F2ZShwb3N0KX19IGNsYXNzTmFtZT1cInVpIGJ1dHRvbiBzbWFsbCBjaXJjdWxhciBwcmltYXJ5XCI+0KHQvtGF0YDQsNC90LjRgtGMPC9zcGFuPlxyXG5cdFx0ICAgICAgICBcdFx0PHNwYW4gb25DbGljaz17KCkgPT4ge3RoaXMucHJvcHMub25DYW5jZWwoKX19IGNsYXNzTmFtZT1cInVpIGJ1dHRvbiBzbWFsbCBjaXJjdWxhciBkZWZhdWx0XCI+0J7RgtC80LXQvdCwPC9zcGFuPlxyXG5cdFx0ICAgICAgXHQgICB7KCFwb3N0LnBvc3RJbWFnZSBcclxuXHRcdCAgICAgIFx0ICAgXHQmJiAhcG9zdC5wb3N0VmlkZW8pIFxyXG5cdFx0ICAgICAgXHQgICBcdCYmXHJcblx0XHRcdCAgICAgICAgICAgIDxzcGFuPlxyXG5cdFx0XHRcdCAgICAgICAgICAgIDxzcGFuIFxyXG5cdFx0XHRcdFx0ICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge3RoaXMuaW1hZ2UuY2xpY2soKX19IFxyXG5cdFx0XHRcdFx0ICAgICAgICAgICAgY2xhc3NOYW1lPVwidWkgYnV0dG9uIGljb24gY2lyY3VsYXIgc21hbGwgYmFzaWNcIj5cclxuXHRcdFx0XHQgICAgICAgICAgICBcdDxpIGNsYXNzTmFtZT1cImZhIGZhLWltYWdlXCI+PC9pPlxyXG5cdFx0XHRcdCAgICAgICAgICAgIDwvc3Bhbj5cclxuXHRcdFx0XHQgICAgICAgICBcdDxpbnB1dCBcclxuXHRcdFx0ICBcdFx0XHRcdFx0XHRyZWY9eyhlKSA9PiB7dGhpcy5pbWFnZSA9IGV9fVxyXG5cdFx0XHRcdCAgXHRcdFx0XHRcdHR5cGU9XCJmaWxlXCIgXHJcblx0XHRcdFx0ICBcdFx0XHRcdFx0Y2xhc3NOYW1lPVwidWkgaGlkZGVuXCIgXHJcblx0XHRcdFx0ICBcdFx0XHRcdFx0b25DaGFuZ2U9eyhlKSA9PiB7dGhpcy5wcm9wcy5vblVwbG9hZChlLnRhcmdldC5maWxlc1swXSl9fSBcclxuXHRcdFx0ICBcdFx0XHRcdFx0Lz5cclxuXHRcdCAgXHRcdFx0XHRcdDwvc3Bhbj5cclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICB7KCFwb3N0LnBvc3RWaWRlbyBcclxuXHRcdFx0ICAgICAgICAgXHQmJiAhcG9zdC5wb3N0SW1hZ2UpICYmXHJcblx0XHRcdCAgICAgICAgICAgIDxzcGFuPlxyXG5cdFx0XHRcdCAgICAgICAgICAgIDxzcGFuIFxyXG5cdFx0XHRcdCAgICAgICAgICAgIFx0b25DbGljaz17KCkgPT4geyQoJy51aS52aWRlby5idXR0b24nKS5wb3B1cCh7cG9wdXA6ICcudWkudmlkZW8ucG9wdXAnLCBvbjogJ2NsaWNrJ30pfX0gXHJcblx0XHRcdFx0ICAgICAgICAgICAgXHRjbGFzc05hbWU9XCJ1aSBidXR0b24gdmlkZW8gaWNvbiBjaXJjdWxhciBzbWFsbCBiYXNpY1wiPlxyXG5cdFx0XHRcdCAgICAgICAgICAgIFx0PGkgY2xhc3NOYW1lPVwiZmEgZmEtdmlkZW8tY2FtZXJhXCI+PC9pPlxyXG5cdFx0XHRcdCAgICAgICAgICAgIDwvc3Bhbj5cclxuXHRcdFx0XHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcHVwIHZpZGVvIHVpXCI+XHJcblx0XHRcdFx0ICAgICAgICAgICAgICAgPGlucHV0IFxyXG5cdFx0XHRcdCAgICAgICAgICAgICAgICBvbktleURvd249eyhlKSA9PiB7dGhpcy5vblZpZGVvKGUsIGUudGFyZ2V0LnZhbHVlKX19XHJcblx0XHRcdFx0ICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCIgXHJcblx0XHRcdFx0ICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi0KHRgdGL0LvQutCwINC90LAg0LLQuNC00LXQviDRgSBZb3VUdWJlXCIgLz5cclxuXHRcdFx0XHQgICAgICAgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgICAgICAgPC9zcGFuPlxyXG5cdFx0XHQgICAgICAgICB9XHJcblx0XHRcdCAgICAgICAgIDxzdHlsZSBqc3g+e2BcclxuXHRcdFx0XHRcdFx0XHQucG9wdXAgaW5wdXQge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ym9yZGVyOjBweDtcclxuXHRcdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZToxN3B4O1xyXG5cdFx0XHRcdFx0XHRcdFx0cGFkZGluZzo1cHg7XHJcblx0XHRcdFx0XHRcdFx0XHRvdXRsaW5lOm5vbmU7XHJcblx0XHRcdFx0XHRcdFx0XHR3aWR0aDozNTBweDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdCAgICAgICAgIGB9PC9zdHlsZT5cclxuXHRcdFx0ICAgICAgPC9kaXY+XHJcblx0XHQgICAgXHQpO1xyXG5cdFx0ICAgfSBlbHNlIHtcclxuXHRcdCAgIFx0cmV0dXJuIChcclxuXHRcdCAgIFx0XHQ8c3Bhbj5cclxuXHRcdFx0ICAgICAgICBcdDxhIG9uQ2xpY2s9eygpID0+IHt0aGlzLnByb3BzLm9uTGlrZSgpfX1cclxuXHRcdCAgICAgICAgXHRcdFx0Y2xhc3NOYW1lPVwiaXRlbVwiPlxyXG5cdFx0XHQgICAgICAgIFx0XHQ8aSBjbGFzc05hbWU9eyh0aGlzLnByb3BzLmlzTGlrZWQpID8gXHJcblx0XHRcdCAgICAgICAgXHRcdFx0YGZhIGZhLWhlYXJ0IGljb25gIDogXHJcblx0XHRcdCAgICAgICAgXHRcdFx0YGZhIGZhLWhlYXJ0LW8gaWNvbmB9PlxyXG5cdFx0XHQgICAgICAgIFx0XHQ8L2k+IHt0aGlzLnByb3BzLmxpa2VDb3VudGVyfSDQnNC90LUg0L3RgNCw0LLQuNGC0YHRj1xyXG5cdFx0XHQgICAgICAgIFx0PC9hPlxyXG5cdFx0XHQgICAgICAgIFx0PGEgb25DbGljaz17KCkgPT4ge3RoaXMucHJvcHMub25Db21tZW50KCl9fSBcclxuXHRcdCAgICAgICAgXHRcdFx0Y2xhc3NOYW1lPVwiaXRlbVwiPlxyXG5cdFx0XHQgICAgICAgIFx0XHQ8aSBjbGFzc05hbWU9XCJmYSBmYS1jb21tZW50LW8gaWNvblwiPjwvaT4g0J7RgdGC0LDQstC40YLRjCDQutC+0LzQvNC10L3RgtCw0YDQuNC5XHJcblx0XHRcdCAgICAgICAgXHQ8L2E+XHJcblx0XHRcdCAgICAgICAgXHQ8c3R5bGUganN4PntgXHJcblx0XHRcdFx0XHRcdFx0Lm5vdGUgLm1ldGEgLmJ1dHRvbi5kZWZhdWx0IHtcclxuXHRcdFx0XHRcdFx0XHRcdGJhY2tncm91bmQ6I2ZhZmFmYTtcclxuXHRcdFx0XHRcdFx0XHRcdHRyYW5zaXRpb246MC4ycyBhbGwgZWFzZTtcclxuXHRcdFx0XHQgICAgICAgIFx0IH1cclxuXHRcdFx0XHQgICAgICAgIFx0IC5ub3RlIC5tZXRhIC5idXR0b24uZGVmYXVsdDpob3ZlciB7XHJcblx0XHRcdFx0ICAgICAgICBcdCBcdGJhY2tncm91bmQ6I2VlZTtcclxuXHRcdFx0XHQgICAgICAgIFx0IH1cclxuXHRcdFx0XHQgICAgICAgIFx0IC5pdGVtIHtcclxuXHRcdFx0XHQgICAgICAgIFx0IFx0Y3Vyc29yOnBvaW50ZXI7XHJcblx0XHRcdFx0ICAgICAgICBcdCBcdGZvbnQtc2l6ZToxNXB4O1xyXG5cdFx0XHRcdCAgICAgICAgXHQgXHRtYXJnaW4tcmlnaHQ6MTVweDtcclxuXHRcdFx0XHQgICAgICAgIFx0IH1cclxuXHRcdFx0XHQgICAgICAgIFx0IC5pdGVtOmxhc3QtY2hpbGQge1xyXG5cdFx0XHRcdCAgICAgICAgXHQgXHRtYXJnaW4tcmlnaHQ6MHB4O1xyXG5cdFx0XHRcdCAgICAgICAgXHQgfVxyXG5cdFx0XHRcdCAgICAgICAgXHQgLmZhLWhlYXJ0IHtcclxuXHRcdFx0XHQgICAgICAgIFx0IFx0Y29sb3I6IzU3YzFiMyFpbXBvcnRhbnQ7XHJcblx0XHRcdFx0ICAgICAgICBcdCB9XHJcblx0XHQgICAgICAgIFx0XHRgfTwvc3R5bGU+XHJcblx0XHQgICAgICAgIFx0PC9zcGFuPlxyXG5cdFx0ICAgXHQpXHJcblx0XHQgICB9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gbnVsbFxyXG5cdFx0fVxyXG4gIFx0fVxyXG59XHJcblxyXG5cclxuXHJcbnZhciBCbGFuayA9ICgpID0+IHtcclxuXHRyZXR1cm4gKFxyXG5cdFx0PGRpdj5cclxuICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1c2VyXCI+XHJcblx0ICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbWFnZVwiPlxyXG5cdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxhbmsgYXZhdGFyXCI+PC9kaXY+XHJcblx0ICAgICAgICAgPC9kaXY+XHJcblx0ICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50XCI+XHJcblx0ICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJibGFuayBzdHJpbmdcIj48L2Rpdj5cclxuXHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJsYW5rIHN0cmluZ1wiPjwvZGl2PlxyXG5cdCAgICAgICAgIDwvZGl2PlxyXG5cdCAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRcIj5cclxuXHQgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJsYW5rIGhlYWRlclwiPjwvZGl2PlxyXG5cdCAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxhbmsgZGVzY3JpcHRpb25cIj48L2Rpdj5cclxuXHQgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJsYW5rIGRlc2NyaXB0aW9uXCI+PC9kaXY+XHJcbiAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICA8c3R5bGUganN4PntgXHJcblx0ICAgICAgICAgLnVzZXIgLmNvbnRlbnQge1xyXG5cdCAgICAgICAgICAgIG1hcmdpbi1sZWZ0OjE1cHg7XHJcblx0ICAgICAgICAgfVxyXG5cdCAgICAgICAgIC51c2VyIHtcclxuXHQgICAgICAgICAgICBkaXNwbGF5OmZsZXg7XHJcblx0ICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246cm93O1xyXG5cdCAgICAgICAgIH1cclxuICAgICAgICAgYH08L3N0eWxlPlxyXG5cdCAgIDwvZGl2PlxyXG5cdClcclxufVxyXG5cclxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XHJcbiAgcmV0dXJuIHsgXHJcbiAgICBjdXJyZW50VXNlcjogc3RhdGUuY3VycmVudFVzZXJcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShOb3RlKVxyXG4iXX0= */\n/*@ sourceURL=components\\isomorphic\\feed\\views\\note.js */'
				}));
			} else {
				return _react2.default.createElement(Blank, {
					__source: {
						fileName: _jsxFileName,
						lineNumber: 281
					}
				});
			}
		}
	}]);

	return Note;
}(_react2.default.Component);

var Video = function (_React$Component2) {
	(0, _inherits3.default)(Video, _React$Component2);

	function Video(props) {
		(0, _classCallCheck3.default)(this, Video);

		return (0, _possibleConstructorReturn3.default)(this, (Video.__proto__ || (0, _getPrototypeOf2.default)(Video)).call(this, props));
	}

	(0, _createClass3.default)(Video, [{
		key: 'render',
		value: function render() {
			var _this9 = this;

			if (this.props.id) {
				if (this.props.isEditing) {
					return _react2.default.createElement('div', { className: 'video', 'data-jsx': 641432510,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 295
						}
					}, _react2.default.createElement('iframe', {
						width: '100%',
						height: '315',
						src: 'https://www.youtube.com/embed/' + this.props.id,
						frameBorder: '0',
						allowFullScreen: true, 'data-jsx': 641432510,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 296
						}
					}), _react2.default.createElement('i', { onClick: function onClick() {
							_this9.props.onRemove('postVideo');
						},
						className: 'fa fa-close', 'data-jsx': 641432510,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 303
						}
					}), _react2.default.createElement(_style2.default, {
						styleId: 641432510,
						css: '.video[data-jsx="641432510"]{position:relative}.video[data-jsx="641432510"] i[data-jsx="641432510"]{position:absolute;right:0px;top:0px;padding:20px;opacity:0.5;font-size:17px;-webkit-transition:0.2s all ease;transition:0.2s all ease}.video[data-jsx="641432510"] i[data-jsx="641432510"]:hover{opacity:1}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\isomorphic\\feed\\views\\note.js */'
					}));
				} else {
					return _react2.default.createElement('iframe', {
						width: '100%',
						height: '315',
						src: 'https://www.youtube.com/embed/' + this.props.id,
						frameBorder: '0',
						allowFullScreen: true, __source: {
							fileName: _jsxFileName,
							lineNumber: 327
						}
					});
				}
			} else {
				return null;
			}
		}
	}]);

	return Video;
}(_react2.default.Component);

var Url = function (_React$Component3) {
	(0, _inherits3.default)(Url, _React$Component3);

	function Url(props) {
		(0, _classCallCheck3.default)(this, Url);

		return (0, _possibleConstructorReturn3.default)(this, (Url.__proto__ || (0, _getPrototypeOf2.default)(Url)).call(this, props));
	}

	(0, _createClass3.default)(Url, [{
		key: 'render',
		value: function render() {
			var _this11 = this;

			if (this.props.link) {
				if (this.props.isEditing) {
					return _react2.default.createElement('div', { className: 'link', 'data-jsx': 2960697051,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 352
						}
					}, _react2.default.createElement('i', { className: 'fa fa-close', onClick: function onClick() {
							_this11.props.onRemove('postLink');
						}, 'data-jsx': 2960697051,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 353
						}
					}), _react2.default.createElement('input', {
						onChange: function onChange(e) {
							_this11.props.onChange(e.target.value, 'postLink');
						},
						type: 'text',
						defaultValue: this.props.link,
						'data-jsx': 2960697051,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 354
						}
					}), _react2.default.createElement(_style2.default, {
						styleId: 2960697051,
						css: '.link[data-jsx="2960697051"]{margin-bottom:15px}.link[data-jsx="2960697051"] i.fa-close[data-jsx="2960697051"]{cursoir:pointer;margin-right:15px;opacity:.4}.link[data-jsx="2960697051"] input[data-jsx="2960697051"]{border:0px;font-size:15px;outline:none;padding:5px;width:80%}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\isomorphic\\feed\\views\\note.js */'
					}));
				} else {
					return _react2.default.createElement('div', { className: 'link', 'data-inverted': '',
						'data-tooltip': '\u041F\u0440\u0438\u043A\u0440\u0435\u043F\u043B\u0435\u043D\u043D\u0430\u044F \u0441\u0441\u044B\u043B\u043A\u0430',
						'data-position': 'bottom left', 'data-jsx': 2711014977,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 381
						}
					}, _react2.default.createElement('i', { className: 'fa fa-link', 'data-jsx': 2711014977,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 384
						}
					}), _react2.default.createElement('a', { href: this.props.link, target: '_blank', 'data-jsx': 2711014977,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 385
						}
					}, this.props.link), _react2.default.createElement(_style2.default, {
						styleId: 2711014977,
						css: '.link[data-jsx="2711014977"]{margin-bottom:15px}.link[data-jsx="2711014977"] i[data-jsx="2711014977"]{margin-right:15px;opacity:.4}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHNcXGlzb21vcnBoaWNcXGZlZWRcXHZpZXdzXFxub3RlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlZd0IsQUFHa0MsQUFDRCxrQkFBMEIsQ0FEVixVQUN3QiIsImZpbGUiOiJjb21wb25lbnRzXFxpc29tb3JwaGljXFxmZWVkXFx2aWV3c1xcbm90ZS5qcyIsInNvdXJjZVJvb3QiOiJFOi93d3cvTGV2ZWx1cC5uYW1lIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0YW50XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjb29raWVzIGZyb20gJ2pzLWNvb2tpZSdcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG5pbXBvcnQgZHluYW1pYyBmcm9tICduZXh0L2R5bmFtaWMnXHJcblxyXG4vLyBBY3Rpb25zXHJcbmltcG9ydCB7IHVwbG9hZEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vYWN0aW9ucy9hcHAuanMnXHJcbmltcG9ydCB7IHNldExpa2VCeUlkLCByZW1vdmVQb3N0QnlJZCwgcG9zdFVwZGF0ZSB9IGZyb20gJy4uLy4uLy4uLy4uL2FjdGlvbnMvcG9zdC5qcydcclxuXHJcbi8vIFV0aWxzIFxyXG5pbXBvcnQgZ2V0WW91VHViZUlkIGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2dldFlvdVR1YmUuanMnIFxyXG5pbXBvcnQgZmluZFVSTCBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9maW5kVVJMLmpzJyBcclxuaW1wb3J0IHsgVUkgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9pbml0U2NyaXB0cy5qcydcclxuXHJcbi8vIENvbXBvbmVudHNcclxuaW1wb3J0IENvbW1lbnRzIGZyb20gJy4uLy4uL2NvbW1lbnRzL2luZGV4LmpzJ1xyXG5pbXBvcnQgVXNlciBmcm9tICcuLi8uLi91c2VyLmpzJ1xyXG5pbXBvcnQgQmxvZyBmcm9tICcuLi8uLi9ibG9nLmpzJ1xyXG5pbXBvcnQgVGltZUFnbyBmcm9tICd0aW1lYWdvLXJlYWN0JztcclxuaW1wb3J0IExpbmsgZnJvbSAnbmV4dC9saW5rJ1xyXG5pbXBvcnQgTG9hZGVyIGZyb20gJy4uLy4uL2xvYWRlci5qcydcclxuXHJcbi8vIER5bmFtaWNzXHJcbnZhciBCbHVySW1hZ2VMb2FkZXIgPSBkeW5hbWljKGltcG9ydCgncmVhY3QtYmx1ci1pbWFnZS1sb2FkZXInKSlcclxuXHJcbmNvbnN0IGRlZmF1bHRTdGF0ZSA9IHtcclxuXHRpc0xpa2VkOiBmYWxzZSxcclxuIFx0bGlrZUNvdW50ZXI6IDAsXHJcbiBcdGlzRWRpdGluZzogZmFsc2UsXHJcbiBcdHBvc3Q6IG51bGwsXHJcbiBcdGlzQ29tbWVudHNSZXZlYWxlZDogZmFsc2VcclxufVxyXG5cclxuY2xhc3MgTm90ZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcblx0ICAgc3VwZXIocHJvcHMpO1xyXG5cdCAgIHRoaXMudG9rZW4gPSBjb29raWVzLmdldCgneC1hY2Nlc3MtdG9rZW4nKVxyXG5cdCAgIHRoaXMuZGlzcGF0Y2ggPSB0aGlzLnByb3BzLmRpc3BhdGNoO1xyXG5cdCAgIHRoaXMuc3RhdGUgPSBkZWZhdWx0U3RhdGU7XHJcbiAgIH1cclxuXHJcbiAgIC8vIFJlYWN0IExpZmVjeWNsZVxyXG4gIFx0Y29tcG9uZW50V2lsbE1vdW50KCkge1xyXG5cdCAgXHRpZih0aGlzLnByb3BzLmN1cnJlbnRVc2VyKSB7XHJcblx0XHQgIFx0aWYodGhpcy5wcm9wcy5wb3N0LnBvc3RMaWtlcy5pbmRleE9mKHRoaXMucHJvcHMuY3VycmVudFVzZXIuX2lkKSAhPSAtMSkge1xyXG5cdFx0ICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdCAgICAgIGlzTGlrZWQ6IHRydWVcclxuXHRcdCAgICAgIH0pXHJcblx0XHQgICB9XHJcblx0XHR9XHRcdFxyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdGxpa2VDb3VudGVyOiB0aGlzLnByb3BzLnBvc3QucG9zdExpa2VzLmxlbmd0aCxcclxuXHRcdFx0cG9zdDogdGhpcy5wcm9wcy5wb3N0XHJcblx0XHR9KVxyXG4gICB9XHJcblxyXG4gICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICBcdGlmKG5leHRQcm9wcy5jdXJyZW50VXNlcikge1xyXG5cdFx0ICBcdGlmKG5leHRQcm9wcy5wb3N0LnBvc3RMaWtlcy5pbmRleE9mKG5leHRQcm9wcy5jdXJyZW50VXNlci5faWQpICE9IC0xKSB7XHJcblx0XHQgICAgICB0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0ICAgICAgaXNMaWtlZDogdHJ1ZVxyXG5cdFx0ICAgICAgfSlcclxuXHRcdCAgIH1cclxuXHRcdH1cdFx0XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0bGlrZUNvdW50ZXI6IG5leHRQcm9wcy5wb3N0LnBvc3RMaWtlcy5sZW5ndGgsXHJcblx0XHRcdHBvc3Q6IG5leHRQcm9wcy5wb3N0XHJcblx0XHR9KVxyXG4gICB9XHJcblxyXG4gICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgXHRVSSgpO1xyXG4gICBcdCQoJy51aS5kcm9wZG93bicpXHJcbiAgIFx0LmRyb3Bkb3duKCk7XHJcbiAgIH1cclxuXHJcbiAgIC8vIFNwZWNpZmljIE1ldGhvZHNcclxuICAgaGFuZGxlVHlwaW5nKHZhbHVlKSB7XHJcbiAgICAgIGlmKGZpbmRVUkwodmFsdWUpLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VGaWVsZCh2YWx1ZSwgJ3Bvc3RDb250ZW50JylcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBcdHRoaXMuY2hhbmdlRmllbGQoZmluZFVSTCh2YWx1ZSlbMF0sICdwb3N0TGluaycpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIFx0XHR0aGlzLmNoYW5nZUZpZWxkKHZhbHVlLCAncG9zdENvbnRlbnQnKVxyXG4gICAgICAgIFx0fSlcclxuICAgICAgfVxyXG4gIFx0fVxyXG5cclxuICAgaGFuZGxlUmVtb3ZlKGlkKSB7XHJcbiAgICAgIHZhciByZXN1bHQgPSBjb25maXJtKCfQktGLINC00LXQudGB0YLQstC40YLQtdC70YzQvdC+INGF0L7RgtC40YLQtSDRg9C00LDQu9C40YLRjCDQt9Cw0L/QuNGB0Yw/Jyk7XHJcbiAgICAgIGlmIChyZXN1bHQpIHtcclxuXHQgICAgICByZW1vdmVQb3N0QnlJZChpZCkudGhlbigocmVzKSA9PiB7XHJcblx0ICAgICAgXHRpZihyZXMuZGF0YS5zdWNjZXNzKSB7XHJcblx0ICAgICAgXHRcdCQoJy5wb3N0LScgKyBpZCkuaGlkZSg1MDApO1xyXG5cdCAgICAgIFx0fVxyXG5cdCAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxuICBcdGhhbmRsZUxpa2UocG9zdElELCB1c2VySUQpIHtcclxuICAgIFx0c2V0TGlrZUJ5SWQodGhpcy50b2tlbiwgcG9zdElEKS50aGVuKChyZXMpID0+IHtcclxuICAgICAgXHRpZihyZXMuZGF0YS5zdWNjZXNzKSB7XHJcblx0ICAgICAgICBcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0ICAgICAgIFx0Li4udGhpcy5zdGF0ZS5wb3N0LFxyXG5cdFx0ICAgICAgIFx0aXNMaWtlZDogIXRoaXMuc3RhdGUuaXNMaWtlZCxcclxuXHRcdCAgICAgICBcdGxpa2VDb3VudGVyOiByZXMuZGF0YS5jb3VudGVyXHJcblx0ICAgICAgICB9KVxyXG4gICAgICBcdH0gZWxzZSB7XHJcbiAgICAgIFx0XHRjb25zb2xlLmxvZyhyZXMuZGF0YSlcclxuICAgICAgXHR9XHJcbiAgICBcdH0pXHJcbiAgXHR9XHJcblxyXG4gIFx0aGFuZGxlSW1hZ2UodG9rZW4sIGltYWdlKSB7XHJcblx0ICAgdXBsb2FkSW1hZ2UodG9rZW4sIGltYWdlKS50aGVuKChyZXMpID0+IHtcclxuXHQgICBcdGlmKHJlcy5wYXRoICYmIHJlcy5zdWNjZXNzKSB7XHJcblx0ICAgXHRcdHRoaXMuY2hhbmdlRmllbGQocmVzLnBhdGgsICdwb3N0SW1hZ2UnKTtcclxuXHQgICBcdH1cclxuXHQgICB9KVxyXG4gICB9XHJcblxyXG4gIFx0aGFuZGxlU2F2ZSh0b2tlbiwgaWQsIGRhdGEpIHtcclxuICBcdFx0cG9zdFVwZGF0ZSh0b2tlbiwgaWQsIGRhdGEpLnRoZW4oKHJlcykgPT4ge1xyXG4gIFx0XHRcdGlmKHJlcy5kYXRhLnN1Y2Nlc3MpIHtcclxuICBcdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdCAgXHRcdFx0XHRpc0VkaXRpbmc6IGZhbHNlXHJcblx0ICBcdFx0XHR9KVxyXG4gIFx0XHRcdH1cclxuICBcdFx0fSlcclxuICBcdH1cclxuXHJcbiAgXHRoYW5kbGVWaWRlbyh1cmwpIHtcclxuXHQgICB2YXIgaWQgPSBnZXRZb3VUdWJlSWQodXJsKVxyXG5cdCAgXHR0aGlzLmNoYW5nZUZpZWxkKGlkLCAncG9zdFZpZGVvJylcclxuICAgfVxyXG5cclxuICAgLy8gSXNvbW9ycGhpYyBNZXRob2RzXHJcblxyXG4gICBjaGFuZ2VGaWVsZCh2YWx1ZSwgdGFyZ2V0KSB7XHJcbiAgIFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgIFx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHQgICBcdFx0cG9zdDoge1xyXG5cdCAgIFx0XHRcdC4uLnRoaXMuc3RhdGUucG9zdCxcclxuXHQgICBcdFx0XHRbdGFyZ2V0XTogdmFsdWVcclxuXHQgICBcdFx0fVxyXG5cdCAgIFx0fSlcclxuXHQgICBcdHJlc29sdmUodHJ1ZSlcclxuICAgXHR9KVxyXG4gICB9XHJcblxyXG4gICByZW1vdmVGaWVsZChmaWVsZCkge1xyXG4gIFx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0cG9zdDoge1xyXG5cdFx0XHRcdC4uLnRoaXMuc3RhdGUucG9zdCxcclxuXHRcdFx0XHRbZmllbGRdOiBudWxsXHJcblx0XHRcdH1cclxuXHRcdH0pXHJcbiAgXHR9XHJcblxyXG4gICByZW5kZXIoKSB7XHJcbiAgICBcdHZhciBwb3N0ID0gdGhpcy5zdGF0ZS5wb3N0O1xyXG5cdFx0aWYgKHBvc3QpIHtcclxuXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHQ8YXJ0aWNsZSBjbGFzc05hbWU9e2BhcnRpY2xlIGJsb2NrLWl0ZW0gbm90ZSBwcmV2aWV3IHBvc3QtJHtwb3N0Ll9pZH1gfT5cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwidXNlclwiPiBcclxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJsZWZ0XCI+XHJcblx0XHRcdFx0XHRcdFx0eyhwb3N0LnBvc3RBdXRob3IuYXV0aG9yVHlwZSA9PSAndXNlcicpID9cclxuXHRcdFx0XHRcdCAgICAgICAgIDxVc2VyIGlkPXtwb3N0LnBvc3RBdXRob3IuYXV0aG9ySUR9IC8+IDogPEJsb2cgaWQ9e3Bvc3QucG9zdEF1dGhvci5hdXRob3JJRH0gLz5cclxuXHRcdFx0XHRcdCAgICAgIH1cclxuXHRcdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyaWdodFwiPlxyXG5cdFx0XHRcdCAgICAgICAgXHQ8ZGl2IGNsYXNzTmFtZT1cInVpIGRyb3Bkb3duXCI+XHJcblx0XHRcdFx0XHRcdFx0XHQ8aSBjbGFzc05hbWU9XCJmYSBmYS1lbGxpcHNpcy1oXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG5cdFx0XHRcdFx0XHRcdFx0ICA8ZGl2IGNsYXNzTmFtZT1cIm1lbnVcIj5cclxuXHRcdFx0XHRcdFx0XHRcdCAgXHQgPGRpdiBjbGFzc05hbWU9XCJpdGVtXCIgb25DbGljaz17KCkgPT4ge3RoaXMuc2V0U3RhdGUoe2lzRWRpdGluZzogdHJ1ZX0pfX0+0KDQtdC00LDQutGC0LjRgNC+0LLQsNGC0Yw8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdCAgXHQgPGRpdiBjbGFzc05hbWU9XCJpdGVtXCIgb25DbGljaz17KCkgPT4ge2NvbnNvbGUubG9nKCcqbW9kYWwnKX19PtCf0L7QttCw0LvQvtCy0LDRgtGM0YHRjzwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0ICAgIDxkaXYgY2xhc3NOYW1lPVwiaXRlbVwiIG9uQ2xpY2s9eygpID0+IHt0aGlzLmhhbmRsZVJlbW92ZShwb3N0Ll9pZCl9fT7Qo9C00LDQu9C40YLRjDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdCAgICAgICAgIDwvZGl2PlxyXG5cdFx0XHRcdCAgIDwvZGl2PlxyXG5cdFx0XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lZGlhXCI+XHJcblx0XHRcdCAgICAgICAgXHQ8SW1hZ2UgXHJcblx0XHRcdCAgICAgICAgXHRcdHVybD17cG9zdC5wb3N0SW1hZ2V9XHJcblx0XHRcdCAgICAgICAgXHRcdGlzRWRpdGluZz17dGhpcy5zdGF0ZS5pc0VkaXRpbmd9XHJcblx0XHRcdCAgICAgICAgXHRcdG9uUmVtb3ZlPXsoZmllbGQpID0+IHt0aGlzLnJlbW92ZUZpZWxkKGZpZWxkKX19XHJcblx0XHRcdCAgICAgICAgXHQvPlxyXG5cdFx0XHQgICAgICAgIFx0PFZpZGVvIFxyXG5cdFx0XHQgICAgICAgIFx0XHRpZD17cG9zdC5wb3N0VmlkZW99XHJcblx0XHRcdCAgICAgICAgXHRcdGlzRWRpdGluZz17dGhpcy5zdGF0ZS5pc0VkaXRpbmd9XHJcblx0XHRcdCAgICAgICAgXHRcdG9uUmVtb3ZlPXsoZmllbGQpID0+IHt0aGlzLnJlbW92ZUZpZWxkKGZpZWxkKX19XHJcblx0XHRcdCAgICAgICAgXHQvPlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50XCI+XHJcblx0XHRcdCAgICAgICAgXHQgPENvbnRlbnQgXHJcblx0XHRcdCAgICAgICAgXHQgXHR0ZXh0PXtwb3N0LnBvc3RDb250ZW50fSBcclxuXHRcdFx0ICAgICAgICBcdCBcdGlzRWRpdGluZz17dGhpcy5zdGF0ZS5pc0VkaXRpbmd9XHJcblx0XHRcdCAgICAgICAgXHQgXHRvbkNoYW5nZT17KHZhbHVlKSA9PiB7dGhpcy5oYW5kbGVUeXBpbmcodmFsdWUpfX1cclxuXHRcdFx0ICAgICAgICBcdCAvPlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJsaW5rXCI+XHJcblx0XHRcdCAgICAgIFx0PFVybCBcclxuXHRcdFx0ICAgICAgXHRcdGxpbms9e3Bvc3QucG9zdExpbmt9XHJcblx0XHRcdCAgICAgIFx0XHRpc0VkaXRpbmc9e3RoaXMuc3RhdGUuaXNFZGl0aW5nfVxyXG5cdFx0XHQgICAgICBcdFx0b25SZW1vdmU9eyhmaWVsZCkgPT4ge3RoaXMucmVtb3ZlRmllbGQoZmllbGQpfX1cclxuXHRcdFx0ICAgICAgXHRcdG9uQ2hhbmdlPXsodmFsdWUsIHRhcmdldCkgPT4ge3RoaXMuY2hhbmdlRmllbGQodmFsdWUsIHRhcmdldCl9fVxyXG5cdFx0XHQgICAgICBcdC8+XHJcblx0XHRcdCAgICAgIDwvZGl2PlxyXG5cdFx0XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1ldGFcIj5cclxuXHRcdFx0ICAgICAgICBcdDxkaXYgY2xhc3NOYW1lPVwibGVmdFwiPlxyXG5cdFx0XHRcdCAgICAgICAgXHQ8QWN0aW9uQmFyIFxyXG5cdFx0XHRcdCAgICAgICAgXHRcdHBvc3Q9e3Bvc3R9XHJcblx0XHRcdFx0ICAgICAgICBcdFx0aXNMaWtlZD17dGhpcy5zdGF0ZS5pc0xpa2VkfVxyXG5cdFx0XHRcdCAgICAgICAgXHRcdGxpa2VDb3VudGVyPXt0aGlzLnN0YXRlLmxpa2VDb3VudGVyfVxyXG5cdFx0XHRcdCAgICAgICAgXHRcdGlzRWRpdGluZz17dGhpcy5zdGF0ZS5pc0VkaXRpbmd9XHJcblx0XHRcdFx0ICAgICAgICBcdFx0b25DYW5jZWw9eygpID0+IHt0aGlzLnNldFN0YXRlKHtpc0VkaXRpbmc6IGZhbHNlLCBwb3N0OiB0aGlzLnByb3BzLnBvc3R9KX19XHJcblx0XHRcdFx0ICAgICAgICBcdFx0b25MaWtlPXsoKSA9PiB7dGhpcy5oYW5kbGVMaWtlKHBvc3QuX2lkLCB0aGlzLnByb3BzLmN1cnJlbnRVc2VyLl9pZCl9fVxyXG5cdFx0XHRcdCAgICAgICAgXHRcdG9uU2F2ZT17KCkgPT4ge3RoaXMuaGFuZGxlU2F2ZSh0aGlzLnRva2VuLCBwb3N0Ll9pZCwgdGhpcy5zdGF0ZS5wb3N0KX19XHJcblx0XHRcdFx0ICAgICAgICBcdFx0b25VcGxvYWQ9eyhmaWxlKSA9PiB7dGhpcy5oYW5kbGVJbWFnZSh0aGlzLnRva2VuLCBmaWxlKX19XHJcblx0XHRcdFx0ICAgICAgICBcdFx0b25WaWRlbz17KHVybCkgPT4ge3RoaXMuaGFuZGxlVmlkZW8odXJsKX19XHJcblx0XHRcdFx0ICAgICAgICBcdFx0b25Db21tZW50PXsoKSA9PiB7dGhpcy5zZXRTdGF0ZSh7aXNDb21tZW50c1JldmVhbGVkOiAhdGhpcy5zdGF0ZS5pc0NvbW1lbnRzUmV2ZWFsZWR9KX19XHJcblx0XHRcdFx0ICAgICAgICBcdC8+XHJcblx0XHRcdFx0ICAgICAgPC9kaXY+XHJcblx0XHRcdCAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmlnaHRcIj5cclxuXHRcdFx0ICAgICAgICBcdFx0PHNwYW4gY2xhc3NOYW1lPVwidGltZVwiPlxyXG5cdFx0XHQgICAgICAgIFx0XHRcdDxUaW1lQWdvIGRhdGV0aW1lPXtwb3N0LnVwZGF0ZWR9IGxvY2FsZT0ncnUnIC8+XHJcblx0XHRcdCAgICAgICAgXHRcdDwvc3Bhbj5cclxuXHRcdCAgICAgICAgXHRcdDwvZGl2PlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21tZW50c1wiPlxyXG5cdFx0XHQgICAgICBcdDxDb21tZW50cyBcclxuXHRcdFx0ICAgICAgXHRcdGNvbW1lbnRzPXtwb3N0LnBvc3RDb21tZW50c31cclxuXHRcdFx0ICAgICAgXHRcdHBvc3RJRD17cG9zdC5faWR9XHJcblx0XHRcdCAgICAgIFx0XHRpc1JldmVhbGVkPXt0aGlzLnN0YXRlLmlzQ29tbWVudHNSZXZlYWxlZH1cclxuXHRcdFx0ICAgICAgXHQvPlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgPHN0eWxlIGpzeD57YFxyXG5cdFx0XHQgICAgICAgICAubm90ZSAudXNlcixcclxuXHRcdFx0ICAgICAgICAgLm5vdGUgLm1ldGEge1xyXG5cdFx0XHQgICAgICAgICAgXHRkaXNwbGF5OmZsZXg7XHJcblx0XHRcdCAgICAgICAgICBcdGFsaWduLWl0ZW1zOmNlbnRlcjtcclxuXHRcdFx0ICAgICAgICAgIFx0anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47XHJcblx0XHRcdCAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAgLm5vdGUgLm1ldGEge1xyXG5cdFx0XHQgICAgICAgICAgXHRtYXJnaW4tdG9wOjE1cHg7XHJcblx0XHRcdCAgICAgICAgICBcdHBhZGRpbmctdG9wOjE1cHg7XHJcblx0XHRcdCAgICAgICAgICBcdGJvcmRlci10b3A6MXB4IHNvbGlkICNlZWU7XHJcblx0XHRcdCAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAgLm5vdGUgLm1lZGlhIHtcclxuXHRcdFx0ICAgICAgICAgXHRtYXJnaW4tdG9wOjEwcHg7XHJcblx0XHRcdCAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAgLm5vdGUgLnVzZXIgLmRyb3Bkb3duIGkge1xyXG5cdFx0XHQgICAgICAgICBcdGNvbG9yOiNjMGMwYzA7XHJcblx0XHRcdCAgICAgICAgICBcdGZvbnQtc2l6ZToxNnB4O1xyXG5cdFx0XHQgICAgICAgICAgXHR0cmFuc2l0aW9uOjAuMnMgYWxsIGVhc2U7XHJcblx0XHRcdCAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAgLm5vdGUgLnVzZXIgLmRyb3Bkb3duIGk6aG92ZXIge1xyXG5cdFx0XHQgICAgICAgICAgXHRjb2xvcjojMDAwO1xyXG5cdFx0XHQgICAgICAgICB9XHJcblx0XHRcdCAgICAgICAgIC5ub3RlIC51c2VyIC5kcm9wZG93biAubWVudSB7XHJcblx0XHRcdCAgICAgICAgICBcdGxlZnQ6YXV0byFpbXBvcnRhbnQ7XHJcblx0XHRcdCAgICAgICAgICBcdHJpZ2h0Oi0xNXB4IWltcG9ydGFudDtcclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICAubm90ZSAubWV0YSAudGltZSB7XHJcblx0XHRcdFx0XHRcdFx0Y29sb3I6I2MwYzBjMDtcclxuXHRcdFx0XHRcdFx0XHRmb250LXNpemU6MTNweDtcclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICAubm90ZSAuY29udGVudCB7XHJcblx0XHRcdCAgICAgICAgICBcdHdvcmQtd3JhcDogYnJlYWstd29yZDtcclxuXHRcdFx0XHRcdFx0XHRvdmVyZmxvdy13cmFwOiBicmVhay13b3JkO1xyXG5cdFx0XHRcdFx0XHRcdG1hcmdpbjoxNXB4IDBweDtcclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICAubm90ZSBwLnByaW1hcnkge1xyXG5cdFx0XHQgICAgICAgICAgXHRmb250LXNpemU6MTdweDtcclxuXHRcdFx0ICAgICAgICAgIFx0Y29sb3I6IzMzMztcclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICBgfTwvc3R5bGU+XHJcblx0XHQgICBcdDwvYXJ0aWNsZT5cclxuXHRcdFx0KVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIDxCbGFuayAvPlxyXG5cdFx0fVxyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgVmlkZW8gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG5cdCAgIHN1cGVyKHByb3BzKTtcclxuICAgfVxyXG5cclxuICAgcmVuZGVyKCkge1xyXG4gICBcdGlmKHRoaXMucHJvcHMuaWQpIHtcclxuICAgXHRcdGlmKHRoaXMucHJvcHMuaXNFZGl0aW5nKSB7XHJcbiAgIFx0XHRcdHJldHVybiAoXHJcblx0XHRcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlkZW9cIj5cclxuXHRcdFx0ICAgICAgXHQ8aWZyYW1lIFxyXG5cdFx0XHRcdCAgICAgIFx0d2lkdGg9XCIxMDAlXCIgXHJcblx0XHRcdFx0ICAgICAgXHRoZWlnaHQ9XCIzMTVcIiBcclxuXHRcdFx0XHQgICAgICBcdHNyYz17YGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyR7dGhpcy5wcm9wcy5pZH1gfSBcclxuXHRcdFx0XHQgICAgICBcdGZyYW1lQm9yZGVyPVwiMFwiIFxyXG5cdFx0XHRcdCAgICAgIFx0YWxsb3dGdWxsU2NyZWVuPXt0cnVlfT5cclxuXHRcdFx0XHQgICAgICA8L2lmcmFtZT5cclxuXHRcdFx0XHQgICAgICA8aSBvbkNsaWNrPXsoKSA9PiB7dGhpcy5wcm9wcy5vblJlbW92ZSgncG9zdFZpZGVvJyl9fSBcclxuXHRcdFx0XHQgICAgICBcdGNsYXNzTmFtZT1cImZhIGZhLWNsb3NlXCI+XHJcblx0XHRcdFx0ICAgICAgPC9pPlxyXG5cdFx0XHRcdCAgICAgIDxzdHlsZSBqc3g+e2BcclxuXHRcdFx0XHRcdFx0XHQudmlkZW8ge1xyXG5cdFx0XHRcdFx0XHRcdFx0cG9zaXRpb246cmVsYXRpdmU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdC52aWRlbyBpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHBvc2l0aW9uOmFic29sdXRlO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmlnaHQ6MHB4O1xyXG5cdFx0XHRcdFx0XHRcdFx0dG9wOjBweDtcclxuXHRcdFx0XHRcdFx0XHRcdHBhZGRpbmc6MjBweDtcclxuXHRcdFx0XHRcdFx0XHRcdG9wYWNpdHk6MC41O1xyXG5cdFx0XHRcdFx0XHRcdFx0Zm9udC1zaXplOjE3cHg7XHJcblx0XHRcdFx0XHRcdFx0XHR0cmFuc2l0aW9uOjAuMnMgYWxsIGVhc2U7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdC52aWRlbyBpOmhvdmVyIHtcclxuXHRcdFx0XHRcdFx0XHRcdG9wYWNpdHk6MTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0ICAgICAgYH08L3N0eWxlPlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgKVxyXG4gICBcdFx0fSBlbHNlIHtcclxuICAgXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0ICAgICAgPGlmcmFtZSBcclxuXHRcdFx0ICAgICAgXHR3aWR0aD1cIjEwMCVcIiBcclxuXHRcdFx0ICAgICAgXHRoZWlnaHQ9XCIzMTVcIiBcclxuXHRcdFx0ICAgICAgXHRzcmM9e2BodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8ke3RoaXMucHJvcHMuaWR9YH0gXHJcblx0XHRcdCAgICAgIFx0ZnJhbWVCb3JkZXI9XCIwXCIgXHJcblx0XHRcdCAgICAgIFx0YWxsb3dGdWxsU2NyZWVuPXt0cnVlfT5cclxuXHRcdFx0ICAgICAgPC9pZnJhbWU+XHJcblx0XHRcdCAgIClcclxuICAgXHRcdH1cclxuICAgXHR9IGVsc2Uge1xyXG4gICBcdFx0cmV0dXJuIG51bGxcclxuICAgXHR9XHJcbiAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIFVybCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcblx0ICAgc3VwZXIocHJvcHMpO1xyXG4gICB9XHJcblxyXG4gICByZW5kZXIoKSB7XHJcbiAgIFx0aWYodGhpcy5wcm9wcy5saW5rKSB7XHJcblx0XHQgIFx0aWYodGhpcy5wcm9wcy5pc0VkaXRpbmcpIHtcclxuXHRcdCAgXHRcdHJldHVybiAoXHJcblx0XHRcdCAgXHRcdDxkaXYgY2xhc3NOYW1lPVwibGlua1wiPlxyXG5cdFx0XHQgICAgICAgIFx0PGkgY2xhc3NOYW1lPVwiZmEgZmEtY2xvc2VcIiBvbkNsaWNrPXsoKSA9PiB7dGhpcy5wcm9wcy5vblJlbW92ZSgncG9zdExpbmsnKX19PjwvaT5cclxuXHRcdFx0ICAgICAgICBcdDxpbnB1dCBcclxuXHRcdFx0ICAgICAgICBcdFx0b25DaGFuZ2U9eyhlKSA9PiB7dGhpcy5wcm9wcy5vbkNoYW5nZShlLnRhcmdldC52YWx1ZSwgJ3Bvc3RMaW5rJyl9fSBcclxuXHRcdFx0ICAgICAgICBcdFx0dHlwZT1cInRleHRcIiBcclxuXHRcdFx0ICAgICAgICBcdFx0ZGVmYXVsdFZhbHVlPXt0aGlzLnByb3BzLmxpbmt9IFxyXG5cdFx0XHQgICAgICAgIFx0Lz5cclxuXHRcdFx0ICAgICAgICBcdFxyXG5cdFx0XHQgICAgICAgIFx0PHN0eWxlIGpzeD57YFxyXG5cdFx0XHRcdFx0XHRcdC5saW5rIHtcclxuXHRcdFx0XHQgICAgICAgICAgXHRtYXJnaW4tYm90dG9tOjE1cHg7XHJcblx0XHRcdFx0ICAgICAgICAgIH1cclxuXHRcdFx0XHQgICAgICAgICAubGluayBpLmZhLWNsb3NlIHtcclxuXHRcdFx0XHQgICAgICAgICBcdGN1cnNvaXI6cG9pbnRlcjtcclxuXHRcdFx0XHQgICAgICAgICBcdG1hcmdpbi1yaWdodDoxNXB4O1xyXG5cdFx0XHRcdCAgICAgICAgICBcdG9wYWNpdHk6LjQ7XHJcblx0XHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHRcdCAgICAgICAgIC5saW5rIGlucHV0IHtcclxuXHRcdFx0XHQgICAgICAgICBcdGJvcmRlcjowcHg7XHJcblx0XHRcdFx0ICAgICAgICAgXHRmb250LXNpemU6MTVweDtcclxuXHRcdFx0XHQgICAgICAgICBcdG91dGxpbmU6bm9uZTtcclxuXHRcdFx0XHQgICAgICAgICBcdHBhZGRpbmc6NXB4O1xyXG5cdFx0XHRcdCAgICAgICAgIFx0d2lkdGg6ODAlO1xyXG5cdFx0XHRcdCAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICBcdGB9PC9zdHlsZT5cclxuXHRcdFx0ICAgICAgPC9kaXY+IFxyXG5cdFx0XHQgICApXHJcblx0XHQgIFx0fSBlbHNlIHtcclxuXHRcdCAgXHRcdHJldHVybiAoXHJcblx0XHQgIFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwibGlua1wiIGRhdGEtaW52ZXJ0ZWQ9XCJcIiBcclxuXHRcdFx0ICAgICAgICBcdFx0ZGF0YS10b29sdGlwPVwi0J/RgNC40LrRgNC10L/Qu9C10L3QvdCw0Y8g0YHRgdGL0LvQutCwXCIgXHJcblx0XHRcdCAgICAgICAgXHRcdGRhdGEtcG9zaXRpb249XCJib3R0b20gbGVmdFwiPlxyXG5cdFx0XHQgICAgICAgIFx0PGkgY2xhc3NOYW1lPVwiZmEgZmEtbGlua1wiPjwvaT5cclxuXHRcdFx0ICAgICAgICBcdDxhIGhyZWY9e3RoaXMucHJvcHMubGlua30gdGFyZ2V0PVwiX2JsYW5rXCI+e3RoaXMucHJvcHMubGlua308L2E+XHJcblx0XHRcdCAgICAgICAgXHQ8c3R5bGUganN4PntgXHJcblx0XHRcdFx0XHRcdFx0Lmxpbmsge1xyXG5cdFx0XHRcdCAgICAgICAgICBcdG1hcmdpbi1ib3R0b206MTVweDtcclxuXHRcdFx0XHQgICAgICAgICAgfVxyXG5cdFx0XHRcdCAgICAgICAgIC5saW5rIGkge1xyXG5cdFx0XHRcdCAgICAgICAgICBcdG1hcmdpbi1yaWdodDoxNXB4O1xyXG5cdFx0XHRcdCAgICAgICAgICBcdG9wYWNpdHk6LjQ7XHJcblx0XHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgIFx0YH08L3N0eWxlPlxyXG5cdFx0XHQgICAgICA8L2Rpdj4gXHJcblx0XHQgIFx0XHQpXHJcblx0XHQgIFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIG51bGxcclxuXHRcdH1cclxuICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmNsYXNzIENvbnRlbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG5cdCAgIHN1cGVyKHByb3BzKTtcclxuICAgfVxyXG5cclxuICBcdHJlbmRlcigpIHtcclxuICBcdFx0aWYodGhpcy5wcm9wcy5pc0VkaXRpbmcpIHtcclxuICBcdFx0XHRyZXR1cm4gKFxyXG4gIFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJlZGl0b3JcIj5cclxuICBcdFx0XHRcdFx0PHRleHRhcmVhIFxyXG5cdCAgXHRcdFx0XHRcdG9uQ2hhbmdlPXsoZSkgPT4ge3RoaXMucHJvcHMub25DaGFuZ2UoZS50YXJnZXQudmFsdWUpfX0gXHJcblx0ICBcdFx0XHRcdFx0Y29scz1cIjRcIiBcclxuXHQgIFx0XHRcdFx0XHRkZWZhdWx0VmFsdWU9e3RoaXMucHJvcHMudGV4dH0gXHJcblx0ICBcdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCLQktCw0Ygg0YLQtdC60YHRgi4uXCJcclxuXHQgIFx0XHRcdFx0XHRtYXhMZW5ndGg9XCIxNDBcIj5cclxuICBcdFx0XHRcdFx0PC90ZXh0YXJlYT5cclxuICBcdFx0XHRcdFx0PHN0eWxlIGpzeD57YFxyXG5cdFx0XHRcdFx0XHQuZWRpdG9yIHRleHRhcmVhIHtcclxuXHRcdFx0XHRcdFx0XHR3aWR0aDoxMDAlO1xyXG5cdFx0XHRcdFx0XHRcdGJvcmRlcjoxcHggc29saWQgI2VlZTtcclxuXHRcdFx0XHRcdFx0XHRwYWRkaW5nOjE0cHg7XHJcblx0XHRcdFx0XHRcdFx0Zm9udC1zaXplOjE2cHg7XHJcblx0XHRcdFx0XHRcdFx0b3V0bGluZTpub25lO1xyXG5cdFx0XHRcdFx0XHRcdGJvcmRlci1yYWRpdXM6NHB4O1xyXG5cdFx0XHRcdFx0XHR9XHJcbiAgXHRcdFx0XHRcdGB9PC9zdHlsZT5cclxuICBcdFx0XHRcdDwvZGl2PlxyXG4gIFx0XHRcdClcclxuICBcdFx0fSBlbHNlIHtcclxuXHQgIFx0XHRyZXR1cm4gKFxyXG5cdFx0ICAgIFx0PGRpdiBjbGFzc05hbWU9XCJ0ZXh0XCI+XHJcblx0XHRcdCAgICAgIDxwIGNsYXNzTmFtZT1cInByaW1hcnlcIj5cclxuXHRcdFx0ICAgICAgXHR7dGhpcy5wcm9wcy50ZXh0fVxyXG5cdFx0XHQgICAgICA8L3A+XHJcblx0XHQgICAgICA8L2Rpdj5cclxuXHQgICBcdCk7XHJcbiAgXHRcdH1cclxuICAgfVxyXG59XHJcblxyXG5jbGFzcyBJbWFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcblx0ICAgc3VwZXIocHJvcHMpO1xyXG4gICB9XHJcblxyXG4gIFx0cmVuZGVyKCkge1xyXG4gIFx0XHRpZih0aGlzLnByb3BzLnVybCkge1xyXG5cdCAgXHRcdGlmKHRoaXMucHJvcHMuaXNFZGl0aW5nKSB7XHJcblx0ICBcdFx0XHRyZXR1cm4gKFxyXG5cdCAgXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImVkaXRvclwiPlxyXG5cdCAgXHRcdFx0XHRcdDxCbHVySW1hZ2VMb2FkZXIgc3JjPXt0aGlzLnByb3BzLnVybH1cclxuXHRcdCAgICAgICAgICAgICAgIGZ1bGxDb3Zlcj17dHJ1ZX1cclxuXHRcdCAgICAgICAgICAgICAgIG1heEJsdXJMZXZlbD17MTB9XHJcblx0XHQgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltZT17NDAwfVxyXG5cdFx0ICAgICAgICAgICAgICAgbG9hZGVyPXs8TG9hZGVyIC8+fVxyXG5cdFx0ICAgICAgICAgICAgLz5cclxuXHQgIFx0XHRcdFx0XHQ8aSBjbGFzc05hbWU9XCJmYSBmYS1jbG9zZVwiIG9uQ2xpY2s9eygpID0+IHt0aGlzLnByb3BzLm9uUmVtb3ZlKCdwb3N0SW1hZ2UnKX19PjwvaT5cclxuXHQgIFx0XHRcdFx0XHQ8c3R5bGUganN4PntgXHJcblx0ICBcdFx0XHRcdFx0XHQuZWRpdG9yIHtcclxuXHQgIFx0XHRcdFx0XHRcdFx0cG9zaXRpb246cmVsYXRpdmU7XHJcblx0ICBcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0LmVkaXRvciBpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHBvc2l0aW9uOmFic29sdXRlO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmlnaHQ6MHB4O1xyXG5cdFx0XHRcdFx0XHRcdFx0dG9wOjBweDtcclxuXHRcdFx0XHRcdFx0XHRcdHBhZGRpbmc6MjBweDtcclxuXHRcdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZToxN3B4O1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29sb3I6IzAwMDtcclxuXHRcdFx0XHRcdFx0XHRcdG9wYWNpdHk6MC41O1xyXG5cdFx0XHRcdFx0XHRcdFx0dHJhbnNpdGlvbjowLjJzIGFsbCBlYXNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0Y3Vyc29yOnBvaW50ZXI7XHJcblx0XHRcdFx0XHRcdFx0XHR6LWluZGV4Ojk5OTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0LmVkaXRvciBpOmhvdmVyIHtcclxuXHRcdFx0XHRcdFx0XHRcdG9wYWNpdHk6MS4wO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHQgIFx0XHRcdFx0XHRgfTwvc3R5bGU+XHJcblx0ICBcdFx0XHRcdDwvZGl2PlxyXG5cdCAgXHRcdFx0KVxyXG5cdCAgXHRcdH0gZWxzZSB7XHJcblx0XHQgIFx0XHRyZXR1cm4gKFxyXG5cdFx0XHQgICAgXHQ8ZGl2IGNsYXNzTmFtZT1cImltYWdlXCI+XHJcblx0XHRcdCAgICAgIFx0PEJsdXJJbWFnZUxvYWRlciBzcmM9e3RoaXMucHJvcHMudXJsfVxyXG5cdFx0ICAgICAgICAgICAgICAgZnVsbENvdmVyPXt0cnVlfVxyXG5cdFx0ICAgICAgICAgICAgICAgbWF4Qmx1ckxldmVsPXsxMH1cclxuXHRcdCAgICAgICAgICAgICAgIHRyYW5zaXRpb25UaW1lPXs0MDB9XHJcblx0XHQgICAgICAgICAgICAgICBsb2FkZXI9ezxMb2FkZXIgLz59XHJcblx0XHQgICAgICAgICAgICAvPlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdCAgIFx0KTtcclxuXHQgIFx0XHR9XHJcblx0ICBcdH0gZWxzZSB7XHJcblx0ICBcdFx0cmV0dXJuIG51bGxcclxuXHQgIFx0fVxyXG4gICB9XHJcbn1cclxuXHJcblxyXG5jbGFzcyBBY3Rpb25CYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG5cdCAgIHN1cGVyKHByb3BzKTtcclxuICAgfVxyXG5cclxuICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgIFx0VUkoKVxyXG4gICB9XHJcblxyXG4gICBvblZpZGVvKGUsIHZhbHVlKSB7XHJcbiAgICAgIGlmKGUua2V5Q29kZSA9PSAxMykge1xyXG4gICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgIHRoaXMucHJvcHMub25WaWRlbyh2YWx1ZSlcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gIFx0cmVuZGVyKCkge1xyXG4gIFx0XHR2YXIgcG9zdCA9IHRoaXMucHJvcHMucG9zdDtcclxuICBcdFx0aWYgKHBvc3QpIHtcclxuXHRcdCAgXHRpZiAodGhpcy5wcm9wcy5pc0VkaXRpbmcpIHtcclxuXHRcdCAgIFx0cmV0dXJuIChcclxuXHRcdFx0ICAgICAgPGRpdj5cclxuXHRcdCAgICAgICAgXHRcdDxzcGFuIG9uQ2xpY2s9eygpID0+IHt0aGlzLnByb3BzLm9uU2F2ZShwb3N0KX19IGNsYXNzTmFtZT1cInVpIGJ1dHRvbiBzbWFsbCBjaXJjdWxhciBwcmltYXJ5XCI+0KHQvtGF0YDQsNC90LjRgtGMPC9zcGFuPlxyXG5cdFx0ICAgICAgICBcdFx0PHNwYW4gb25DbGljaz17KCkgPT4ge3RoaXMucHJvcHMub25DYW5jZWwoKX19IGNsYXNzTmFtZT1cInVpIGJ1dHRvbiBzbWFsbCBjaXJjdWxhciBkZWZhdWx0XCI+0J7RgtC80LXQvdCwPC9zcGFuPlxyXG5cdFx0ICAgICAgXHQgICB7KCFwb3N0LnBvc3RJbWFnZSBcclxuXHRcdCAgICAgIFx0ICAgXHQmJiAhcG9zdC5wb3N0VmlkZW8pIFxyXG5cdFx0ICAgICAgXHQgICBcdCYmXHJcblx0XHRcdCAgICAgICAgICAgIDxzcGFuPlxyXG5cdFx0XHRcdCAgICAgICAgICAgIDxzcGFuIFxyXG5cdFx0XHRcdFx0ICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge3RoaXMuaW1hZ2UuY2xpY2soKX19IFxyXG5cdFx0XHRcdFx0ICAgICAgICAgICAgY2xhc3NOYW1lPVwidWkgYnV0dG9uIGljb24gY2lyY3VsYXIgc21hbGwgYmFzaWNcIj5cclxuXHRcdFx0XHQgICAgICAgICAgICBcdDxpIGNsYXNzTmFtZT1cImZhIGZhLWltYWdlXCI+PC9pPlxyXG5cdFx0XHRcdCAgICAgICAgICAgIDwvc3Bhbj5cclxuXHRcdFx0XHQgICAgICAgICBcdDxpbnB1dCBcclxuXHRcdFx0ICBcdFx0XHRcdFx0XHRyZWY9eyhlKSA9PiB7dGhpcy5pbWFnZSA9IGV9fVxyXG5cdFx0XHRcdCAgXHRcdFx0XHRcdHR5cGU9XCJmaWxlXCIgXHJcblx0XHRcdFx0ICBcdFx0XHRcdFx0Y2xhc3NOYW1lPVwidWkgaGlkZGVuXCIgXHJcblx0XHRcdFx0ICBcdFx0XHRcdFx0b25DaGFuZ2U9eyhlKSA9PiB7dGhpcy5wcm9wcy5vblVwbG9hZChlLnRhcmdldC5maWxlc1swXSl9fSBcclxuXHRcdFx0ICBcdFx0XHRcdFx0Lz5cclxuXHRcdCAgXHRcdFx0XHRcdDwvc3Bhbj5cclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICB7KCFwb3N0LnBvc3RWaWRlbyBcclxuXHRcdFx0ICAgICAgICAgXHQmJiAhcG9zdC5wb3N0SW1hZ2UpICYmXHJcblx0XHRcdCAgICAgICAgICAgIDxzcGFuPlxyXG5cdFx0XHRcdCAgICAgICAgICAgIDxzcGFuIFxyXG5cdFx0XHRcdCAgICAgICAgICAgIFx0b25DbGljaz17KCkgPT4geyQoJy51aS52aWRlby5idXR0b24nKS5wb3B1cCh7cG9wdXA6ICcudWkudmlkZW8ucG9wdXAnLCBvbjogJ2NsaWNrJ30pfX0gXHJcblx0XHRcdFx0ICAgICAgICAgICAgXHRjbGFzc05hbWU9XCJ1aSBidXR0b24gdmlkZW8gaWNvbiBjaXJjdWxhciBzbWFsbCBiYXNpY1wiPlxyXG5cdFx0XHRcdCAgICAgICAgICAgIFx0PGkgY2xhc3NOYW1lPVwiZmEgZmEtdmlkZW8tY2FtZXJhXCI+PC9pPlxyXG5cdFx0XHRcdCAgICAgICAgICAgIDwvc3Bhbj5cclxuXHRcdFx0XHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcHVwIHZpZGVvIHVpXCI+XHJcblx0XHRcdFx0ICAgICAgICAgICAgICAgPGlucHV0IFxyXG5cdFx0XHRcdCAgICAgICAgICAgICAgICBvbktleURvd249eyhlKSA9PiB7dGhpcy5vblZpZGVvKGUsIGUudGFyZ2V0LnZhbHVlKX19XHJcblx0XHRcdFx0ICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCIgXHJcblx0XHRcdFx0ICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi0KHRgdGL0LvQutCwINC90LAg0LLQuNC00LXQviDRgSBZb3VUdWJlXCIgLz5cclxuXHRcdFx0XHQgICAgICAgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgICAgICAgPC9zcGFuPlxyXG5cdFx0XHQgICAgICAgICB9XHJcblx0XHRcdCAgICAgICAgIDxzdHlsZSBqc3g+e2BcclxuXHRcdFx0XHRcdFx0XHQucG9wdXAgaW5wdXQge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ym9yZGVyOjBweDtcclxuXHRcdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZToxN3B4O1xyXG5cdFx0XHRcdFx0XHRcdFx0cGFkZGluZzo1cHg7XHJcblx0XHRcdFx0XHRcdFx0XHRvdXRsaW5lOm5vbmU7XHJcblx0XHRcdFx0XHRcdFx0XHR3aWR0aDozNTBweDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdCAgICAgICAgIGB9PC9zdHlsZT5cclxuXHRcdFx0ICAgICAgPC9kaXY+XHJcblx0XHQgICAgXHQpO1xyXG5cdFx0ICAgfSBlbHNlIHtcclxuXHRcdCAgIFx0cmV0dXJuIChcclxuXHRcdCAgIFx0XHQ8c3Bhbj5cclxuXHRcdFx0ICAgICAgICBcdDxhIG9uQ2xpY2s9eygpID0+IHt0aGlzLnByb3BzLm9uTGlrZSgpfX1cclxuXHRcdCAgICAgICAgXHRcdFx0Y2xhc3NOYW1lPVwiaXRlbVwiPlxyXG5cdFx0XHQgICAgICAgIFx0XHQ8aSBjbGFzc05hbWU9eyh0aGlzLnByb3BzLmlzTGlrZWQpID8gXHJcblx0XHRcdCAgICAgICAgXHRcdFx0YGZhIGZhLWhlYXJ0IGljb25gIDogXHJcblx0XHRcdCAgICAgICAgXHRcdFx0YGZhIGZhLWhlYXJ0LW8gaWNvbmB9PlxyXG5cdFx0XHQgICAgICAgIFx0XHQ8L2k+IHt0aGlzLnByb3BzLmxpa2VDb3VudGVyfSDQnNC90LUg0L3RgNCw0LLQuNGC0YHRj1xyXG5cdFx0XHQgICAgICAgIFx0PC9hPlxyXG5cdFx0XHQgICAgICAgIFx0PGEgb25DbGljaz17KCkgPT4ge3RoaXMucHJvcHMub25Db21tZW50KCl9fSBcclxuXHRcdCAgICAgICAgXHRcdFx0Y2xhc3NOYW1lPVwiaXRlbVwiPlxyXG5cdFx0XHQgICAgICAgIFx0XHQ8aSBjbGFzc05hbWU9XCJmYSBmYS1jb21tZW50LW8gaWNvblwiPjwvaT4g0J7RgdGC0LDQstC40YLRjCDQutC+0LzQvNC10L3RgtCw0YDQuNC5XHJcblx0XHRcdCAgICAgICAgXHQ8L2E+XHJcblx0XHRcdCAgICAgICAgXHQ8c3R5bGUganN4PntgXHJcblx0XHRcdFx0XHRcdFx0Lm5vdGUgLm1ldGEgLmJ1dHRvbi5kZWZhdWx0IHtcclxuXHRcdFx0XHRcdFx0XHRcdGJhY2tncm91bmQ6I2ZhZmFmYTtcclxuXHRcdFx0XHRcdFx0XHRcdHRyYW5zaXRpb246MC4ycyBhbGwgZWFzZTtcclxuXHRcdFx0XHQgICAgICAgIFx0IH1cclxuXHRcdFx0XHQgICAgICAgIFx0IC5ub3RlIC5tZXRhIC5idXR0b24uZGVmYXVsdDpob3ZlciB7XHJcblx0XHRcdFx0ICAgICAgICBcdCBcdGJhY2tncm91bmQ6I2VlZTtcclxuXHRcdFx0XHQgICAgICAgIFx0IH1cclxuXHRcdFx0XHQgICAgICAgIFx0IC5pdGVtIHtcclxuXHRcdFx0XHQgICAgICAgIFx0IFx0Y3Vyc29yOnBvaW50ZXI7XHJcblx0XHRcdFx0ICAgICAgICBcdCBcdGZvbnQtc2l6ZToxNXB4O1xyXG5cdFx0XHRcdCAgICAgICAgXHQgXHRtYXJnaW4tcmlnaHQ6MTVweDtcclxuXHRcdFx0XHQgICAgICAgIFx0IH1cclxuXHRcdFx0XHQgICAgICAgIFx0IC5pdGVtOmxhc3QtY2hpbGQge1xyXG5cdFx0XHRcdCAgICAgICAgXHQgXHRtYXJnaW4tcmlnaHQ6MHB4O1xyXG5cdFx0XHRcdCAgICAgICAgXHQgfVxyXG5cdFx0XHRcdCAgICAgICAgXHQgLmZhLWhlYXJ0IHtcclxuXHRcdFx0XHQgICAgICAgIFx0IFx0Y29sb3I6IzU3YzFiMyFpbXBvcnRhbnQ7XHJcblx0XHRcdFx0ICAgICAgICBcdCB9XHJcblx0XHQgICAgICAgIFx0XHRgfTwvc3R5bGU+XHJcblx0XHQgICAgICAgIFx0PC9zcGFuPlxyXG5cdFx0ICAgXHQpXHJcblx0XHQgICB9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gbnVsbFxyXG5cdFx0fVxyXG4gIFx0fVxyXG59XHJcblxyXG5cclxuXHJcbnZhciBCbGFuayA9ICgpID0+IHtcclxuXHRyZXR1cm4gKFxyXG5cdFx0PGRpdj5cclxuICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1c2VyXCI+XHJcblx0ICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbWFnZVwiPlxyXG5cdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxhbmsgYXZhdGFyXCI+PC9kaXY+XHJcblx0ICAgICAgICAgPC9kaXY+XHJcblx0ICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50XCI+XHJcblx0ICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJibGFuayBzdHJpbmdcIj48L2Rpdj5cclxuXHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJsYW5rIHN0cmluZ1wiPjwvZGl2PlxyXG5cdCAgICAgICAgIDwvZGl2PlxyXG5cdCAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRcIj5cclxuXHQgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJsYW5rIGhlYWRlclwiPjwvZGl2PlxyXG5cdCAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxhbmsgZGVzY3JpcHRpb25cIj48L2Rpdj5cclxuXHQgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJsYW5rIGRlc2NyaXB0aW9uXCI+PC9kaXY+XHJcbiAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICA8c3R5bGUganN4PntgXHJcblx0ICAgICAgICAgLnVzZXIgLmNvbnRlbnQge1xyXG5cdCAgICAgICAgICAgIG1hcmdpbi1sZWZ0OjE1cHg7XHJcblx0ICAgICAgICAgfVxyXG5cdCAgICAgICAgIC51c2VyIHtcclxuXHQgICAgICAgICAgICBkaXNwbGF5OmZsZXg7XHJcblx0ICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246cm93O1xyXG5cdCAgICAgICAgIH1cclxuICAgICAgICAgYH08L3N0eWxlPlxyXG5cdCAgIDwvZGl2PlxyXG5cdClcclxufVxyXG5cclxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XHJcbiAgcmV0dXJuIHsgXHJcbiAgICBjdXJyZW50VXNlcjogc3RhdGUuY3VycmVudFVzZXJcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShOb3RlKVxyXG4iXX0= */\n/*@ sourceURL=components\\isomorphic\\feed\\views\\note.js */'
					}));
				}
			} else {
				return null;
			}
		}
	}]);

	return Url;
}(_react2.default.Component);

var Content = function (_React$Component4) {
	(0, _inherits3.default)(Content, _React$Component4);

	function Content(props) {
		(0, _classCallCheck3.default)(this, Content);

		return (0, _possibleConstructorReturn3.default)(this, (Content.__proto__ || (0, _getPrototypeOf2.default)(Content)).call(this, props));
	}

	(0, _createClass3.default)(Content, [{
		key: 'render',
		value: function render() {
			var _this13 = this;

			if (this.props.isEditing) {
				return _react2.default.createElement('div', { className: 'editor', 'data-jsx': 1285399774,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 414
					}
				}, _react2.default.createElement('textarea', {
					onChange: function onChange(e) {
						_this13.props.onChange(e.target.value);
					},
					cols: '4',
					defaultValue: this.props.text,
					placeholder: '\u0412\u0430\u0448 \u0442\u0435\u043A\u0441\u0442..',
					maxLength: '140', 'data-jsx': 1285399774,
					__source: {
						fileName: _jsxFileName,
						lineNumber: 415
					}
				}), _react2.default.createElement(_style2.default, {
					styleId: 1285399774,
					css: '.editor[data-jsx="1285399774"] textarea[data-jsx="1285399774"]{width:100%;border:1px solid #eee;padding:14px;font-size:16px;outline:none;border-radius:4px}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\isomorphic\\feed\\views\\note.js */'
				}));
			} else {
				return _react2.default.createElement('div', { className: 'text', __source: {
						fileName: _jsxFileName,
						lineNumber: 436
					}
				}, _react2.default.createElement('p', { className: 'primary', __source: {
						fileName: _jsxFileName,
						lineNumber: 437
					}
				}, this.props.text));
			}
		}
	}]);

	return Content;
}(_react2.default.Component);

var Image = function (_React$Component5) {
	(0, _inherits3.default)(Image, _React$Component5);

	function Image(props) {
		(0, _classCallCheck3.default)(this, Image);

		return (0, _possibleConstructorReturn3.default)(this, (Image.__proto__ || (0, _getPrototypeOf2.default)(Image)).call(this, props));
	}

	(0, _createClass3.default)(Image, [{
		key: 'render',
		value: function render() {
			var _this15 = this;

			if (this.props.url) {
				if (this.props.isEditing) {
					return _react2.default.createElement('div', { className: 'editor', 'data-jsx': 2482583956,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 455
						}
					}, _react2.default.createElement(BlurImageLoader, { src: this.props.url,
						fullCover: true,
						maxBlurLevel: 10,
						transitionTime: 400,
						loader: _react2.default.createElement(_loader2.default, {
							__source: {
								fileName: _jsxFileName,
								lineNumber: 460
							}
						}),
						__source: {
							fileName: _jsxFileName,
							lineNumber: 456
						}
					}), _react2.default.createElement('i', { className: 'fa fa-close', onClick: function onClick() {
							_this15.props.onRemove('postImage');
						}, 'data-jsx': 2482583956,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 462
						}
					}), _react2.default.createElement(_style2.default, {
						styleId: 2482583956,
						css: '.editor[data-jsx="2482583956"]{position:relative}.editor[data-jsx="2482583956"] i[data-jsx="2482583956"]{position:absolute;right:0px;top:0px;padding:20px;font-size:17px;color:#000;opacity:0.5;-webkit-transition:0.2s all ease;transition:0.2s all ease;cursor:pointer;z-index:999}.editor[data-jsx="2482583956"] i[data-jsx="2482583956"]:hover{opacity:1.0}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\isomorphic\\feed\\views\\note.js */'
					}));
				} else {
					return _react2.default.createElement('div', { className: 'image', __source: {
							fileName: _jsxFileName,
							lineNumber: 487
						}
					}, _react2.default.createElement(BlurImageLoader, { src: this.props.url,
						fullCover: true,
						maxBlurLevel: 10,
						transitionTime: 400,
						loader: _react2.default.createElement(_loader2.default, {
							__source: {
								fileName: _jsxFileName,
								lineNumber: 492
							}
						}),
						__source: {
							fileName: _jsxFileName,
							lineNumber: 488
						}
					}));
				}
			} else {
				return null;
			}
		}
	}]);

	return Image;
}(_react2.default.Component);

var ActionBar = function (_React$Component6) {
	(0, _inherits3.default)(ActionBar, _React$Component6);

	function ActionBar(props) {
		(0, _classCallCheck3.default)(this, ActionBar);

		return (0, _possibleConstructorReturn3.default)(this, (ActionBar.__proto__ || (0, _getPrototypeOf2.default)(ActionBar)).call(this, props));
	}

	(0, _createClass3.default)(ActionBar, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			(0, _initScripts.UI)();
		}
	}, {
		key: 'onVideo',
		value: function onVideo(e, value) {
			if (e.keyCode == 13) {
				e.preventDefault();
				this.props.onVideo(value);
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _this17 = this;

			var post = this.props.post;
			if (post) {
				if (this.props.isEditing) {
					return _react2.default.createElement('div', {
						'data-jsx': 2459011142,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 525
						}
					}, _react2.default.createElement('span', { onClick: function onClick() {
							_this17.props.onSave(post);
						}, className: 'ui button small circular primary', 'data-jsx': 2459011142,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 526
						}
					}, '\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C'), _react2.default.createElement('span', { onClick: function onClick() {
							_this17.props.onCancel();
						}, className: 'ui button small circular default', 'data-jsx': 2459011142,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 527
						}
					}, '\u041E\u0442\u043C\u0435\u043D\u0430'), !post.postImage && !post.postVideo && _react2.default.createElement('span', {
						'data-jsx': 2459011142,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 531
						}
					}, _react2.default.createElement('span', {
						onClick: function onClick() {
							_this17.image.click();
						},
						className: 'ui button icon circular small basic', 'data-jsx': 2459011142,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 532
						}
					}, _react2.default.createElement('i', { className: 'fa fa-image', 'data-jsx': 2459011142,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 535
						}
					})), _react2.default.createElement('input', {
						ref: function ref(e) {
							_this17.image = e;
						},
						type: 'file',
						className: 'ui hidden',
						onChange: function onChange(e) {
							_this17.props.onUpload(e.target.files[0]);
						},
						'data-jsx': 2459011142,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 537
						}
					})), !post.postVideo && !post.postImage && _react2.default.createElement('span', {
						'data-jsx': 2459011142,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 547
						}
					}, _react2.default.createElement('span', {
						onClick: function onClick() {
							$('.ui.video.button').popup({ popup: '.ui.video.popup', on: 'click' });
						},
						className: 'ui button video icon circular small basic', 'data-jsx': 2459011142,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 548
						}
					}, _react2.default.createElement('i', { className: 'fa fa-video-camera', 'data-jsx': 2459011142,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 551
						}
					})), _react2.default.createElement('div', { className: 'popup video ui', 'data-jsx': 2459011142,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 553
						}
					}, _react2.default.createElement('input', {
						onKeyDown: function onKeyDown(e) {
							_this17.onVideo(e, e.target.value);
						},
						type: 'text',
						placeholder: '\u0421\u0441\u044B\u043B\u043A\u0430 \u043D\u0430 \u0432\u0438\u0434\u0435\u043E \u0441 YouTube', 'data-jsx': 2459011142,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 554
						}
					}))), _react2.default.createElement(_style2.default, {
						styleId: 2459011142,
						css: '.popup[data-jsx="2459011142"] input[data-jsx="2459011142"]{border:0px;font-size:17px;padding:5px;outline:none;width:350px}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\isomorphic\\feed\\views\\note.js */'
					}));
				} else {
					return _react2.default.createElement('span', {
						'data-jsx': 3384210375,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 574
						}
					}, _react2.default.createElement('a', { onClick: function onClick() {
							_this17.props.onLike();
						},
						className: 'item', 'data-jsx': 3384210375,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 575
						}
					}, _react2.default.createElement('i', { className: this.props.isLiked ? 'fa fa-heart icon' : 'fa fa-heart-o icon', 'data-jsx': 3384210375,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 577
						}
					}), ' ', this.props.likeCounter, ' \u041C\u043D\u0435 \u043D\u0440\u0430\u0432\u0438\u0442\u0441\u044F'), _react2.default.createElement('a', { onClick: function onClick() {
							_this17.props.onComment();
						},
						className: 'item', 'data-jsx': 3384210375,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 582
						}
					}, _react2.default.createElement('i', { className: 'fa fa-comment-o icon', 'data-jsx': 3384210375,
						__source: {
							fileName: _jsxFileName,
							lineNumber: 584
						}
					}), ' \u041E\u0441\u0442\u0430\u0432\u0438\u0442\u044C \u043A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0439'), _react2.default.createElement(_style2.default, {
						styleId: 3384210375,
						css: '.note[data-jsx="3384210375"] .meta[data-jsx="3384210375"] .button.default[data-jsx="3384210375"]{background:#fafafa;-webkit-transition:0.2s all ease;transition:0.2s all ease}.note[data-jsx="3384210375"] .meta[data-jsx="3384210375"] .button.default[data-jsx="3384210375"]:hover{background:#eee}.item[data-jsx="3384210375"]{cursor:pointer;font-size:15px;margin-right:15px}.item[data-jsx="3384210375"]:last-child{margin-right:0px}.fa-heart[data-jsx="3384210375"]{color:#57c1b3!important}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\isomorphic\\feed\\views\\note.js */'
					}));
				}
			} else {
				return null;
			}
		}
	}]);

	return ActionBar;
}(_react2.default.Component);

var Blank = function Blank() {
	return _react2.default.createElement('div', {
		'data-jsx': 327546934,
		__source: {
			fileName: _jsxFileName,
			lineNumber: 619
		}
	}, _react2.default.createElement('div', { className: 'user', 'data-jsx': 327546934,
		__source: {
			fileName: _jsxFileName,
			lineNumber: 620
		}
	}, _react2.default.createElement('div', { className: 'image', 'data-jsx': 327546934,
		__source: {
			fileName: _jsxFileName,
			lineNumber: 621
		}
	}, _react2.default.createElement('div', { className: 'blank avatar', 'data-jsx': 327546934,
		__source: {
			fileName: _jsxFileName,
			lineNumber: 622
		}
	})), _react2.default.createElement('div', { className: 'content', 'data-jsx': 327546934,
		__source: {
			fileName: _jsxFileName,
			lineNumber: 624
		}
	}, _react2.default.createElement('div', { className: 'blank string', 'data-jsx': 327546934,
		__source: {
			fileName: _jsxFileName,
			lineNumber: 625
		}
	}), _react2.default.createElement('div', { className: 'blank string', 'data-jsx': 327546934,
		__source: {
			fileName: _jsxFileName,
			lineNumber: 626
		}
	}))), _react2.default.createElement('div', { className: 'content', 'data-jsx': 327546934,
		__source: {
			fileName: _jsxFileName,
			lineNumber: 629
		}
	}, _react2.default.createElement('div', { className: 'blank header', 'data-jsx': 327546934,
		__source: {
			fileName: _jsxFileName,
			lineNumber: 630
		}
	}), _react2.default.createElement('div', { className: 'blank description', 'data-jsx': 327546934,
		__source: {
			fileName: _jsxFileName,
			lineNumber: 631
		}
	}), _react2.default.createElement('div', { className: 'blank description', 'data-jsx': 327546934,
		__source: {
			fileName: _jsxFileName,
			lineNumber: 632
		}
	})), _react2.default.createElement(_style2.default, {
		styleId: 327546934,
		css: '.user[data-jsx="327546934"] .content[data-jsx="327546934"]{margin-left:15px}.user[data-jsx="327546934"]{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\isomorphic\\feed\\views\\note.js */'
	}));
};

function mapStateToProps(state) {
	return {
		currentUser: state.currentUser
	};
}

exports.default = (0, _reactRedux.connect)(mapStateToProps)(Note);

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "E:\\www\\Levelup.name\\components\\isomorphic\\feed\\views\\note.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "E:\\www\\Levelup.name\\components\\isomorphic\\feed\\views\\note.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(538)))

/***/ }),

/***/ 709:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(111);

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = __webpack_require__(39);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(14);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(15);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(40);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(41);

var _inherits3 = _interopRequireDefault(_inherits2);

var _style = __webpack_require__(544);

var _style2 = _interopRequireDefault(_style);

var _react = __webpack_require__(8);

var _react2 = _interopRequireDefault(_react);

var _jsCookie = __webpack_require__(545);

var _jsCookie2 = _interopRequireDefault(_jsCookie);

var _reactRedux = __webpack_require__(543);

var _dynamic = __webpack_require__(557);

var _dynamic2 = _interopRequireDefault(_dynamic);

var _post = __webpack_require__(555);

var _user = __webpack_require__(554);

var _user2 = _interopRequireDefault(_user);

var _blog = __webpack_require__(568);

var _blog2 = _interopRequireDefault(_blog);

var _timeagoReact = __webpack_require__(556);

var _timeagoReact2 = _interopRequireDefault(_timeagoReact);

var _link = __webpack_require__(546);

var _link2 = _interopRequireDefault(_link);

var _loader = __webpack_require__(549);

var _loader2 = _interopRequireDefault(_loader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\www\\Levelup.name\\components\\isomorphic\\feed\\views\\default.js';
// Important


// Actions


// Components


// Dynamics
var BlurImageLoader = (0, _dynamic2.default)(typeof window === 'undefined' ? new (__webpack_require__(557).SameLoopPromise)(function (resolve, reject) {
  eval('require.ensure = function (deps, callback) { callback(require) }');

  __webpack_require__.e/* require.ensure */(7/* duplicate */).then((function (require) {
    var m = __webpack_require__(558);

    m = m.default || m;
    m.__webpackChunkName = 'react-blur-image-loader-d8a95de3-5cdd-4137-8e92-f895687f9c32.js';
    resolve(m);
  }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
}) : new (__webpack_require__(557).SameLoopPromise)(function (resolve, reject) {
  var weakId = /*require.resolve*/(558);

  try {
    var weakModule = __webpack_require__(weakId);

    return resolve(weakModule.default || weakModule);
  } catch (err) {}

  __webpack_require__.e/* require.ensure */(7/* duplicate */).then((function (require) {
    try {
      var m = __webpack_require__(558);

      m = m.default || m;
      resolve(m);
    } catch (error) {
      reject(error);
    }
  }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
}));

var Default = function (_React$Component) {
  (0, _inherits3.default)(Default, _React$Component);

  function Default(props) {
    (0, _classCallCheck3.default)(this, Default);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Default.__proto__ || (0, _getPrototypeOf2.default)(Default)).call(this, props));

    _this.token = _jsCookie2.default.get('x-access-token');
    _this.state = {
      isLiked: false,
      likeCounter: 0
    };
    return _this;
  }

  // React LifeCycle

  (0, _createClass3.default)(Default, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.props.currentUser) {
        if (this.props.post.postLikes.indexOf(this.props.currentUser._id) != -1) {
          this.setState({
            isLiked: true,
            likeCounter: this.props.post.postLikes.length
          });
        }
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.currentUser) {
        if (nextProps.post.postLikes.indexOf(nextProps.currentUser._id) != -1) {
          this.setState({
            isLiked: true,
            likeCounter: nextProps.post.postLikes.length
          });
        }
      }
    }

    // Specific Methods

  }, {
    key: 'handleLike',
    value: function handleLike(token, postID, userID) {
      var _this2 = this;

      (0, _post.setLikeById)(token, postID).then(function (res) {
        if (res.data.success) {
          _this2.setState((0, _extends3.default)({}, _this2.state.post, {
            isLiked: !_this2.state.isLiked,
            likeCounter: res.data.counter
          }));
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var post = this.props.post;
      if (post) {
        var comments = post.postCommentsCount;
        var likes = this.state.likeCounter;
        return _react2.default.createElement('article', { className: 'article block-item preview grid-item w-100', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 75
          }
        }, _react2.default.createElement('div', { className: 'user', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 76
          }
        }, _react2.default.createElement('div', { className: 'left', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 77
          }
        }, post.postAuthor.authorType == 'user' ? _react2.default.createElement(_user2.default, { id: post.postAuthor.authorID, __source: {
            fileName: _jsxFileName,
            lineNumber: 79
          }
        }) : _react2.default.createElement(_blog2.default, { id: post.postAuthor.authorID, __source: {
            fileName: _jsxFileName,
            lineNumber: 79
          }
        })), _react2.default.createElement('div', { className: 'right', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 82
          }
        }, _react2.default.createElement('div', { className: 'ui dropdown', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 83
          }
        }, _react2.default.createElement('i', { className: 'fa fa-ellipsis-h', 'aria-hidden': 'true', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 84
          }
        }), _react2.default.createElement('div', { className: 'menu', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 85
          }
        }, _react2.default.createElement(_link2.default, { href: { pathname: 'editor', query: { id: post._id } }, __source: {
            fileName: _jsxFileName,
            lineNumber: 86
          }
        }, _react2.default.createElement('div', { className: 'item', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 87
          }
        }, '\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C')), _react2.default.createElement('div', { className: 'item', onClick: function onClick() {
            console.log('*modal');
          }, 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 89
          }
        }, '\u041F\u043E\u0436\u0430\u043B\u043E\u0432\u0430\u0442\u044C\u0441\u044F'))))), post.postImage && _react2.default.createElement('div', { className: 'image', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 95
          }
        }, _react2.default.createElement(BlurImageLoader, { src: post.postImage,
          fullCover: true,
          maxBlurLevel: 10,
          transitionTime: 400,
          loader: _react2.default.createElement(_loader2.default, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 100
            }
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 96
          }
        })), _react2.default.createElement('div', { className: 'content', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 104
          }
        }, _react2.default.createElement(_link2.default, { href: { pathname: 'post', query: { slug: post.slug } }, __source: {
            fileName: _jsxFileName,
            lineNumber: 105
          }
        }, _react2.default.createElement('a', {
          'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 106
          }
        }, _react2.default.createElement('h1', {
          'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 106
          }
        }, post.postTitle))), _react2.default.createElement('p', { className: 'primary', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 108
          }
        }, post.postDescription ? post.postDescription : '')), _react2.default.createElement('div', { className: 'meta', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 110
          }
        }, _react2.default.createElement('div', { className: 'left', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 111
          }
        }, _react2.default.createElement('span', { onClick: function onClick() {
            _this3.handleLike(_this3.token, post._id, _this3.props.currentUser._id);
          },
          className: 'item', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 112
          }
        }, _react2.default.createElement('i', { className: this.state.isLiked ? 'fa fa-heart icon' : 'fa fa-heart-o icon', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 114
          }
        }), ' ', this.state.likeCounter, ' \u041C\u043D\u0435 \u043D\u0440\u0430\u0432\u0438\u0442\u0441\u044F'), _react2.default.createElement(_link2.default, { href: { pathname: 'post', query: { slug: post.slug } }, __source: {
            fileName: _jsxFileName,
            lineNumber: 119
          }
        }, _react2.default.createElement('a', { className: 'item', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 120
          }
        }, _react2.default.createElement('i', { className: 'fa fa-comment-o icon', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 121
          }
        }), ' ', post.postComments.length, ' \u041A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0435\u0432')), _react2.default.createElement(_link2.default, { href: { pathname: 'post', query: { slug: post.slug } }, __source: {
            fileName: _jsxFileName,
            lineNumber: 124
          }
        }, _react2.default.createElement('a', { className: 'item', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 125
          }
        }, _react2.default.createElement('i', { className: 'fa fa-comment-o icon', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 126
          }
        }), ' \u0427\u0438\u0442\u0430\u0442\u044C \u0434\u0430\u043B\u0435\u0435'))), _react2.default.createElement('div', { className: 'right', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 130
          }
        }, _react2.default.createElement('span', { className: 'time', 'data-jsx': 3161925554,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 131
          }
        }, _react2.default.createElement(_timeagoReact2.default, { datetime: post.updated, locale: 'ru', __source: {
            fileName: _jsxFileName,
            lineNumber: 132
          }
        })))), _react2.default.createElement(_style2.default, {
          styleId: 3161925554,
          css: '.article[data-jsx="3161925554"] .user[data-jsx="3161925554"]{margin-top:0px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:space-between;-webkit-justify-content:space-between;-ms-flex-pack:space-between;justify-content:space-between}.article[data-jsx="3161925554"] .image[data-jsx="3161925554"]{margin-top:15px}.article[data-jsx="3161925554"] .meta[data-jsx="3161925554"]{margin-top:20px;width:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:space-between;-webkit-justify-content:space-between;-ms-flex-pack:space-between;justify-content:space-between}.article[data-jsx="3161925554"] .meta[data-jsx="3161925554"] .item[data-jsx="3161925554"]{cursor:pointer}.article[data-jsx="3161925554"] .meta[data-jsx="3161925554"] .button[data-jsx="3161925554"]{margin-right:10px}.article[data-jsx="3161925554"] .meta[data-jsx="3161925554"] .time[data-jsx="3161925554"]{color:#c0c0c0}.article[data-jsx="3161925554"] .meta[data-jsx="3161925554"] .fa.fa-heart[data-jsx="3161925554"]{color:#57c1b3}.article[data-jsx="3161925554"] .user[data-jsx="3161925554"] .dropdown[data-jsx="3161925554"] i[data-jsx="3161925554"]{color:#c0c0c0;font-size:16px;-webkit-transition:0.2s all ease;transition:0.2s all ease}.article[data-jsx="3161925554"] .user[data-jsx="3161925554"] .dropdown[data-jsx="3161925554"] i[data-jsx="3161925554"]:hover{color:#000}.article[data-jsx="3161925554"] .user[data-jsx="3161925554"] .dropdown[data-jsx="3161925554"] .menu[data-jsx="3161925554"]{left:auto!important;right:-15px!important}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\isomorphic\\feed\\views\\default.js */'
        }));
      } else {
        return _react2.default.createElement(Blank, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 181
          }
        });
      }
    }
  }]);

  return Default;
}(_react2.default.Component);

function mapStateToProps(state) {
  return {
    currentUser: state.currentUser
  };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps)(Default);

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "E:\\www\\Levelup.name\\components\\isomorphic\\feed\\views\\default.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "E:\\www\\Levelup.name\\components\\isomorphic\\feed\\views\\default.js"); } } })();

/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi40OTZkNzU4ZGQ2MGVkOTU2NjUzZi5ob3QtdXBkYXRlLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9pc29tb3JwaGljL2ZlZWQvdmlld3Mvbm90ZS5qcz9lZTc4MGViIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvaXNvbW9ycGhpYy9mZWVkL3ZpZXdzL2RlZmF1bHQuanM/MWM2YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRhbnRcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNvb2tpZXMgZnJvbSAnanMtY29va2llJ1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbmltcG9ydCBkeW5hbWljIGZyb20gJ25leHQvZHluYW1pYydcclxuXHJcbi8vIEFjdGlvbnNcclxuaW1wb3J0IHsgdXBsb2FkSW1hZ2UgfSBmcm9tICcuLi8uLi8uLi8uLi9hY3Rpb25zL2FwcC5qcydcclxuaW1wb3J0IHsgc2V0TGlrZUJ5SWQsIHJlbW92ZVBvc3RCeUlkLCBwb3N0VXBkYXRlIH0gZnJvbSAnLi4vLi4vLi4vLi4vYWN0aW9ucy9wb3N0LmpzJ1xyXG5cclxuLy8gVXRpbHMgXHJcbmltcG9ydCBnZXRZb3VUdWJlSWQgZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvZ2V0WW91VHViZS5qcycgXHJcbmltcG9ydCBmaW5kVVJMIGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2ZpbmRVUkwuanMnIFxyXG5pbXBvcnQgeyBVSSB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2luaXRTY3JpcHRzLmpzJ1xyXG5cclxuLy8gQ29tcG9uZW50c1xyXG5pbXBvcnQgQ29tbWVudHMgZnJvbSAnLi4vLi4vY29tbWVudHMvaW5kZXguanMnXHJcbmltcG9ydCBVc2VyIGZyb20gJy4uLy4uL3VzZXIuanMnXHJcbmltcG9ydCBCbG9nIGZyb20gJy4uLy4uL2Jsb2cuanMnXHJcbmltcG9ydCBUaW1lQWdvIGZyb20gJ3RpbWVhZ28tcmVhY3QnO1xyXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnXHJcbmltcG9ydCBMb2FkZXIgZnJvbSAnLi4vLi4vbG9hZGVyLmpzJ1xyXG5cclxuLy8gRHluYW1pY3NcclxudmFyIEJsdXJJbWFnZUxvYWRlciA9IGR5bmFtaWMoaW1wb3J0KCdyZWFjdC1ibHVyLWltYWdlLWxvYWRlcicpKVxyXG5cclxuY29uc3QgZGVmYXVsdFN0YXRlID0ge1xyXG5cdGlzTGlrZWQ6IGZhbHNlLFxyXG4gXHRsaWtlQ291bnRlcjogMCxcclxuIFx0aXNFZGl0aW5nOiBmYWxzZSxcclxuIFx0cG9zdDogbnVsbCxcclxuIFx0aXNDb21tZW50c1JldmVhbGVkOiBmYWxzZVxyXG59XHJcblxyXG5jbGFzcyBOb3RlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuXHQgICBzdXBlcihwcm9wcyk7XHJcblx0ICAgdGhpcy50b2tlbiA9IGNvb2tpZXMuZ2V0KCd4LWFjY2Vzcy10b2tlbicpXHJcblx0ICAgdGhpcy5kaXNwYXRjaCA9IHRoaXMucHJvcHMuZGlzcGF0Y2g7XHJcblx0ICAgdGhpcy5zdGF0ZSA9IGRlZmF1bHRTdGF0ZTtcclxuICAgfVxyXG5cclxuICAgLy8gUmVhY3QgTGlmZWN5Y2xlXHJcbiAgXHRjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcblx0ICBcdGlmKHRoaXMucHJvcHMuY3VycmVudFVzZXIpIHtcclxuXHRcdCAgXHRpZih0aGlzLnByb3BzLnBvc3QucG9zdExpa2VzLmluZGV4T2YodGhpcy5wcm9wcy5jdXJyZW50VXNlci5faWQpICE9IC0xKSB7XHJcblx0XHQgICAgICB0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0ICAgICAgaXNMaWtlZDogdHJ1ZVxyXG5cdFx0ICAgICAgfSlcclxuXHRcdCAgIH1cclxuXHRcdH1cdFx0XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0bGlrZUNvdW50ZXI6IHRoaXMucHJvcHMucG9zdC5wb3N0TGlrZXMubGVuZ3RoLFxyXG5cdFx0XHRwb3N0OiB0aGlzLnByb3BzLnBvc3RcclxuXHRcdH0pXHJcbiAgIH1cclxuXHJcbiAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XHJcbiAgIFx0aWYobmV4dFByb3BzLmN1cnJlbnRVc2VyKSB7XHJcblx0XHQgIFx0aWYobmV4dFByb3BzLnBvc3QucG9zdExpa2VzLmluZGV4T2YobmV4dFByb3BzLmN1cnJlbnRVc2VyLl9pZCkgIT0gLTEpIHtcclxuXHRcdCAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHQgICAgICBpc0xpa2VkOiB0cnVlXHJcblx0XHQgICAgICB9KVxyXG5cdFx0ICAgfVxyXG5cdFx0fVx0XHRcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRsaWtlQ291bnRlcjogbmV4dFByb3BzLnBvc3QucG9zdExpa2VzLmxlbmd0aCxcclxuXHRcdFx0cG9zdDogbmV4dFByb3BzLnBvc3RcclxuXHRcdH0pXHJcbiAgIH1cclxuXHJcbiAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICBcdFVJKCk7XHJcbiAgIFx0JCgnLnVpLmRyb3Bkb3duJylcclxuICAgXHQuZHJvcGRvd24oKTtcclxuICAgfVxyXG5cclxuICAgLy8gU3BlY2lmaWMgTWV0aG9kc1xyXG4gICBoYW5kbGVUeXBpbmcodmFsdWUpIHtcclxuICAgICAgaWYoZmluZFVSTCh2YWx1ZSkubGVuZ3RoID09IDApIHtcclxuICAgICAgICB0aGlzLmNoYW5nZUZpZWxkKHZhbHVlLCAncG9zdENvbnRlbnQnKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIFx0dGhpcy5jaGFuZ2VGaWVsZChmaW5kVVJMKHZhbHVlKVswXSwgJ3Bvc3RMaW5rJykudGhlbigoKSA9PiB7XHJcbiAgICAgICAgXHRcdHRoaXMuY2hhbmdlRmllbGQodmFsdWUsICdwb3N0Q29udGVudCcpXHJcbiAgICAgICAgXHR9KVxyXG4gICAgICB9XHJcbiAgXHR9XHJcblxyXG4gICBoYW5kbGVSZW1vdmUoaWQpIHtcclxuICAgICAgdmFyIHJlc3VsdCA9IGNvbmZpcm0oJ9CS0Ysg0LTQtdC50YHRgtCy0LjRgtC10LvRjNC90L4g0YXQvtGC0LjRgtC1INGD0LTQsNC70LjRgtGMINC30LDQv9C40YHRjD8nKTtcclxuICAgICAgaWYgKHJlc3VsdCkge1xyXG5cdCAgICAgIHJlbW92ZVBvc3RCeUlkKGlkKS50aGVuKChyZXMpID0+IHtcclxuXHQgICAgICBcdGlmKHJlcy5kYXRhLnN1Y2Nlc3MpIHtcclxuXHQgICAgICBcdFx0JCgnLnBvc3QtJyArIGlkKS5oaWRlKDUwMCk7XHJcblx0ICAgICAgXHR9XHJcblx0ICAgICAgfSlcclxuICAgICAgfVxyXG4gICB9XHJcblxyXG4gIFx0aGFuZGxlTGlrZShwb3N0SUQsIHVzZXJJRCkge1xyXG4gICAgXHRzZXRMaWtlQnlJZCh0aGlzLnRva2VuLCBwb3N0SUQpLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBcdGlmKHJlcy5kYXRhLnN1Y2Nlc3MpIHtcclxuXHQgICAgICAgIFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHQgICAgICAgXHQuLi50aGlzLnN0YXRlLnBvc3QsXHJcblx0XHQgICAgICAgXHRpc0xpa2VkOiAhdGhpcy5zdGF0ZS5pc0xpa2VkLFxyXG5cdFx0ICAgICAgIFx0bGlrZUNvdW50ZXI6IHJlcy5kYXRhLmNvdW50ZXJcclxuXHQgICAgICAgIH0pXHJcbiAgICAgIFx0fSBlbHNlIHtcclxuICAgICAgXHRcdGNvbnNvbGUubG9nKHJlcy5kYXRhKVxyXG4gICAgICBcdH1cclxuICAgIFx0fSlcclxuICBcdH1cclxuXHJcbiAgXHRoYW5kbGVJbWFnZSh0b2tlbiwgaW1hZ2UpIHtcclxuXHQgICB1cGxvYWRJbWFnZSh0b2tlbiwgaW1hZ2UpLnRoZW4oKHJlcykgPT4ge1xyXG5cdCAgIFx0aWYocmVzLnBhdGggJiYgcmVzLnN1Y2Nlc3MpIHtcclxuXHQgICBcdFx0dGhpcy5jaGFuZ2VGaWVsZChyZXMucGF0aCwgJ3Bvc3RJbWFnZScpO1xyXG5cdCAgIFx0fVxyXG5cdCAgIH0pXHJcbiAgIH1cclxuXHJcbiAgXHRoYW5kbGVTYXZlKHRva2VuLCBpZCwgZGF0YSkge1xyXG4gIFx0XHRwb3N0VXBkYXRlKHRva2VuLCBpZCwgZGF0YSkudGhlbigocmVzKSA9PiB7XHJcbiAgXHRcdFx0aWYocmVzLmRhdGEuc3VjY2Vzcykge1xyXG4gIFx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0ICBcdFx0XHRcdGlzRWRpdGluZzogZmFsc2VcclxuXHQgIFx0XHRcdH0pXHJcbiAgXHRcdFx0fVxyXG4gIFx0XHR9KVxyXG4gIFx0fVxyXG5cclxuICBcdGhhbmRsZVZpZGVvKHVybCkge1xyXG5cdCAgIHZhciBpZCA9IGdldFlvdVR1YmVJZCh1cmwpXHJcblx0ICBcdHRoaXMuY2hhbmdlRmllbGQoaWQsICdwb3N0VmlkZW8nKVxyXG4gICB9XHJcblxyXG4gICAvLyBJc29tb3JwaGljIE1ldGhvZHNcclxuXHJcbiAgIGNoYW5nZUZpZWxkKHZhbHVlLCB0YXJnZXQpIHtcclxuICAgXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdCAgIFx0XHRwb3N0OiB7XHJcblx0ICAgXHRcdFx0Li4udGhpcy5zdGF0ZS5wb3N0LFxyXG5cdCAgIFx0XHRcdFt0YXJnZXRdOiB2YWx1ZVxyXG5cdCAgIFx0XHR9XHJcblx0ICAgXHR9KVxyXG5cdCAgIFx0cmVzb2x2ZSh0cnVlKVxyXG4gICBcdH0pXHJcbiAgIH1cclxuXHJcbiAgIHJlbW92ZUZpZWxkKGZpZWxkKSB7XHJcbiAgXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRwb3N0OiB7XHJcblx0XHRcdFx0Li4udGhpcy5zdGF0ZS5wb3N0LFxyXG5cdFx0XHRcdFtmaWVsZF06IG51bGxcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuICBcdH1cclxuXHJcbiAgIHJlbmRlcigpIHtcclxuICAgIFx0dmFyIHBvc3QgPSB0aGlzLnN0YXRlLnBvc3Q7XHJcblx0XHRpZiAocG9zdCkge1xyXG5cdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdDxhcnRpY2xlIGNsYXNzTmFtZT17YGFydGljbGUgYmxvY2staXRlbSBub3RlIHByZXZpZXcgcG9zdC0ke3Bvc3QuX2lkfWB9PlxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJ1c2VyXCI+IFxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImxlZnRcIj5cclxuXHRcdFx0XHRcdFx0XHR7KHBvc3QucG9zdEF1dGhvci5hdXRob3JUeXBlID09ICd1c2VyJykgP1xyXG5cdFx0XHRcdFx0ICAgICAgICAgPFVzZXIgaWQ9e3Bvc3QucG9zdEF1dGhvci5hdXRob3JJRH0gLz4gOiA8QmxvZyBpZD17cG9zdC5wb3N0QXV0aG9yLmF1dGhvcklEfSAvPlxyXG5cdFx0XHRcdFx0ICAgICAgfVxyXG5cdFx0XHRcdCAgICAgIDwvZGl2PlxyXG5cdFx0XHQgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJpZ2h0XCI+XHJcblx0XHRcdFx0ICAgICAgICBcdDxkaXYgY2xhc3NOYW1lPVwidWkgZHJvcGRvd25cIj5cclxuXHRcdFx0XHRcdFx0XHRcdDxpIGNsYXNzTmFtZT1cImZhIGZhLWVsbGlwc2lzLWhcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcblx0XHRcdFx0XHRcdFx0XHQgIDxkaXYgY2xhc3NOYW1lPVwibWVudVwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0ICBcdCA8ZGl2IGNsYXNzTmFtZT1cIml0ZW1cIiBvbkNsaWNrPXsoKSA9PiB7dGhpcy5zZXRTdGF0ZSh7aXNFZGl0aW5nOiB0cnVlfSl9fT7QoNC10LTQsNC60YLQuNGA0L7QstCw0YLRjDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0ICBcdCA8ZGl2IGNsYXNzTmFtZT1cIml0ZW1cIiBvbkNsaWNrPXsoKSA9PiB7Y29uc29sZS5sb2coJyptb2RhbCcpfX0+0J/QvtC20LDQu9C+0LLQsNGC0YzRgdGPPC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XHQgICAgPGRpdiBjbGFzc05hbWU9XCJpdGVtXCIgb25DbGljaz17KCkgPT4ge3RoaXMuaGFuZGxlUmVtb3ZlKHBvc3QuX2lkKX19PtCj0LTQsNC70LjRgtGMPC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0ICAgICAgICAgPC9kaXY+XHJcblx0XHRcdFx0ICAgPC9kaXY+XHJcblx0XHRcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVkaWFcIj5cclxuXHRcdFx0ICAgICAgICBcdDxJbWFnZSBcclxuXHRcdFx0ICAgICAgICBcdFx0dXJsPXtwb3N0LnBvc3RJbWFnZX1cclxuXHRcdFx0ICAgICAgICBcdFx0aXNFZGl0aW5nPXt0aGlzLnN0YXRlLmlzRWRpdGluZ31cclxuXHRcdFx0ICAgICAgICBcdFx0b25SZW1vdmU9eyhmaWVsZCkgPT4ge3RoaXMucmVtb3ZlRmllbGQoZmllbGQpfX1cclxuXHRcdFx0ICAgICAgICBcdC8+XHJcblx0XHRcdCAgICAgICAgXHQ8VmlkZW8gXHJcblx0XHRcdCAgICAgICAgXHRcdGlkPXtwb3N0LnBvc3RWaWRlb31cclxuXHRcdFx0ICAgICAgICBcdFx0aXNFZGl0aW5nPXt0aGlzLnN0YXRlLmlzRWRpdGluZ31cclxuXHRcdFx0ICAgICAgICBcdFx0b25SZW1vdmU9eyhmaWVsZCkgPT4ge3RoaXMucmVtb3ZlRmllbGQoZmllbGQpfX1cclxuXHRcdFx0ICAgICAgICBcdC8+XHJcblx0XHRcdCAgICAgIDwvZGl2PlxyXG5cdFx0XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRcIj5cclxuXHRcdFx0ICAgICAgICBcdCA8Q29udGVudCBcclxuXHRcdFx0ICAgICAgICBcdCBcdHRleHQ9e3Bvc3QucG9zdENvbnRlbnR9IFxyXG5cdFx0XHQgICAgICAgIFx0IFx0aXNFZGl0aW5nPXt0aGlzLnN0YXRlLmlzRWRpdGluZ31cclxuXHRcdFx0ICAgICAgICBcdCBcdG9uQ2hhbmdlPXsodmFsdWUpID0+IHt0aGlzLmhhbmRsZVR5cGluZyh2YWx1ZSl9fVxyXG5cdFx0XHQgICAgICAgIFx0IC8+XHJcblx0XHRcdCAgICAgIDwvZGl2PlxyXG5cdFx0XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpbmtcIj5cclxuXHRcdFx0ICAgICAgXHQ8VXJsIFxyXG5cdFx0XHQgICAgICBcdFx0bGluaz17cG9zdC5wb3N0TGlua31cclxuXHRcdFx0ICAgICAgXHRcdGlzRWRpdGluZz17dGhpcy5zdGF0ZS5pc0VkaXRpbmd9XHJcblx0XHRcdCAgICAgIFx0XHRvblJlbW92ZT17KGZpZWxkKSA9PiB7dGhpcy5yZW1vdmVGaWVsZChmaWVsZCl9fVxyXG5cdFx0XHQgICAgICBcdFx0b25DaGFuZ2U9eyh2YWx1ZSwgdGFyZ2V0KSA9PiB7dGhpcy5jaGFuZ2VGaWVsZCh2YWx1ZSwgdGFyZ2V0KX19XHJcblx0XHRcdCAgICAgIFx0Lz5cclxuXHRcdFx0ICAgICAgPC9kaXY+XHJcblx0XHRcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWV0YVwiPlxyXG5cdFx0XHQgICAgICAgIFx0PGRpdiBjbGFzc05hbWU9XCJsZWZ0XCI+XHJcblx0XHRcdFx0ICAgICAgICBcdDxBY3Rpb25CYXIgXHJcblx0XHRcdFx0ICAgICAgICBcdFx0cG9zdD17cG9zdH1cclxuXHRcdFx0XHQgICAgICAgIFx0XHRpc0xpa2VkPXt0aGlzLnN0YXRlLmlzTGlrZWR9XHJcblx0XHRcdFx0ICAgICAgICBcdFx0bGlrZUNvdW50ZXI9e3RoaXMuc3RhdGUubGlrZUNvdW50ZXJ9XHJcblx0XHRcdFx0ICAgICAgICBcdFx0aXNFZGl0aW5nPXt0aGlzLnN0YXRlLmlzRWRpdGluZ31cclxuXHRcdFx0XHQgICAgICAgIFx0XHRvbkNhbmNlbD17KCkgPT4ge3RoaXMuc2V0U3RhdGUoe2lzRWRpdGluZzogZmFsc2UsIHBvc3Q6IHRoaXMucHJvcHMucG9zdH0pfX1cclxuXHRcdFx0XHQgICAgICAgIFx0XHRvbkxpa2U9eygpID0+IHt0aGlzLmhhbmRsZUxpa2UocG9zdC5faWQsIHRoaXMucHJvcHMuY3VycmVudFVzZXIuX2lkKX19XHJcblx0XHRcdFx0ICAgICAgICBcdFx0b25TYXZlPXsoKSA9PiB7dGhpcy5oYW5kbGVTYXZlKHRoaXMudG9rZW4sIHBvc3QuX2lkLCB0aGlzLnN0YXRlLnBvc3QpfX1cclxuXHRcdFx0XHQgICAgICAgIFx0XHRvblVwbG9hZD17KGZpbGUpID0+IHt0aGlzLmhhbmRsZUltYWdlKHRoaXMudG9rZW4sIGZpbGUpfX1cclxuXHRcdFx0XHQgICAgICAgIFx0XHRvblZpZGVvPXsodXJsKSA9PiB7dGhpcy5oYW5kbGVWaWRlbyh1cmwpfX1cclxuXHRcdFx0XHQgICAgICAgIFx0XHRvbkNvbW1lbnQ9eygpID0+IHt0aGlzLnNldFN0YXRlKHtpc0NvbW1lbnRzUmV2ZWFsZWQ6ICF0aGlzLnN0YXRlLmlzQ29tbWVudHNSZXZlYWxlZH0pfX1cclxuXHRcdFx0XHQgICAgICAgIFx0Lz5cclxuXHRcdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdFx0ICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyaWdodFwiPlxyXG5cdFx0XHQgICAgICAgIFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJ0aW1lXCI+XHJcblx0XHRcdCAgICAgICAgXHRcdFx0PFRpbWVBZ28gZGF0ZXRpbWU9e3Bvc3QudXBkYXRlZH0gbG9jYWxlPSdydScgLz5cclxuXHRcdFx0ICAgICAgICBcdFx0PC9zcGFuPlxyXG5cdFx0ICAgICAgICBcdFx0PC9kaXY+XHJcblx0XHRcdCAgICAgIDwvZGl2PlxyXG5cdFx0XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbW1lbnRzXCI+XHJcblx0XHRcdCAgICAgIFx0PENvbW1lbnRzIFxyXG5cdFx0XHQgICAgICBcdFx0Y29tbWVudHM9e3Bvc3QucG9zdENvbW1lbnRzfVxyXG5cdFx0XHQgICAgICBcdFx0cG9zdElEPXtwb3N0Ll9pZH1cclxuXHRcdFx0ICAgICAgXHRcdGlzUmV2ZWFsZWQ9e3RoaXMuc3RhdGUuaXNDb21tZW50c1JldmVhbGVkfVxyXG5cdFx0XHQgICAgICBcdC8+XHJcblx0XHRcdCAgICAgIDwvZGl2PlxyXG5cdFx0XHQgICAgICA8c3R5bGUganN4PntgXHJcblx0XHRcdCAgICAgICAgIC5ub3RlIC51c2VyLFxyXG5cdFx0XHQgICAgICAgICAubm90ZSAubWV0YSB7XHJcblx0XHRcdCAgICAgICAgICBcdGRpc3BsYXk6ZmxleDtcclxuXHRcdFx0ICAgICAgICAgIFx0YWxpZ24taXRlbXM6Y2VudGVyO1xyXG5cdFx0XHQgICAgICAgICAgXHRqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtcclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICAubm90ZSAubWV0YSB7XHJcblx0XHRcdCAgICAgICAgICBcdG1hcmdpbi10b3A6MTVweDtcclxuXHRcdFx0ICAgICAgICAgIFx0cGFkZGluZy10b3A6MTVweDtcclxuXHRcdFx0ICAgICAgICAgIFx0Ym9yZGVyLXRvcDoxcHggc29saWQgI2VlZTtcclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICAubm90ZSAubWVkaWEge1xyXG5cdFx0XHQgICAgICAgICBcdG1hcmdpbi10b3A6MTBweDtcclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICAubm90ZSAudXNlciAuZHJvcGRvd24gaSB7XHJcblx0XHRcdCAgICAgICAgIFx0Y29sb3I6I2MwYzBjMDtcclxuXHRcdFx0ICAgICAgICAgIFx0Zm9udC1zaXplOjE2cHg7XHJcblx0XHRcdCAgICAgICAgICBcdHRyYW5zaXRpb246MC4ycyBhbGwgZWFzZTtcclxuXHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgICAubm90ZSAudXNlciAuZHJvcGRvd24gaTpob3ZlciB7XHJcblx0XHRcdCAgICAgICAgICBcdGNvbG9yOiMwMDA7XHJcblx0XHRcdCAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAgLm5vdGUgLnVzZXIgLmRyb3Bkb3duIC5tZW51IHtcclxuXHRcdFx0ICAgICAgICAgIFx0bGVmdDphdXRvIWltcG9ydGFudDtcclxuXHRcdFx0ICAgICAgICAgIFx0cmlnaHQ6LTE1cHghaW1wb3J0YW50O1xyXG5cdFx0XHQgICAgICAgICB9XHJcblx0XHRcdCAgICAgICAgIC5ub3RlIC5tZXRhIC50aW1lIHtcclxuXHRcdFx0XHRcdFx0XHRjb2xvcjojYzBjMGMwO1xyXG5cdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZToxM3B4O1xyXG5cdFx0XHQgICAgICAgICB9XHJcblx0XHRcdCAgICAgICAgIC5ub3RlIC5jb250ZW50IHtcclxuXHRcdFx0ICAgICAgICAgIFx0d29yZC13cmFwOiBicmVhay13b3JkO1xyXG5cdFx0XHRcdFx0XHRcdG92ZXJmbG93LXdyYXA6IGJyZWFrLXdvcmQ7XHJcblx0XHRcdFx0XHRcdFx0bWFyZ2luOjE1cHggMHB4O1xyXG5cdFx0XHQgICAgICAgICB9XHJcblx0XHRcdCAgICAgICAgIC5ub3RlIHAucHJpbWFyeSB7XHJcblx0XHRcdCAgICAgICAgICBcdGZvbnQtc2l6ZToxN3B4O1xyXG5cdFx0XHQgICAgICAgICAgXHRjb2xvcjojMzMzO1xyXG5cdFx0XHQgICAgICAgICB9XHJcblx0XHRcdCAgICAgIGB9PC9zdHlsZT5cclxuXHRcdCAgIFx0PC9hcnRpY2xlPlxyXG5cdFx0XHQpXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gPEJsYW5rIC8+XHJcblx0XHR9XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBWaWRlbyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcblx0ICAgc3VwZXIocHJvcHMpO1xyXG4gICB9XHJcblxyXG4gICByZW5kZXIoKSB7XHJcbiAgIFx0aWYodGhpcy5wcm9wcy5pZCkge1xyXG4gICBcdFx0aWYodGhpcy5wcm9wcy5pc0VkaXRpbmcpIHtcclxuICAgXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWRlb1wiPlxyXG5cdFx0XHQgICAgICBcdDxpZnJhbWUgXHJcblx0XHRcdFx0ICAgICAgXHR3aWR0aD1cIjEwMCVcIiBcclxuXHRcdFx0XHQgICAgICBcdGhlaWdodD1cIjMxNVwiIFxyXG5cdFx0XHRcdCAgICAgIFx0c3JjPXtgaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvJHt0aGlzLnByb3BzLmlkfWB9IFxyXG5cdFx0XHRcdCAgICAgIFx0ZnJhbWVCb3JkZXI9XCIwXCIgXHJcblx0XHRcdFx0ICAgICAgXHRhbGxvd0Z1bGxTY3JlZW49e3RydWV9PlxyXG5cdFx0XHRcdCAgICAgIDwvaWZyYW1lPlxyXG5cdFx0XHRcdCAgICAgIDxpIG9uQ2xpY2s9eygpID0+IHt0aGlzLnByb3BzLm9uUmVtb3ZlKCdwb3N0VmlkZW8nKX19IFxyXG5cdFx0XHRcdCAgICAgIFx0Y2xhc3NOYW1lPVwiZmEgZmEtY2xvc2VcIj5cclxuXHRcdFx0XHQgICAgICA8L2k+XHJcblx0XHRcdFx0ICAgICAgPHN0eWxlIGpzeD57YFxyXG5cdFx0XHRcdFx0XHRcdC52aWRlbyB7XHJcblx0XHRcdFx0XHRcdFx0XHRwb3NpdGlvbjpyZWxhdGl2ZTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0LnZpZGVvIGkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cG9zaXRpb246YWJzb2x1dGU7XHJcblx0XHRcdFx0XHRcdFx0XHRyaWdodDowcHg7XHJcblx0XHRcdFx0XHRcdFx0XHR0b3A6MHB4O1xyXG5cdFx0XHRcdFx0XHRcdFx0cGFkZGluZzoyMHB4O1xyXG5cdFx0XHRcdFx0XHRcdFx0b3BhY2l0eTowLjU7XHJcblx0XHRcdFx0XHRcdFx0XHRmb250LXNpemU6MTdweDtcclxuXHRcdFx0XHRcdFx0XHRcdHRyYW5zaXRpb246MC4ycyBhbGwgZWFzZTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0LnZpZGVvIGk6aG92ZXIge1xyXG5cdFx0XHRcdFx0XHRcdFx0b3BhY2l0eToxO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHQgICAgICBgfTwvc3R5bGU+XHJcblx0XHRcdCAgICAgIDwvZGl2PlxyXG5cdFx0XHQgICApXHJcbiAgIFx0XHR9IGVsc2Uge1xyXG4gICBcdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHQgICAgICA8aWZyYW1lIFxyXG5cdFx0XHQgICAgICBcdHdpZHRoPVwiMTAwJVwiIFxyXG5cdFx0XHQgICAgICBcdGhlaWdodD1cIjMxNVwiIFxyXG5cdFx0XHQgICAgICBcdHNyYz17YGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyR7dGhpcy5wcm9wcy5pZH1gfSBcclxuXHRcdFx0ICAgICAgXHRmcmFtZUJvcmRlcj1cIjBcIiBcclxuXHRcdFx0ICAgICAgXHRhbGxvd0Z1bGxTY3JlZW49e3RydWV9PlxyXG5cdFx0XHQgICAgICA8L2lmcmFtZT5cclxuXHRcdFx0ICAgKVxyXG4gICBcdFx0fVxyXG4gICBcdH0gZWxzZSB7XHJcbiAgIFx0XHRyZXR1cm4gbnVsbFxyXG4gICBcdH1cclxuICAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgVXJsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuXHQgICBzdXBlcihwcm9wcyk7XHJcbiAgIH1cclxuXHJcbiAgIHJlbmRlcigpIHtcclxuICAgXHRpZih0aGlzLnByb3BzLmxpbmspIHtcclxuXHRcdCAgXHRpZih0aGlzLnByb3BzLmlzRWRpdGluZykge1xyXG5cdFx0ICBcdFx0cmV0dXJuIChcclxuXHRcdFx0ICBcdFx0PGRpdiBjbGFzc05hbWU9XCJsaW5rXCI+XHJcblx0XHRcdCAgICAgICAgXHQ8aSBjbGFzc05hbWU9XCJmYSBmYS1jbG9zZVwiIG9uQ2xpY2s9eygpID0+IHt0aGlzLnByb3BzLm9uUmVtb3ZlKCdwb3N0TGluaycpfX0+PC9pPlxyXG5cdFx0XHQgICAgICAgIFx0PGlucHV0IFxyXG5cdFx0XHQgICAgICAgIFx0XHRvbkNoYW5nZT17KGUpID0+IHt0aGlzLnByb3BzLm9uQ2hhbmdlKGUudGFyZ2V0LnZhbHVlLCAncG9zdExpbmsnKX19IFxyXG5cdFx0XHQgICAgICAgIFx0XHR0eXBlPVwidGV4dFwiIFxyXG5cdFx0XHQgICAgICAgIFx0XHRkZWZhdWx0VmFsdWU9e3RoaXMucHJvcHMubGlua30gXHJcblx0XHRcdCAgICAgICAgXHQvPlxyXG5cdFx0XHQgICAgICAgIFx0XHJcblx0XHRcdCAgICAgICAgXHQ8c3R5bGUganN4PntgXHJcblx0XHRcdFx0XHRcdFx0Lmxpbmsge1xyXG5cdFx0XHRcdCAgICAgICAgICBcdG1hcmdpbi1ib3R0b206MTVweDtcclxuXHRcdFx0XHQgICAgICAgICAgfVxyXG5cdFx0XHRcdCAgICAgICAgIC5saW5rIGkuZmEtY2xvc2Uge1xyXG5cdFx0XHRcdCAgICAgICAgIFx0Y3Vyc29pcjpwb2ludGVyO1xyXG5cdFx0XHRcdCAgICAgICAgIFx0bWFyZ2luLXJpZ2h0OjE1cHg7XHJcblx0XHRcdFx0ICAgICAgICAgIFx0b3BhY2l0eTouNDtcclxuXHRcdFx0XHQgICAgICAgICB9XHJcblx0XHRcdFx0ICAgICAgICAgLmxpbmsgaW5wdXQge1xyXG5cdFx0XHRcdCAgICAgICAgIFx0Ym9yZGVyOjBweDtcclxuXHRcdFx0XHQgICAgICAgICBcdGZvbnQtc2l6ZToxNXB4O1xyXG5cdFx0XHRcdCAgICAgICAgIFx0b3V0bGluZTpub25lO1xyXG5cdFx0XHRcdCAgICAgICAgIFx0cGFkZGluZzo1cHg7XHJcblx0XHRcdFx0ICAgICAgICAgXHR3aWR0aDo4MCU7XHJcblx0XHRcdFx0ICAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgIFx0YH08L3N0eWxlPlxyXG5cdFx0XHQgICAgICA8L2Rpdj4gXHJcblx0XHRcdCAgIClcclxuXHRcdCAgXHR9IGVsc2Uge1xyXG5cdFx0ICBcdFx0cmV0dXJuIChcclxuXHRcdCAgXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJsaW5rXCIgZGF0YS1pbnZlcnRlZD1cIlwiIFxyXG5cdFx0XHQgICAgICAgIFx0XHRkYXRhLXRvb2x0aXA9XCLQn9GA0LjQutGA0LXQv9C70LXQvdC90LDRjyDRgdGB0YvQu9C60LBcIiBcclxuXHRcdFx0ICAgICAgICBcdFx0ZGF0YS1wb3NpdGlvbj1cImJvdHRvbSBsZWZ0XCI+XHJcblx0XHRcdCAgICAgICAgXHQ8aSBjbGFzc05hbWU9XCJmYSBmYS1saW5rXCI+PC9pPlxyXG5cdFx0XHQgICAgICAgIFx0PGEgaHJlZj17dGhpcy5wcm9wcy5saW5rfSB0YXJnZXQ9XCJfYmxhbmtcIj57dGhpcy5wcm9wcy5saW5rfTwvYT5cclxuXHRcdFx0ICAgICAgICBcdDxzdHlsZSBqc3g+e2BcclxuXHRcdFx0XHRcdFx0XHQubGluayB7XHJcblx0XHRcdFx0ICAgICAgICAgIFx0bWFyZ2luLWJvdHRvbToxNXB4O1xyXG5cdFx0XHRcdCAgICAgICAgICB9XHJcblx0XHRcdFx0ICAgICAgICAgLmxpbmsgaSB7XHJcblx0XHRcdFx0ICAgICAgICAgIFx0bWFyZ2luLXJpZ2h0OjE1cHg7XHJcblx0XHRcdFx0ICAgICAgICAgIFx0b3BhY2l0eTouNDtcclxuXHRcdFx0XHQgICAgICAgICB9XHJcblx0XHRcdCAgICAgICAgXHRgfTwvc3R5bGU+XHJcblx0XHRcdCAgICAgIDwvZGl2PiBcclxuXHRcdCAgXHRcdClcclxuXHRcdCAgXHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gbnVsbFxyXG5cdFx0fVxyXG4gICB9XHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgQ29udGVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcblx0ICAgc3VwZXIocHJvcHMpO1xyXG4gICB9XHJcblxyXG4gIFx0cmVuZGVyKCkge1xyXG4gIFx0XHRpZih0aGlzLnByb3BzLmlzRWRpdGluZykge1xyXG4gIFx0XHRcdHJldHVybiAoXHJcbiAgXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImVkaXRvclwiPlxyXG4gIFx0XHRcdFx0XHQ8dGV4dGFyZWEgXHJcblx0ICBcdFx0XHRcdFx0b25DaGFuZ2U9eyhlKSA9PiB7dGhpcy5wcm9wcy5vbkNoYW5nZShlLnRhcmdldC52YWx1ZSl9fSBcclxuXHQgIFx0XHRcdFx0XHRjb2xzPVwiNFwiIFxyXG5cdCAgXHRcdFx0XHRcdGRlZmF1bHRWYWx1ZT17dGhpcy5wcm9wcy50ZXh0fSBcclxuXHQgIFx0XHRcdFx0XHRwbGFjZWhvbGRlcj1cItCS0LDRiCDRgtC10LrRgdGCLi5cIlxyXG5cdCAgXHRcdFx0XHRcdG1heExlbmd0aD1cIjE0MFwiPlxyXG4gIFx0XHRcdFx0XHQ8L3RleHRhcmVhPlxyXG4gIFx0XHRcdFx0XHQ8c3R5bGUganN4PntgXHJcblx0XHRcdFx0XHRcdC5lZGl0b3IgdGV4dGFyZWEge1xyXG5cdFx0XHRcdFx0XHRcdHdpZHRoOjEwMCU7XHJcblx0XHRcdFx0XHRcdFx0Ym9yZGVyOjFweCBzb2xpZCAjZWVlO1xyXG5cdFx0XHRcdFx0XHRcdHBhZGRpbmc6MTRweDtcclxuXHRcdFx0XHRcdFx0XHRmb250LXNpemU6MTZweDtcclxuXHRcdFx0XHRcdFx0XHRvdXRsaW5lOm5vbmU7XHJcblx0XHRcdFx0XHRcdFx0Ym9yZGVyLXJhZGl1czo0cHg7XHJcblx0XHRcdFx0XHRcdH1cclxuICBcdFx0XHRcdFx0YH08L3N0eWxlPlxyXG4gIFx0XHRcdFx0PC9kaXY+XHJcbiAgXHRcdFx0KVxyXG4gIFx0XHR9IGVsc2Uge1xyXG5cdCAgXHRcdHJldHVybiAoXHJcblx0XHQgICAgXHQ8ZGl2IGNsYXNzTmFtZT1cInRleHRcIj5cclxuXHRcdFx0ICAgICAgPHAgY2xhc3NOYW1lPVwicHJpbWFyeVwiPlxyXG5cdFx0XHQgICAgICBcdHt0aGlzLnByb3BzLnRleHR9XHJcblx0XHRcdCAgICAgIDwvcD5cclxuXHRcdCAgICAgIDwvZGl2PlxyXG5cdCAgIFx0KTtcclxuICBcdFx0fVxyXG4gICB9XHJcbn1cclxuXHJcbmNsYXNzIEltYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuXHQgICBzdXBlcihwcm9wcyk7XHJcbiAgIH1cclxuXHJcbiAgXHRyZW5kZXIoKSB7XHJcbiAgXHRcdGlmKHRoaXMucHJvcHMudXJsKSB7XHJcblx0ICBcdFx0aWYodGhpcy5wcm9wcy5pc0VkaXRpbmcpIHtcclxuXHQgIFx0XHRcdHJldHVybiAoXHJcblx0ICBcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZWRpdG9yXCI+XHJcblx0ICBcdFx0XHRcdFx0PEJsdXJJbWFnZUxvYWRlciBzcmM9e3RoaXMucHJvcHMudXJsfVxyXG5cdFx0ICAgICAgICAgICAgICAgZnVsbENvdmVyPXt0cnVlfVxyXG5cdFx0ICAgICAgICAgICAgICAgbWF4Qmx1ckxldmVsPXsxMH1cclxuXHRcdCAgICAgICAgICAgICAgIHRyYW5zaXRpb25UaW1lPXs0MDB9XHJcblx0XHQgICAgICAgICAgICAgICBsb2FkZXI9ezxMb2FkZXIgLz59XHJcblx0XHQgICAgICAgICAgICAvPlxyXG5cdCAgXHRcdFx0XHRcdDxpIGNsYXNzTmFtZT1cImZhIGZhLWNsb3NlXCIgb25DbGljaz17KCkgPT4ge3RoaXMucHJvcHMub25SZW1vdmUoJ3Bvc3RJbWFnZScpfX0+PC9pPlxyXG5cdCAgXHRcdFx0XHRcdDxzdHlsZSBqc3g+e2BcclxuXHQgIFx0XHRcdFx0XHRcdC5lZGl0b3Ige1xyXG5cdCAgXHRcdFx0XHRcdFx0XHRwb3NpdGlvbjpyZWxhdGl2ZTtcclxuXHQgIFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHQuZWRpdG9yIGkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cG9zaXRpb246YWJzb2x1dGU7XHJcblx0XHRcdFx0XHRcdFx0XHRyaWdodDowcHg7XHJcblx0XHRcdFx0XHRcdFx0XHR0b3A6MHB4O1xyXG5cdFx0XHRcdFx0XHRcdFx0cGFkZGluZzoyMHB4O1xyXG5cdFx0XHRcdFx0XHRcdFx0Zm9udC1zaXplOjE3cHg7XHJcblx0XHRcdFx0XHRcdFx0XHRjb2xvcjojMDAwO1xyXG5cdFx0XHRcdFx0XHRcdFx0b3BhY2l0eTowLjU7XHJcblx0XHRcdFx0XHRcdFx0XHR0cmFuc2l0aW9uOjAuMnMgYWxsIGVhc2U7XHJcblx0XHRcdFx0XHRcdFx0XHRjdXJzb3I6cG9pbnRlcjtcclxuXHRcdFx0XHRcdFx0XHRcdHotaW5kZXg6OTk5O1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHQuZWRpdG9yIGk6aG92ZXIge1xyXG5cdFx0XHRcdFx0XHRcdFx0b3BhY2l0eToxLjA7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdCAgXHRcdFx0XHRcdGB9PC9zdHlsZT5cclxuXHQgIFx0XHRcdFx0PC9kaXY+XHJcblx0ICBcdFx0XHQpXHJcblx0ICBcdFx0fSBlbHNlIHtcclxuXHRcdCAgXHRcdHJldHVybiAoXHJcblx0XHRcdCAgICBcdDxkaXYgY2xhc3NOYW1lPVwiaW1hZ2VcIj5cclxuXHRcdFx0ICAgICAgXHQ8Qmx1ckltYWdlTG9hZGVyIHNyYz17dGhpcy5wcm9wcy51cmx9XHJcblx0XHQgICAgICAgICAgICAgICBmdWxsQ292ZXI9e3RydWV9XHJcblx0XHQgICAgICAgICAgICAgICBtYXhCbHVyTGV2ZWw9ezEwfVxyXG5cdFx0ICAgICAgICAgICAgICAgdHJhbnNpdGlvblRpbWU9ezQwMH1cclxuXHRcdCAgICAgICAgICAgICAgIGxvYWRlcj17PExvYWRlciAvPn1cclxuXHRcdCAgICAgICAgICAgIC8+XHJcblx0XHRcdCAgICAgIDwvZGl2PlxyXG5cdFx0ICAgXHQpO1xyXG5cdCAgXHRcdH1cclxuXHQgIFx0fSBlbHNlIHtcclxuXHQgIFx0XHRyZXR1cm4gbnVsbFxyXG5cdCAgXHR9XHJcbiAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIEFjdGlvbkJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcblx0ICAgc3VwZXIocHJvcHMpO1xyXG4gICB9XHJcblxyXG4gICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgXHRVSSgpXHJcbiAgIH1cclxuXHJcbiAgIG9uVmlkZW8oZSwgdmFsdWUpIHtcclxuICAgICAgaWYoZS5rZXlDb2RlID09IDEzKSB7XHJcbiAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgdGhpcy5wcm9wcy5vblZpZGVvKHZhbHVlKVxyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgXHRyZW5kZXIoKSB7XHJcbiAgXHRcdHZhciBwb3N0ID0gdGhpcy5wcm9wcy5wb3N0O1xyXG4gIFx0XHRpZiAocG9zdCkge1xyXG5cdFx0ICBcdGlmICh0aGlzLnByb3BzLmlzRWRpdGluZykge1xyXG5cdFx0ICAgXHRyZXR1cm4gKFxyXG5cdFx0XHQgICAgICA8ZGl2PlxyXG5cdFx0ICAgICAgICBcdFx0PHNwYW4gb25DbGljaz17KCkgPT4ge3RoaXMucHJvcHMub25TYXZlKHBvc3QpfX0gY2xhc3NOYW1lPVwidWkgYnV0dG9uIHNtYWxsIGNpcmN1bGFyIHByaW1hcnlcIj7QodC+0YXRgNCw0L3QuNGC0Yw8L3NwYW4+XHJcblx0XHQgICAgICAgIFx0XHQ8c3BhbiBvbkNsaWNrPXsoKSA9PiB7dGhpcy5wcm9wcy5vbkNhbmNlbCgpfX0gY2xhc3NOYW1lPVwidWkgYnV0dG9uIHNtYWxsIGNpcmN1bGFyIGRlZmF1bHRcIj7QntGC0LzQtdC90LA8L3NwYW4+XHJcblx0XHQgICAgICBcdCAgIHsoIXBvc3QucG9zdEltYWdlIFxyXG5cdFx0ICAgICAgXHQgICBcdCYmICFwb3N0LnBvc3RWaWRlbykgXHJcblx0XHQgICAgICBcdCAgIFx0JiZcclxuXHRcdFx0ICAgICAgICAgICAgPHNwYW4+XHJcblx0XHRcdFx0ICAgICAgICAgICAgPHNwYW4gXHJcblx0XHRcdFx0XHQgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7dGhpcy5pbWFnZS5jbGljaygpfX0gXHJcblx0XHRcdFx0XHQgICAgICAgICAgICBjbGFzc05hbWU9XCJ1aSBidXR0b24gaWNvbiBjaXJjdWxhciBzbWFsbCBiYXNpY1wiPlxyXG5cdFx0XHRcdCAgICAgICAgICAgIFx0PGkgY2xhc3NOYW1lPVwiZmEgZmEtaW1hZ2VcIj48L2k+XHJcblx0XHRcdFx0ICAgICAgICAgICAgPC9zcGFuPlxyXG5cdFx0XHRcdCAgICAgICAgIFx0PGlucHV0IFxyXG5cdFx0XHQgIFx0XHRcdFx0XHRcdHJlZj17KGUpID0+IHt0aGlzLmltYWdlID0gZX19XHJcblx0XHRcdFx0ICBcdFx0XHRcdFx0dHlwZT1cImZpbGVcIiBcclxuXHRcdFx0XHQgIFx0XHRcdFx0XHRjbGFzc05hbWU9XCJ1aSBoaWRkZW5cIiBcclxuXHRcdFx0XHQgIFx0XHRcdFx0XHRvbkNoYW5nZT17KGUpID0+IHt0aGlzLnByb3BzLm9uVXBsb2FkKGUudGFyZ2V0LmZpbGVzWzBdKX19IFxyXG5cdFx0XHQgIFx0XHRcdFx0XHQvPlxyXG5cdFx0ICBcdFx0XHRcdFx0PC9zcGFuPlxyXG5cdFx0XHQgICAgICAgICB9XHJcblx0XHRcdCAgICAgICAgIHsoIXBvc3QucG9zdFZpZGVvIFxyXG5cdFx0XHQgICAgICAgICBcdCYmICFwb3N0LnBvc3RJbWFnZSkgJiZcclxuXHRcdFx0ICAgICAgICAgICAgPHNwYW4+XHJcblx0XHRcdFx0ICAgICAgICAgICAgPHNwYW4gXHJcblx0XHRcdFx0ICAgICAgICAgICAgXHRvbkNsaWNrPXsoKSA9PiB7JCgnLnVpLnZpZGVvLmJ1dHRvbicpLnBvcHVwKHtwb3B1cDogJy51aS52aWRlby5wb3B1cCcsIG9uOiAnY2xpY2snfSl9fSBcclxuXHRcdFx0XHQgICAgICAgICAgICBcdGNsYXNzTmFtZT1cInVpIGJ1dHRvbiB2aWRlbyBpY29uIGNpcmN1bGFyIHNtYWxsIGJhc2ljXCI+XHJcblx0XHRcdFx0ICAgICAgICAgICAgXHQ8aSBjbGFzc05hbWU9XCJmYSBmYS12aWRlby1jYW1lcmFcIj48L2k+XHJcblx0XHRcdFx0ICAgICAgICAgICAgPC9zcGFuPlxyXG5cdFx0XHRcdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9wdXAgdmlkZW8gdWlcIj5cclxuXHRcdFx0XHQgICAgICAgICAgICAgICA8aW5wdXQgXHJcblx0XHRcdFx0ICAgICAgICAgICAgICAgIG9uS2V5RG93bj17KGUpID0+IHt0aGlzLm9uVmlkZW8oZSwgZS50YXJnZXQudmFsdWUpfX1cclxuXHRcdFx0XHQgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIiBcclxuXHRcdFx0XHQgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCLQodGB0YvQu9C60LAg0L3QsCDQstC40LTQtdC+INGBIFlvdVR1YmVcIiAvPlxyXG5cdFx0XHRcdCAgICAgICAgICAgIDwvZGl2PlxyXG5cdFx0XHQgICAgICAgICAgICA8L3NwYW4+XHJcblx0XHRcdCAgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAgPHN0eWxlIGpzeD57YFxyXG5cdFx0XHRcdFx0XHRcdC5wb3B1cCBpbnB1dCB7XHJcblx0XHRcdFx0XHRcdFx0XHRib3JkZXI6MHB4O1xyXG5cdFx0XHRcdFx0XHRcdFx0Zm9udC1zaXplOjE3cHg7XHJcblx0XHRcdFx0XHRcdFx0XHRwYWRkaW5nOjVweDtcclxuXHRcdFx0XHRcdFx0XHRcdG91dGxpbmU6bm9uZTtcclxuXHRcdFx0XHRcdFx0XHRcdHdpZHRoOjM1MHB4O1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0ICAgICAgICAgYH08L3N0eWxlPlxyXG5cdFx0XHQgICAgICA8L2Rpdj5cclxuXHRcdCAgICBcdCk7XHJcblx0XHQgICB9IGVsc2Uge1xyXG5cdFx0ICAgXHRyZXR1cm4gKFxyXG5cdFx0ICAgXHRcdDxzcGFuPlxyXG5cdFx0XHQgICAgICAgIFx0PGEgb25DbGljaz17KCkgPT4ge3RoaXMucHJvcHMub25MaWtlKCl9fVxyXG5cdFx0ICAgICAgICBcdFx0XHRjbGFzc05hbWU9XCJpdGVtXCI+XHJcblx0XHRcdCAgICAgICAgXHRcdDxpIGNsYXNzTmFtZT17KHRoaXMucHJvcHMuaXNMaWtlZCkgPyBcclxuXHRcdFx0ICAgICAgICBcdFx0XHRgZmEgZmEtaGVhcnQgaWNvbmAgOiBcclxuXHRcdFx0ICAgICAgICBcdFx0XHRgZmEgZmEtaGVhcnQtbyBpY29uYH0+XHJcblx0XHRcdCAgICAgICAgXHRcdDwvaT4ge3RoaXMucHJvcHMubGlrZUNvdW50ZXJ9INCc0L3QtSDQvdGA0LDQstC40YLRgdGPXHJcblx0XHRcdCAgICAgICAgXHQ8L2E+XHJcblx0XHRcdCAgICAgICAgXHQ8YSBvbkNsaWNrPXsoKSA9PiB7dGhpcy5wcm9wcy5vbkNvbW1lbnQoKX19IFxyXG5cdFx0ICAgICAgICBcdFx0XHRjbGFzc05hbWU9XCJpdGVtXCI+XHJcblx0XHRcdCAgICAgICAgXHRcdDxpIGNsYXNzTmFtZT1cImZhIGZhLWNvbW1lbnQtbyBpY29uXCI+PC9pPiDQntGB0YLQsNCy0LjRgtGMINC60L7QvNC80LXQvdGC0LDRgNC40LlcclxuXHRcdFx0ICAgICAgICBcdDwvYT5cclxuXHRcdFx0ICAgICAgICBcdDxzdHlsZSBqc3g+e2BcclxuXHRcdFx0XHRcdFx0XHQubm90ZSAubWV0YSAuYnV0dG9uLmRlZmF1bHQge1xyXG5cdFx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZDojZmFmYWZhO1xyXG5cdFx0XHRcdFx0XHRcdFx0dHJhbnNpdGlvbjowLjJzIGFsbCBlYXNlO1xyXG5cdFx0XHRcdCAgICAgICAgXHQgfVxyXG5cdFx0XHRcdCAgICAgICAgXHQgLm5vdGUgLm1ldGEgLmJ1dHRvbi5kZWZhdWx0OmhvdmVyIHtcclxuXHRcdFx0XHQgICAgICAgIFx0IFx0YmFja2dyb3VuZDojZWVlO1xyXG5cdFx0XHRcdCAgICAgICAgXHQgfVxyXG5cdFx0XHRcdCAgICAgICAgXHQgLml0ZW0ge1xyXG5cdFx0XHRcdCAgICAgICAgXHQgXHRjdXJzb3I6cG9pbnRlcjtcclxuXHRcdFx0XHQgICAgICAgIFx0IFx0Zm9udC1zaXplOjE1cHg7XHJcblx0XHRcdFx0ICAgICAgICBcdCBcdG1hcmdpbi1yaWdodDoxNXB4O1xyXG5cdFx0XHRcdCAgICAgICAgXHQgfVxyXG5cdFx0XHRcdCAgICAgICAgXHQgLml0ZW06bGFzdC1jaGlsZCB7XHJcblx0XHRcdFx0ICAgICAgICBcdCBcdG1hcmdpbi1yaWdodDowcHg7XHJcblx0XHRcdFx0ICAgICAgICBcdCB9XHJcblx0XHRcdFx0ICAgICAgICBcdCAuZmEtaGVhcnQge1xyXG5cdFx0XHRcdCAgICAgICAgXHQgXHRjb2xvcjojNTdjMWIzIWltcG9ydGFudDtcclxuXHRcdFx0XHQgICAgICAgIFx0IH1cclxuXHRcdCAgICAgICAgXHRcdGB9PC9zdHlsZT5cclxuXHRcdCAgICAgICAgXHQ8L3NwYW4+XHJcblx0XHQgICBcdClcclxuXHRcdCAgIH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybiBudWxsXHJcblx0XHR9XHJcbiAgXHR9XHJcbn1cclxuXHJcblxyXG5cclxudmFyIEJsYW5rID0gKCkgPT4ge1xyXG5cdHJldHVybiAoXHJcblx0XHQ8ZGl2PlxyXG4gICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVzZXJcIj5cclxuXHQgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImltYWdlXCI+XHJcblx0ICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJibGFuayBhdmF0YXJcIj48L2Rpdj5cclxuXHQgICAgICAgICA8L2Rpdj5cclxuXHQgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRcIj5cclxuXHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJsYW5rIHN0cmluZ1wiPjwvZGl2PlxyXG5cdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxhbmsgc3RyaW5nXCI+PC9kaXY+XHJcblx0ICAgICAgICAgPC9kaXY+XHJcblx0ICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudFwiPlxyXG5cdCAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxhbmsgaGVhZGVyXCI+PC9kaXY+XHJcblx0ICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJibGFuayBkZXNjcmlwdGlvblwiPjwvZGl2PlxyXG5cdCAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxhbmsgZGVzY3JpcHRpb25cIj48L2Rpdj5cclxuICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgIDxzdHlsZSBqc3g+e2BcclxuXHQgICAgICAgICAudXNlciAuY29udGVudCB7XHJcblx0ICAgICAgICAgICAgbWFyZ2luLWxlZnQ6MTVweDtcclxuXHQgICAgICAgICB9XHJcblx0ICAgICAgICAgLnVzZXIge1xyXG5cdCAgICAgICAgICAgIGRpc3BsYXk6ZmxleDtcclxuXHQgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjpyb3c7XHJcblx0ICAgICAgICAgfVxyXG4gICAgICAgICBgfTwvc3R5bGU+XHJcblx0ICAgPC9kaXY+XHJcblx0KVxyXG59XHJcblxyXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcclxuICByZXR1cm4geyBcclxuICAgIGN1cnJlbnRVc2VyOiBzdGF0ZS5jdXJyZW50VXNlclxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKE5vdGUpXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbXBvbmVudHMvaXNvbW9ycGhpYy9mZWVkL3ZpZXdzL25vdGUuanMiLCIvLyBJbXBvcnRhbnRcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNvb2tpZXMgZnJvbSAnanMtY29va2llJ1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbmltcG9ydCBkeW5hbWljIGZyb20gJ25leHQvZHluYW1pYydcclxuXHJcbi8vIEFjdGlvbnNcclxuaW1wb3J0IHsgc2V0TGlrZUJ5SWQgfSBmcm9tICcuLi8uLi8uLi8uLi9hY3Rpb25zL3Bvc3QuanMnXHJcblxyXG4vLyBDb21wb25lbnRzXHJcbmltcG9ydCBVc2VyIGZyb20gJy4uLy4uL3VzZXIuanMnXHJcbmltcG9ydCBCbG9nIGZyb20gJy4uLy4uL2Jsb2cuanMnXHJcbmltcG9ydCBUaW1lQWdvIGZyb20gJ3RpbWVhZ28tcmVhY3QnO1xyXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnXHJcbmltcG9ydCBMb2FkZXIgZnJvbSAnLi4vLi4vbG9hZGVyLmpzJ1xyXG5cclxuLy8gRHluYW1pY3NcclxudmFyIEJsdXJJbWFnZUxvYWRlciA9IGR5bmFtaWMoaW1wb3J0KCdyZWFjdC1ibHVyLWltYWdlLWxvYWRlcicpKVxyXG5cclxuXHJcbmNsYXNzIERlZmF1bHQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnRva2VuID0gY29va2llcy5nZXQoJ3gtYWNjZXNzLXRva2VuJylcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGlzTGlrZWQ6IGZhbHNlLFxyXG4gICAgICBsaWtlQ291bnRlcjogMFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUmVhY3QgTGlmZUN5Y2xlXHJcblxyXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuICAgIGlmKHRoaXMucHJvcHMuY3VycmVudFVzZXIpIHtcclxuICAgICAgaWYodGhpcy5wcm9wcy5wb3N0LnBvc3RMaWtlcy5pbmRleE9mKHRoaXMucHJvcHMuY3VycmVudFVzZXIuX2lkKSAhPSAtMSkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgaXNMaWtlZDogdHJ1ZSxcclxuICAgICAgICAgIGxpa2VDb3VudGVyOiB0aGlzLnByb3BzLnBvc3QucG9zdExpa2VzLmxlbmd0aFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7ICBcclxuICAgIGlmKG5leHRQcm9wcy5jdXJyZW50VXNlcikge1xyXG4gICAgICBpZihuZXh0UHJvcHMucG9zdC5wb3N0TGlrZXMuaW5kZXhPZihuZXh0UHJvcHMuY3VycmVudFVzZXIuX2lkKSAhPSAtMSkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgaXNMaWtlZDogdHJ1ZSxcclxuICAgICAgICAgIGxpa2VDb3VudGVyOiBuZXh0UHJvcHMucG9zdC5wb3N0TGlrZXMubGVuZ3RoXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gU3BlY2lmaWMgTWV0aG9kc1xyXG5cclxuICBoYW5kbGVMaWtlKHRva2VuLCBwb3N0SUQsIHVzZXJJRCkge1xyXG4gICAgc2V0TGlrZUJ5SWQodG9rZW4sIHBvc3RJRCkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIGlmKHJlcy5kYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIC4uLnRoaXMuc3RhdGUucG9zdCxcclxuICAgICAgICAgIGlzTGlrZWQ6ICF0aGlzLnN0YXRlLmlzTGlrZWQsXHJcbiAgICAgICAgICBsaWtlQ291bnRlcjogcmVzLmRhdGEuY291bnRlclxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICB2YXIgcG9zdCA9IHRoaXMucHJvcHMucG9zdFxyXG4gICAgaWYgKHBvc3QpIHtcclxuICAgICAgdmFyIGNvbW1lbnRzID0gcG9zdC5wb3N0Q29tbWVudHNDb3VudDtcclxuICAgICAgdmFyIGxpa2VzID0gdGhpcy5zdGF0ZS5saWtlQ291bnRlcjtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8YXJ0aWNsZSBjbGFzc05hbWU9e2BhcnRpY2xlIGJsb2NrLWl0ZW0gcHJldmlldyBncmlkLWl0ZW0gdy0xMDBgfT5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXNlclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxlZnRcIj5cclxuICAgICAgICAgICAgICB7KHBvc3QucG9zdEF1dGhvci5hdXRob3JUeXBlID09ICd1c2VyJykgP1xyXG4gICAgICAgICAgICAgICAgPFVzZXIgaWQ9e3Bvc3QucG9zdEF1dGhvci5hdXRob3JJRH0gLz4gOiA8QmxvZyBpZD17cG9zdC5wb3N0QXV0aG9yLmF1dGhvcklEfSAvPlxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmlnaHRcIj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVpIGRyb3Bkb3duXCI+XHJcbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1lbGxpcHNpcy1oXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZW51XCI+XHJcbiAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9e3sgcGF0aG5hbWU6ICdlZGl0b3InLCBxdWVyeTogeyBpZDogcG9zdC5faWQgfX19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaXRlbVwiPtCg0LXQtNCw0LrRgtC40YDQvtCy0LDRgtGMPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpdGVtXCIgb25DbGljaz17KCkgPT4ge2NvbnNvbGUubG9nKCcqbW9kYWwnKX19PtCf0L7QttCw0LvQvtCy0LDRgtGM0YHRjzwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICB7cG9zdC5wb3N0SW1hZ2UgJiZcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbWFnZVwiPlxyXG4gICAgICAgICAgICAgIDxCbHVySW1hZ2VMb2FkZXIgc3JjPXtwb3N0LnBvc3RJbWFnZX1cclxuICAgICAgICAgICAgICAgIGZ1bGxDb3Zlcj17dHJ1ZX1cclxuICAgICAgICAgICAgICAgIG1heEJsdXJMZXZlbD17MTB9XHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltZT17NDAwfVxyXG4gICAgICAgICAgICAgICAgbG9hZGVyPXs8TG9hZGVyIC8+fVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50XCI+XHJcbiAgICAgICAgICAgIDxMaW5rIGhyZWY9e3sgcGF0aG5hbWU6ICdwb3N0JywgcXVlcnk6IHsgc2x1ZzogcG9zdC5zbHVnIH19fT5cclxuICAgICAgICAgICAgICA8YT48aDE+e3Bvc3QucG9zdFRpdGxlfTwvaDE+PC9hPlxyXG4gICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInByaW1hcnlcIj57KHBvc3QucG9zdERlc2NyaXB0aW9uKSA/IHBvc3QucG9zdERlc2NyaXB0aW9uIDogJyd9PC9wPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1ldGFcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsZWZ0XCI+XHJcbiAgICAgICAgICAgICAgPHNwYW4gb25DbGljaz17KCkgPT4ge3RoaXMuaGFuZGxlTGlrZSh0aGlzLnRva2VuLCBwb3N0Ll9pZCwgdGhpcy5wcm9wcy5jdXJyZW50VXNlci5faWQpfX1cclxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9eyh0aGlzLnN0YXRlLmlzTGlrZWQpID8gXHJcbiAgICAgICAgICAgICAgICAgICAgYGZhIGZhLWhlYXJ0IGljb25gIDogXHJcbiAgICAgICAgICAgICAgICAgICAgYGZhIGZhLWhlYXJ0LW8gaWNvbmB9PlxyXG4gICAgICAgICAgICAgICAgICA8L2k+IHt0aGlzLnN0YXRlLmxpa2VDb3VudGVyfSDQnNC90LUg0L3RgNCw0LLQuNGC0YHRj1xyXG4gICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICA8TGluayBocmVmPXt7IHBhdGhuYW1lOiAncG9zdCcsIHF1ZXJ5OiB7IHNsdWc6IHBvc3Quc2x1ZyB9fX0+XHJcbiAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJpdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNvbW1lbnQtbyBpY29uXCI+PC9pPiB7cG9zdC5wb3N0Q29tbWVudHMubGVuZ3RofSDQmtC+0LzQvNC10L3RgtCw0YDQuNC10LJcclxuICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgICAgPExpbmsgaHJlZj17eyBwYXRobmFtZTogJ3Bvc3QnLCBxdWVyeTogeyBzbHVnOiBwb3N0LnNsdWcgfX19PlxyXG4gICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1jb21tZW50LW8gaWNvblwiPjwvaT4g0KfQuNGC0LDRgtGMINC00LDQu9C10LVcclxuICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGltZVwiPlxyXG4gICAgICAgICAgICAgICAgPFRpbWVBZ28gZGF0ZXRpbWU9e3Bvc3QudXBkYXRlZH0gbG9jYWxlPSdydScgLz5cclxuICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8c3R5bGUganN4PntgXHJcbiAgICAgICAgICAgIC5hcnRpY2xlIC51c2VyIHtcclxuICAgICAgICAgICAgICBtYXJnaW4tdG9wOjBweDtcclxuICAgICAgICAgICAgICBkaXNwbGF5OmZsZXg7XHJcbiAgICAgICAgICAgICAgYWxpZ24taXRlbXM6Y2VudGVyO1xyXG4gICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC5hcnRpY2xlIC5pbWFnZSB7XHJcbiAgICAgICAgICAgICAgbWFyZ2luLXRvcDoxNXB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC5hcnRpY2xlIC5tZXRhIHtcclxuICAgICAgICAgICAgICBtYXJnaW4tdG9wOjIwcHg7XHJcbiAgICAgICAgICAgICAgd2lkdGg6MTAwJTtcclxuICAgICAgICAgICAgICBkaXNwbGF5OmZsZXg7XHJcbiAgICAgICAgICAgICAgYWxpZ24taXRlbXM6Y2VudGVyO1xyXG4gICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC5hcnRpY2xlIC5tZXRhIC5pdGVtIHtcclxuICAgICAgICAgICAgICBjdXJzb3I6cG9pbnRlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAuYXJ0aWNsZSAubWV0YSAuYnV0dG9uIHtcclxuICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6MTBweDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAuYXJ0aWNsZSAubWV0YSAudGltZSB7XHJcbiAgICAgICAgICAgICAgY29sb3I6I2MwYzBjMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAuYXJ0aWNsZSAubWV0YSAuZmEuZmEtaGVhcnQge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiM1N2MxYjM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLmFydGljbGUgLnVzZXIgLmRyb3Bkb3duIGkge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiNjMGMwYzA7XHJcbiAgICAgICAgICAgICAgZm9udC1zaXplOjE2cHg7XHJcbiAgICAgICAgICAgICAgdHJhbnNpdGlvbjowLjJzIGFsbCBlYXNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC5hcnRpY2xlIC51c2VyIC5kcm9wZG93biBpOmhvdmVyIHtcclxuICAgICAgICAgICAgICBjb2xvcjojMDAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC5hcnRpY2xlIC51c2VyIC5kcm9wZG93biAubWVudSB7XHJcbiAgICAgICAgICAgICAgbGVmdDphdXRvIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICByaWdodDotMTVweCFpbXBvcnRhbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIGB9PC9zdHlsZT5cclxuICAgICAgICA8L2FydGljbGU+XHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gPEJsYW5rIC8+XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcclxuICByZXR1cm4geyBcclxuICAgIGN1cnJlbnRVc2VyOiBzdGF0ZS5jdXJyZW50VXNlclxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKERlZmF1bHQpXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbXBvbmVudHMvaXNvbW9ycGhpYy9mZWVkL3ZpZXdzL2RlZmF1bHQuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7QUFFQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7Ozs7QUF0QkE7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUpBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFEQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7Ozs7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUdBO0FBRkE7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBREE7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRkE7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBREE7Ozs7QUFNQTtBQUNBO0FBQUE7QUFJQTtBQUNBOzs7OztBQUFBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFFQTtBQUNBOzs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7O0FBRUE7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQURBO0FBSEE7QUFPQTtBQUVBO0FBQ0E7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7O0FBRUE7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBR0E7QUFGQTtBQUdBO0FBQ0E7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUNBOzs7OztBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFFQTtBQURBO0FBTUE7QUFDQTs7OztBQUVBO0FBQ0E7QUFFQTtBQURBOzs7O0FBT0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUVBOztBQUFBO0FBQ0E7QUFEQTtBQUFBOztBQUNBO0FBQ0E7QUFEQTtBQUNBOztBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUdBO0FBSEE7QUFBQTs7QUFHQTtBQUNBO0FBREE7QUFDQTs7QUFBQTtBQUNBO0FBREE7QUFDQTs7QUFBQTtBQUNBO0FBREE7QUFDQTs7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFLQTs7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBSEE7O0FBQUE7QUFLQTtBQUxBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUhBOztBQUFBO0FBTUE7QUFOQTtBQUNBOztBQUtBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFIQTs7QUFBQTtBQU1BO0FBTkE7QUFDQTs7QUFLQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBSkE7O0FBQUE7QUFPQTtBQVBBO0FBQ0E7O0FBTUE7QUFDQTtBQURBO0FBQ0E7O0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFWQTs7QUFBQTtBQWFBO0FBYkE7QUFDQTs7QUFZQTtBQUNBO0FBREE7QUFDQTs7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBSUE7QUFKQTtBQUlBOztBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUhBO0FBQUE7QUFBQTtBQUNBO0FBcEVBO0FBb0hBO0FBcEhBO0FBRkE7QUF1SEE7O0FBQUE7QUFDQTtBQURBO0FBQUE7QUFFQTs7Ozs7QUF4UEE7QUFDQTtBQTBQQTtBQUNBO0FBQ0E7QUFEQTtBQUFBO0FBQ0E7QUFDQTs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBRUE7O0FBQUE7QUFDQTtBQURBO0FBQUE7QUFHQTtBQUNBO0FBQUE7QUFFQTtBQUFBOztBQUxBO0FBT0E7QUFQQTtBQUNBO0FBTUE7QUFDQTtBQUFBOztBQURBO0FBQUE7QUFBQTs7QUFSQTtBQThCQTtBQTlCQTtBQUZBOztBQW9DQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBTEE7QUFRQTtBQVJBO0FBQ0E7QUFRQTtBQTVDQTtBQThDQTtBQUNBOzs7OztBQXJEQTtBQUNBO0FBd0RBO0FBQ0E7QUFDQTtBQURBO0FBQUE7QUFDQTtBQUNBOzs7OztBQUVBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFFQTs7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUNBO0FBQUE7O0FBQUE7QUFDQTtBQURBOztBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFIQTs7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUhBO0FBMkJBO0FBM0JBO0FBRkE7QUErQkE7QUFFQTtBQUFBOztBQUZBO0FBR0E7QUFIQTtBQUFBOztBQUdBO0FBQ0E7QUFEQTtBQUNBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBSkE7QUFnQkE7QUFoQkE7QUFpQkE7QUFqREE7QUFtREE7QUFDQTs7Ozs7QUExREE7QUFDQTtBQThEQTtBQUNBO0FBQ0E7QUFEQTtBQUFBO0FBQ0E7QUFDQTs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFEQTtBQUVBOztBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7O0FBTEE7QUFBQTtBQUFBO0FBQ0E7QUFGQTtBQW9CQTtBQXBCQTtBQUZBO0FBd0JBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUtBOzs7OztBQXJDQTtBQUNBO0FBdUNBO0FBQ0E7QUFDQTtBQURBO0FBQUE7QUFDQTtBQUNBOzs7OztBQUVBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFFQTs7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUpBO0FBTUE7QUFOQTtBQU1BO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBUEE7QUE4QkE7QUE5QkE7QUFGQTtBQWtDQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBSkE7QUFRQTtBQVJBOztBQVNBO0FBN0NBO0FBK0NBO0FBQ0E7Ozs7O0FBdERBO0FBQ0E7QUF5REE7QUFDQTtBQUNBO0FBREE7QUFBQTtBQUNBO0FBQ0E7Ozs7O0FBR0E7QUFDQTs7OztBQUVBO0FBQ0E7QUFFQTtBQUFBO0FBRUE7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFFQTtBQUFBOztBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQ0E7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFHQTs7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUVBO0FBQUE7QUFDQTtBQUFBOztBQUZBO0FBR0E7QUFIQTtBQUNBOztBQUVBO0FBRUE7QUFGQTs7QUFHQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUpBO0FBQUE7O0FBQUE7QUFRQTtBQVJBO0FBQ0E7QUFTQTs7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUVBO0FBQUE7QUFDQTtBQUFBOztBQUZBO0FBR0E7QUFIQTtBQUNBOztBQUVBO0FBRUE7QUFGQTtBQUVBOztBQUFBO0FBQ0E7QUFEQTs7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUFBOztBQUhBO0FBQUE7QUFBQTtBQUNBO0FBOUJBO0FBK0NBO0FBL0NBO0FBRkE7QUFtREE7QUFBQTs7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUNBO0FBQ0E7QUFBQTs7QUFEQTtBQUVBO0FBRkE7QUFFQTs7QUFBQTtBQUFBO0FBQUE7QUFHQTtBQUVBO0FBQ0E7QUFBQTs7QUFEQTtBQUVBO0FBRkE7QUFFQTs7QUFBQTtBQUFBO0FBQUE7QUFGQTtBQVJBO0FBa0NBO0FBbENBO0FBbUNBO0FBdkZBO0FBeUZBO0FBQ0E7Ozs7O0FBNUdBO0FBQ0E7QUFnSEE7QUFFQTtBQUFBOztBQUFBO0FBQ0E7QUFEQTtBQUFBOztBQUNBO0FBQ0E7QUFEQTtBQUNBOztBQUFBO0FBQ0E7QUFEQTtBQUNBOztBQUFBO0FBRUE7QUFGQTtBQUVBOztBQUFBO0FBQ0E7QUFEQTtBQUNBOztBQUFBO0FBQ0E7QUFEQTtBQUNBOztBQUFBO0FBR0E7QUFIQTtBQUdBOztBQUFBO0FBQ0E7QUFEQTtBQUNBOztBQUFBO0FBQ0E7QUFEQTtBQUNBOztBQUFBO0FBQ0E7QUFEQTtBQUNBOztBQUFBO0FBQUE7QUFBQTs7QUFiQTtBQTBCQTtBQTFCQTtBQUZBO0FBQ0E7QUE2QkE7O0FBRUE7QUFBQTtBQUlBO0FBQ0E7QUFEQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzVvQkE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7QUFFQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7Ozs7QUFmQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBREE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFFQTtBQUFBO0FBREE7QUFHQTtBQUVBO0FBQ0E7Ozs7O0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBREE7QUFJQTtBQUNBOzs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBREE7QUFJQTtBQUNBO0FBRUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBREE7QUFJQTtBQUNBOzs7O0FBRUE7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFBQTtBQUNBO0FBREE7QUFBQTs7QUFDQTtBQUNBO0FBREE7QUFDQTs7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFHQTtBQUhBO0FBQUE7O0FBR0E7QUFDQTtBQURBO0FBQ0E7O0FBQUE7QUFDQTtBQURBO0FBQ0E7O0FBQUE7QUFDQTtBQURBO0FBQ0E7O0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFDQTs7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBS0E7O0FBQ0E7QUFDQTtBQURBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFKQTtBQVFBO0FBUkE7QUFRQTs7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBREE7QUFDQTs7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7QUFBQTs7QUFEQTtBQUVBO0FBRkE7QUFFQTs7QUFBQTtBQUFBO0FBQUE7QUFHQTtBQUVBO0FBQ0E7QUFEQTtBQUNBOztBQUFBO0FBQ0E7QUFEQTtBQUNBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBR0E7QUFDQTtBQURBO0FBQ0E7O0FBQUE7QUFDQTtBQURBO0FBQ0E7O0FBQUE7QUFBQTtBQUFBO0FBSUE7O0FBQUE7QUFDQTtBQURBO0FBQ0E7O0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7O0FBekRBO0FBeUdBO0FBekdBO0FBSkE7QUE4R0E7O0FBQUE7QUFDQTtBQURBO0FBQUE7QUFFQTs7Ozs7QUFsS0E7QUFDQTtBQW9LQTs7QUFFQTtBQUFBO0FBSUE7QUFDQTtBQURBO0FBQ0E7Ozs7O0EiLCJzb3VyY2VSb290IjoiIn0=