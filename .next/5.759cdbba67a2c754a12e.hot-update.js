webpackHotUpdate(5,{

/***/ 707:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getPrototypeOf = __webpack_require__(37);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(18);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(19);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(40);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(39);

var _inherits3 = _interopRequireDefault(_inherits2);

var _style = __webpack_require__(567);

var _style2 = _interopRequireDefault(_style);

var _react = __webpack_require__(10);

var _react2 = _interopRequireDefault(_react);

var _reactAvatar = __webpack_require__(571);

var _reactAvatar2 = _interopRequireDefault(_reactAvatar);

var _blog = __webpack_require__(592);

var _link = __webpack_require__(562);

var _link2 = _interopRequireDefault(_link);

var _loader = __webpack_require__(569);

var _loader2 = _interopRequireDefault(_loader);

var _subscribeButton = __webpack_require__(596);

var _subscribeButton2 = _interopRequireDefault(_subscribeButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 1 Level: accepting userlist data
// 2 Level: accepting userID and retriving userSubscriptions
// 3 Level: accepting nothing and retriving all users

var BlogList = function (_React$Component) {
	(0, _inherits3.default)(BlogList, _React$Component);

	function BlogList(props) {
		(0, _classCallCheck3.default)(this, BlogList);

		var _this = (0, _possibleConstructorReturn3.default)(this, (BlogList.__proto__ || (0, _getPrototypeOf2.default)(BlogList)).call(this, props));

		_this.state = {
			blogs: [],
			isLoaded: false
		};
		return _this;
	}

	(0, _createClass3.default)(BlogList, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			var _this2 = this;

			if (this.props.blogs === undefined) {
				if (this.props.subscriber) {
					(0, _blog.getUserSubscriptions)(this.props.subscriber).then(function (res) {
						_this2.setState({
							blogs: res.data
						});
					});
				} else {
					(0, _blog.getBlogs)().then(function (res) {
						_this2.setState({
							blogs: res.data
						});
					});
				}
			} else {
				this.setState({
					blogs: this.props.blogs
				});
			}
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			if (nextProps.blogs) {
				this.setState({
					blogs: nextProps.blogs
				});
			}
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.setState({
				isLoaded: true
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _this3 = this;

			console.log(this.state);
			if (this.state.isLoaded) {
				if (this.state.blogs.length == 0) {
					return _react2.default.createElement('div', { className: 'no-content' }, _react2.default.createElement('p', null, '\u0421\u043F\u0438\u0441\u043E\u043A \u043F\u0443\u0441\u0442'));
				} else {
					return _react2.default.createElement('div', { className: 'blog-list', 'data-jsx': 3547502014
					}, this.state.blogs.map(function (item, i) {
						return _react2.default.createElement(Blog, { size: _this3.props.size, blogData: item, key: i });
					}), _react2.default.createElement(_style2.default, {
						styleId: 3547502014,
						css: '.blog-list[data-jsx="3547502014"] {width:100%;}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\blogList.js */'
					}));
				}
			} else {
				return _react2.default.createElement(_loader2.default, null);
			}
		}
	}]);

	return BlogList;
}(_react2.default.Component);

exports.default = BlogList;


var Blog = function (_React$Component2) {
	(0, _inherits3.default)(Blog, _React$Component2);

	function Blog(props) {
		(0, _classCallCheck3.default)(this, Blog);

		return (0, _possibleConstructorReturn3.default)(this, (Blog.__proto__ || (0, _getPrototypeOf2.default)(Blog)).call(this, props));
	}

	(0, _createClass3.default)(Blog, [{
		key: 'render',
		value: function render() {
			var blog = this.props.blogData;
			if (blog) {
				if (this.props.size != 'block') {
					return _react2.default.createElement('div', { className: 'item', 'data-jsx': 3745285973
					}, _react2.default.createElement(_link2.default, { href: { pathname: 'blog', query: { slug: blog.slug } } }, _react2.default.createElement('a', {
						'data-jsx': 3745285973
					}, _react2.default.createElement(_reactAvatar2.default, { color: '#46978c', round: true, size: 32, src: blog.blogImage, name: blog.blogTitle }))), _react2.default.createElement('div', { className: 'content', 'data-jsx': 3745285973
					}, _react2.default.createElement('h4', { className: 'ui header', 'data-jsx': 3745285973
					}, _react2.default.createElement(_link2.default, { href: { pathname: 'blog', query: { slug: blog.slug } } }, _react2.default.createElement('a', {
						'data-jsx': 3745285973
					}, blog.blogTitle)), _react2.default.createElement('div', { className: 'sub header', 'data-jsx': 3745285973
					}, blog.blogDescription ? blog.blogDescription : '\u041F\u043E\u0434\u043F\u0438\u0441\u0447\u0438\u043A\u043E\u0432: ' + blog.blogSubscribersCount))), _react2.default.createElement('div', { className: 'updates', 'data-jsx': 3745285973
					}, '+1'), _react2.default.createElement(_style2.default, {
						styleId: 3745285973,
						css: '.item[data-jsx="3745285973"] {border-bottom:1px solid rgba(255,255,255,0.2);display:-webkit-flex; display:flex;align-items:center;-webkit-flex-direction:row;-moz-flex-direction:row;flex-direction:row;overflow:hidden;max-width:100%;}.item[data-jsx="3745285973"] .header[data-jsx="3745285973"] .sub[data-jsx="3745285973"] {white-space:nowrap;max-width:100%;overflow:hidden;position:relative;}.item[data-jsx="3745285973"]:before {background: -moz-linear-gradient(left, rgba(0,0,0,0) 0%, rgba(0,0,0,0.65) 100%);background: -webkit-linear-gradient(left, rgba(0,0,0,0) 0%,rgba(0,0,0,0.65) 100%);background: linear-gradient(to right, rgba(0,0,0,0) 0%,rgba(0,0,0,0.65) 100%);filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=\'#00000000\', endColorstr=\'#a6000000\',GradientType=1 );position:absolute;left:0px;width:100%;top:0px;height:100%;}.item[data-jsx="3745285973"]:last-child {border-bottom:0px;}.item[data-jsx="3745285973"]:first-child {margin-top:0px;}.item[data-jsx="3745285973"] .content[data-jsx="3745285973"] {margin-left:10px;}.item[data-jsx="3745285973"] .content[data-jsx="3745285973"] .sub.header[data-jsx="3745285973"] {font-size:13px;margin-top:2px;opacity:0.7;}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHNcXGJsb2dMaXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThHa0IsQUFDSiw4QkFDd0MsOENBQ2pDLG1DQUNNLG1CQUNBLHNFQUVILGdCQUNELGVBQ2YsQ0FDbUIseUZBQ0EsbUJBQ0osZUFDQyxnQkFDRSxrQkFDbEIsQ0FDYSxxQ0FDbUUsZ0ZBQ0Usa0ZBQ0osOEVBQzBDLHdIQUN0RyxrQkFDVCxTQUNFLFdBQ0gsUUFDSSxZQUNaLENBQ2lCLHlDQUNDLGtCQUNsQixDQUNrQiwwQ0FDSCxlQUNmLENBQ2UsOERBQ0UsaUJBQ2pCLENBQzJCLGlHQUNaLGVBQ0EsZUFDSCxZQUNaIiwiZmlsZSI6ImNvbXBvbmVudHNcXGJsb2dMaXN0LmpzIiwic291cmNlUm9vdCI6IkU6L3d3dy9MZXZlbHVwLm5hbWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgQXZhdGFyIGZyb20gJ3JlYWN0LWF2YXRhcidcclxuaW1wb3J0IHsgZ2V0QmxvZ3MsIGdldFVzZXJTdWJzY3JpcHRpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9ibG9nLmpzJ1xyXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnXHJcbmltcG9ydCBMb2FkZXIgZnJvbSAnLi9sb2FkZXIuanMnXHJcbmltcG9ydCBTdWJzY3JpYmVCdXR0b24gZnJvbSAnLi9zdWJzY3JpYmVCdXR0b24uanMnXHJcblxyXG4vLyAxIExldmVsOiBhY2NlcHRpbmcgdXNlcmxpc3QgZGF0YVxyXG4vLyAyIExldmVsOiBhY2NlcHRpbmcgdXNlcklEIGFuZCByZXRyaXZpbmcgdXNlclN1YnNjcmlwdGlvbnNcclxuLy8gMyBMZXZlbDogYWNjZXB0aW5nIG5vdGhpbmcgYW5kIHJldHJpdmluZyBhbGwgdXNlcnNcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJsb2dMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgYmxvZ3M6IFtdLFxyXG4gICAgICBpc0xvYWRlZDogZmFsc2VcclxuICAgIH1cclxuICB9IFxyXG5cclxuXHRjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcblx0XHRpZih0aGlzLnByb3BzLmJsb2dzID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0aWYodGhpcy5wcm9wcy5zdWJzY3JpYmVyKSB7XHJcblx0XHRcdFx0Z2V0VXNlclN1YnNjcmlwdGlvbnModGhpcy5wcm9wcy5zdWJzY3JpYmVyKS50aGVuKChyZXMpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRcdFx0XHRibG9ncyA6IHJlcy5kYXRhXHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Z2V0QmxvZ3MoKS50aGVuKChyZXMpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRcdFx0XHRibG9nczogcmVzLmRhdGFcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdFx0YmxvZ3M6IHRoaXMucHJvcHMuYmxvZ3NcclxuXHRcdFx0fSlcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XHJcblx0XHRpZihuZXh0UHJvcHMuYmxvZ3MpIHtcclxuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdFx0YmxvZ3M6IG5leHRQcm9wcy5ibG9nc1xyXG5cdFx0XHR9KVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcbiAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG5cdCAgXHR0aGlzLnNldFN0YXRlKHtcclxuXHQgIFx0XHRpc0xvYWRlZDogdHJ1ZVxyXG5cdCAgXHR9KVxyXG4gICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICBcdGNvbnNvbGUubG9nKHRoaXMuc3RhdGUpXHJcbiAgaWYodGhpcy5zdGF0ZS5pc0xvYWRlZCkge1xyXG4gIFx0ICBpZih0aGlzLnN0YXRlLmJsb2dzLmxlbmd0aCA9PSAwKSB7XHJcblx0ICAgICAgcmV0dXJuIChcclxuXHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibm8tY29udGVudFwiPlxyXG5cdCAgICAgICAgICA8cD7QodC/0LjRgdC+0Log0L/Rg9GB0YI8L3A+XHJcblx0ICAgICAgICA8L2Rpdj5cclxuXHQgICAgICApXHJcblx0ICAgfSBlbHNlIHtcclxuXHQgICBcdHJldHVybiAoXHJcblx0ICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxvZy1saXN0XCI+XHJcblx0ICAgICAgICAge3RoaXMuc3RhdGUuYmxvZ3MubWFwKChpdGVtLCBpKSA9PiB7XHJcblx0ICAgICAgICAgICByZXR1cm4gPEJsb2cgc2l6ZT17dGhpcy5wcm9wcy5zaXplfSBibG9nRGF0YT17aXRlbX0ga2V5PXtpfSAvPlxyXG5cdCAgICAgICAgIH0pfVxyXG5cdCAgICAgICAgIDxzdHlsZSBqc3g+e2BcclxuXHRcdFx0XHRcdC5ibG9nLWxpc3Qge1xyXG5cdFx0XHRcdFx0XHR3aWR0aDoxMDAlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdCAgICAgICAgIGB9PC9zdHlsZT5cclxuXHQgICAgICAgPC9kaXY+XHJcblx0ICAgICApXHJcblx0ICAgfVxyXG4gICB9IGVsc2Uge1xyXG5cdCAgIHJldHVybiAoPExvYWRlciAvPilcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcblxyXG5jbGFzcyBCbG9nIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuXHRjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG5cdFx0c3VwZXIocHJvcHMpO1xyXG5cdH1cclxuXHRyZW5kZXIoKSB7XHJcblx0XHR2YXIgYmxvZyA9IHRoaXMucHJvcHMuYmxvZ0RhdGFcclxuXHRcdGlmIChibG9nKSB7XHJcblx0XHRcdGlmKHRoaXMucHJvcHMuc2l6ZSAhPSAnYmxvY2snKSB7XHJcblx0XHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaXRlbVwiPlxyXG5cdFx0XHRcdFx0XHQ8TGluayBocmVmPXt7IHBhdGhuYW1lOiAnYmxvZycsIHF1ZXJ5OiB7IHNsdWc6IGJsb2cuc2x1ZyB9fX0+PGE+XHJcblx0XHRcdCAgICAgICAgICAgICAgICA8QXZhdGFyIGNvbG9yPXtgIzQ2OTc4Y2B9IHJvdW5kPXt0cnVlfSBzaXplPXszMn0gc3JjPXtibG9nLmJsb2dJbWFnZX0gbmFtZT17YmxvZy5ibG9nVGl0bGV9IC8+XHJcblx0XHRcdCAgICAgICAgICAgIDwvYT48L0xpbms+XHJcblx0XHRcdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudFwiPlxyXG5cdFx0XHRcdFx0XHRcdDxoNCBjbGFzc05hbWU9XCJ1aSBoZWFkZXJcIj5cclxuXHRcdFx0XHRcdFx0XHRcdDxMaW5rIGhyZWY9e3sgcGF0aG5hbWU6ICdibG9nJywgcXVlcnk6IHsgc2x1ZzogYmxvZy5zbHVnIH19fT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PGE+e2Jsb2cuYmxvZ1RpdGxlfTwvYT5cclxuXHRcdFx0XHRcdFx0XHRcdDwvTGluaz5cclxuXHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwic3ViIGhlYWRlclwiPnsoYmxvZy5ibG9nRGVzY3JpcHRpb24pID8gYmxvZy5ibG9nRGVzY3JpcHRpb24gOiBg0J/QvtC00L/QuNGB0YfQuNC60L7QsjogJHtibG9nLmJsb2dTdWJzY3JpYmVyc0NvdW50fWB9PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0PC9oND5cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwidXBkYXRlc1wiPlxyXG5cdFx0XHRcdFx0XHRcdCsxXHJcblx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHQ8c3R5bGUganN4PntgXHJcblx0XHRcdFx0XHRcdFx0Lml0ZW0ge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ym9yZGVyLWJvdHRvbToxcHggc29saWQgcmdiYSgyNTUsMjU1LDI1NSwwLjIpO1xyXG5cdFx0XHRcdFx0XHRcdFx0ZGlzcGxheTpmbGV4O1xyXG5cdFx0XHRcdFx0XHRcdFx0YWxpZ24taXRlbXM6Y2VudGVyO1xyXG5cdFx0XHRcdFx0XHRcdFx0ZmxleC1kaXJlY3Rpb246cm93O1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdG92ZXJmbG93OmhpZGRlbjtcclxuXHRcdFx0XHRcdFx0XHRcdG1heC13aWR0aDoxMDAlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHQuaXRlbSAuaGVhZGVyIC5zdWIge1xyXG5cdFx0XHRcdFx0XHRcdFx0d2hpdGUtc3BhY2U6bm93cmFwO1xyXG5cdFx0XHRcdFx0XHRcdFx0bWF4LXdpZHRoOjEwMCU7XHJcblx0XHRcdFx0XHRcdFx0XHRvdmVyZmxvdzpoaWRkZW47XHJcblx0XHRcdFx0XHRcdFx0XHRwb3NpdGlvbjpyZWxhdGl2ZTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0Lml0ZW06YmVmb3JlIHtcclxuXHRcdFx0XHRcdFx0XHRcdGJhY2tncm91bmQ6IC1tb3otbGluZWFyLWdyYWRpZW50KGxlZnQsIHJnYmEoMCwwLDAsMCkgMCUsIHJnYmEoMCwwLDAsMC42NSkgMTAwJSk7IC8qIEZGMy42LTE1ICovXHJcblx0XHRcdFx0XHRcdFx0XHRiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudChsZWZ0LCByZ2JhKDAsMCwwLDApIDAlLHJnYmEoMCwwLDAsMC42NSkgMTAwJSk7IC8qIENocm9tZTEwLTI1LFNhZmFyaTUuMS02ICovXHJcblx0XHRcdFx0XHRcdFx0XHRiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHJnYmEoMCwwLDAsMCkgMCUscmdiYSgwLDAsMCwwLjY1KSAxMDAlKTsgLyogVzNDLCBJRTEwKywgRkYxNissIENocm9tZTI2KywgT3BlcmExMissIFNhZmFyaTcrICovXHJcblx0XHRcdFx0XHRcdFx0XHRmaWx0ZXI6IHByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5ncmFkaWVudCggc3RhcnRDb2xvcnN0cj0nIzAwMDAwMDAwJywgZW5kQ29sb3JzdHI9JyNhNjAwMDAwMCcsR3JhZGllbnRUeXBlPTEgKTsgLyogSUU2LTkgKi9cclxuXHRcdFx0XHRcdFx0XHRcdHBvc2l0aW9uOmFic29sdXRlO1xyXG5cdFx0XHRcdFx0XHRcdFx0bGVmdDowcHg7XHJcblx0XHRcdFx0XHRcdFx0XHR3aWR0aDoxMDAlO1xyXG5cdFx0XHRcdFx0XHRcdFx0dG9wOjBweDtcclxuXHRcdFx0XHRcdFx0XHRcdGhlaWdodDoxMDAlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHQuaXRlbTpsYXN0LWNoaWxkIHtcclxuXHRcdFx0XHRcdFx0XHRcdGJvcmRlci1ib3R0b206MHB4O1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHQuaXRlbTpmaXJzdC1jaGlsZCB7XHJcblx0XHRcdFx0XHRcdFx0XHRtYXJnaW4tdG9wOjBweDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0Lml0ZW0gLmNvbnRlbnQge1xyXG5cdFx0XHRcdFx0XHRcdFx0bWFyZ2luLWxlZnQ6MTBweDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0Lml0ZW0gLmNvbnRlbnQgLnN1Yi5oZWFkZXIge1xyXG5cdFx0XHRcdFx0XHRcdFx0Zm9udC1zaXplOjEzcHg7XHJcblx0XHRcdFx0XHRcdFx0XHRtYXJnaW4tdG9wOjJweDtcclxuXHRcdFx0XHRcdFx0XHRcdG9wYWNpdHk6MC43O1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0YH08L3N0eWxlPlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0KSBcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJpdGVtXCI+XHJcblx0XHRcdFx0XHQgIDxkaXYgY2xhc3NOYW1lPVwiaW1hZ2VcIj5cclxuXHRcdFx0XHRcdCAgICA8QXZhdGFyIGNvbG9yPXtgIzQ2OTc4Y2B9IHJvdW5kPXt0cnVlfSBzaXplPXs1MH0gc3JjPXtibG9nLmJsb2dJbWFnZX0gbmFtZT17YmxvZy5ibG9nVGl0bGV9IC8+XHJcblx0XHRcdFx0XHQgIDwvZGl2PlxyXG5cdFx0XHRcdFx0ICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRcIj5cclxuXHRcdFx0XHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGVmdFwiPlxyXG5cdFx0XHRcdCAgXHRcdCAgICA8TGluayBocmVmPXt7IHBhdGhuYW1lOiAnYmxvZycsIHF1ZXJ5OiB7IHNsdWc6IGJsb2cuc2x1ZyB9fX0+XHJcblx0XHRcdFx0ICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiaGVhZGVyXCI+e2Jsb2cuYmxvZ1RpdGxlfTwvYT4gXHJcblx0XHRcdFx0ICAgICAgICAgIDwvTGluaz5cclxuXHRcdFx0XHQgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic3Vic2NyaWJlcnNcIj4xINC/0L7QtNC/0LjRgdGH0LjQujwvc3Bhbj5cclxuXHRcdFx0XHQgIFx0XHQgICAgPGRpdiBjbGFzc05hbWU9XCJkZXNjcmlwdGlvblwiPlxyXG5cdFx0XHRcdCAgXHRcdCAgICAgIHtibG9nLmJsb2dEZXNjcmlwdGlvbn1cclxuXHRcdFx0XHQgIFx0XHQgICAgPC9kaXY+XHJcblx0XHRcdFx0ICAgICAgICA8L2Rpdj5cclxuXHRcdFx0XHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmlnaHRcIj5cclxuXHRcdFx0XHQgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb25cIj5cclxuXHRcdFx0XHQgICAgICAgICAgPFN1YnNjcmliZUJ1dHRvbiBcclxuXHRcdFx0XHRcdCAgICAgICAgICBzdWJzY3JpYmVUZXh0PVwi0J/QvtC00L/QuNGB0LDRgtGM0YHRj1wiIFxyXG5cdFx0XHRcdFx0ICAgICAgICAgIHVuc3Vic2NyaWJlVGV4dD1cItCe0YLQv9C40YHQsNGC0YzRgdGPXCIgXHJcblx0XHRcdFx0XHQgICAgICAgICAgYWRkaXRpb25hbENsYXNzZXM9XCJiYXNpYyBzbWFsbFwiIFxyXG5cdFx0XHRcdFx0ICAgICAgICAgIGVudHJ5VHlwZT1cImJsb2dcIlxyXG5cdFx0XHRcdFx0ICAgICAgICAgIGVudHJ5SUQ9e2Jsb2cuX2lkfVxyXG5cdFx0XHRcdFx0ICAgICAgICAgIC8+XHJcblx0XHRcdFx0ICAgICAgICA8L2Rpdj5cclxuXHRcdFx0XHQgICAgICAgIDwvZGl2PlxyXG5cdFx0XHRcdFx0ICA8L2Rpdj5cclxuXHJcblx0XHRcdCAgICAgIDxzdHlsZSBqc3g+e2BcclxuXHRcdFx0ICAgICAgICAuaXRlbSB7XHJcblx0XHRcdCAgICAgICAgICBkaXNwbGF5OmZsZXg7XHJcblx0XHRcdCAgICAgICAgICBhbGlnbi1pdGVtczpjZW50ZXI7XHJcblx0XHRcdCAgICAgICAgICB3aWR0aDoxMDAlO1xyXG5cdFx0XHQgICAgICAgICAgYm9yZGVyLWJvdHRvbToxcHggc29saWQgI2VlZTtcclxuXHRcdFx0ICAgICAgICAgIHBhZGRpbmc6MHB4IWltcG9ydGFudDtcclxuXHRcdFx0XHRcdFx0IG1hcmdpbjowcHghaW1wb3J0YW50O1xyXG5cdFx0XHRcdFx0XHQgbWFyZ2luLWJvdHRvbTo4cHghaW1wb3J0YW50O1xyXG5cdFx0XHQgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAuaXRlbSAuY29udGVudCB7XHJcblx0XHRcdCAgICAgICAgICBkaXNwbGF5OmZsZXg7XHJcblx0XHRcdCAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtcclxuXHRcdFx0ICAgICAgICAgIHdpZHRoOjEwMCU7XHJcblx0XHRcdCAgICAgICAgICBtYXJnaW4tbGVmdDoxNXB4O1xyXG5cdFx0XHQgICAgICAgIH1cclxuXHRcdFx0ICAgICAgICAuaXRlbSAuY29udGVudCAuaGVhZGVyIHtcclxuXHRcdFx0ICAgICAgICAgIGZvbnQtd2VpZ2h0OmJvbGQ7XHJcblx0XHRcdCAgICAgICAgfVxyXG5cdFx0XHQgICAgICAgIC5pdGVtIC5jb250ZW50IC5zdWJzY3JpYmVycyB7XHJcblx0XHRcdCAgICAgICAgICBmb250LXNpemU6MTVweDtcclxuXHRcdFx0ICAgICAgICAgIGZvbnQtd2VpZ2h0OjEwMDtcclxuXHRcdFx0ICAgICAgICAgIGNvbG9yOiNjMGMwYzA7XHJcblx0XHRcdCAgICAgICAgICBtYXJnaW4tbGVmdDoxMHB4O1xyXG5cdFx0XHQgICAgICAgIH1cclxuXHRcdFx0ICAgICAgYH08L3N0eWxlPlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0KVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gKDxkaXY+PC9kaXY+KVxyXG5cdFx0fVxyXG5cdH1cclxufVxyXG4iXX0= */\n/*@ sourceURL=components\\blogList.js */'
					}));
				} else {
					return _react2.default.createElement('div', { className: 'item', 'data-jsx': 539920816
					}, _react2.default.createElement('div', { className: 'image', 'data-jsx': 539920816
					}, _react2.default.createElement(_reactAvatar2.default, { color: '#46978c', round: true, size: 50, src: blog.blogImage, name: blog.blogTitle })), _react2.default.createElement('div', { className: 'content', 'data-jsx': 539920816
					}, _react2.default.createElement('div', { className: 'left', 'data-jsx': 539920816
					}, _react2.default.createElement(_link2.default, { href: { pathname: 'blog', query: { slug: blog.slug } } }, _react2.default.createElement('a', { className: 'header', 'data-jsx': 539920816
					}, blog.blogTitle)), _react2.default.createElement('span', { className: 'subscribers', 'data-jsx': 539920816
					}, '1 \u043F\u043E\u0434\u043F\u0438\u0441\u0447\u0438\u043A'), _react2.default.createElement('div', { className: 'description', 'data-jsx': 539920816
					}, blog.blogDescription)), _react2.default.createElement('div', { className: 'right', 'data-jsx': 539920816
					}, _react2.default.createElement('div', { className: 'action', 'data-jsx': 539920816
					}, _react2.default.createElement(_subscribeButton2.default, {
						subscribeText: '\u041F\u043E\u0434\u043F\u0438\u0441\u0430\u0442\u044C\u0441\u044F',
						unsubscribeText: '\u041E\u0442\u043F\u0438\u0441\u0430\u0442\u044C\u0441\u044F',
						additionalClasses: 'basic small',
						entryType: 'blog',
						entryID: blog._id
					})))), _react2.default.createElement(_style2.default, {
						styleId: 539920816,
						css: '.item[data-jsx="539920816"] {display:-webkit-flex; display:flex;align-items:center;width:100%;border-bottom:1px solid #eee;padding:0px!important;margin:0px!important;margin-bottom:8px!important;}.item[data-jsx="539920816"] .content[data-jsx="539920816"] {display:-webkit-flex; display:flex;justify-content:space-between;width:100%;margin-left:15px;}.item[data-jsx="539920816"] .content[data-jsx="539920816"] .header[data-jsx="539920816"] {font-weight:bold;}.item[data-jsx="539920816"] .content[data-jsx="539920816"] .subscribers[data-jsx="539920816"] {font-size:15px;font-weight:100;color:#c0c0c0;margin-left:10px;}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=components\\blogList.js */'
					}));
				}
			} else {
				return _react2.default.createElement('div', null);
			}
		}
	}]);

	return Blog;
}(_react2.default.Component);

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "E:\\www\\Levelup.name\\components\\blogList.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "E:\\www\\Levelup.name\\components\\blogList.js"); } } })();

/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,